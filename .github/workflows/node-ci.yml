name: Node CI

on:
  pull_request:
    # edited is needed because that's the trigger when the base branch is changed on a PR
    # The rest are the defaults.
    types: [edited, opened, synchronize, reopened]

  push:
    branches:
    - master
    - feature/*

# Our jobs run like this to minimize wasting resource cycles:
#   1. Prime caches for primary configuration (ubuntu on node 12).
#   2. Lint, coverage, and publish
#     a. Lint
#     b. Coverage and publish
#   3. Prime caches for remaining configurations
#   4. Run tests for remaining configurations

jobs:
  prime_cache_primary:
    name: Prime node_modules cache for primary configuration
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [12.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - uses: actions/cache@v2
      id: node-modules-cache # use this to check for `cache-hit` (`steps.node-modules-cache.outputs.cache-hit != 'true'`)
      with:
        path: node_modules
        key: ${{ runner.os }}${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile


  prime_cache_secondary:
    needs: [lint, publish_to_branch]
    name: Prime node_modules cache for seconday configurations
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        node-version: [12.x, 14.x]
        exclude:
          # The primary cache primer job handles this.
          - os: ubuntu-latest
            node-version: 12.x
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - uses: actions/cache@v2
      id: node-modules-cache # use this to check for `cache-hit` (`steps.node-modules-cache.outputs.cache-hit != 'true'`)
      with:
        path: node_modules
        key: ${{ runner.os }}${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile


  lint:
    needs: [prime_cache_primary]
    name: Lint and flow check
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [12.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - uses: actions/cache@v2
      id: node-modules-cache # use this to check for `cache-hit` (`steps.node-modules-cache.outputs.cache-hit != 'true'`)
      with:
        path: node_modules
        key: ${{ runner.os }}${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile
    - name: Lint
      run: yarn lint
    - name: Flow
      run: yarn flow:ci


  test:
    needs: [prime_cache_secondary]
    name: Test
    env:
      CI: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        node-version: [12.x, 14.x]
        exclude:
          # The publish job covers this configuration
          - os: ubuntu-latest
            node-version: 12.x
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - uses: actions/cache@v2
      id: node-modules-cache # use this to check for `cache-hit` (`steps.node-modules-cache.outputs.cache-hit != 'true'`)
      with:
        path: node_modules
        key: ${{ runner.os }}${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile
    - name: Run tests
      run: yarn test


  # This workflow will build distributable artifacts and commit them to the
  # branch that is being used for the PR. This should work even on protected
  # branches because of secrets. This also is responsible for running and
  # uploading code coverage since it already runs the tests before the build
  # anyway.
  publish_to_branch:
    needs: [prime_cache_primary]
    name: Publish to branch and gather coverage
    # We only want to run this if it's a push event or a pull_request for
    # a non-feature branch.
    if: github.event_name == 'push' || !startsWith(github.head_ref, 'feature/')
    env:
      CI: true
    runs-on: ubuntu-latest
    steps:
    - uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    - name: Clone repository
      run: git clone git@github.com:Khan/render-gateway.git .

      # For PRs, we can use github.head_ref to get the branch that the PR
      # is made from. We cannot use github.ref as that points to the PR, not
      # its branch. For pushes, we have to get the branch name from GITHUB_REF
      # which, instead of just being a branch name, is of the form
      # refs/heads/<BRANCH NAME>
      # Note if we end up with a blank branch name, we quit as otherwise, we
      # would update the default branch, which is not what we want at all.
    - name: Determine checkout branch
      run: |
        _PUBLISH_BRANCH=$(test $GITHUB_HEAD_REF && echo $GITHUB_HEAD_REF || echo $GITHUB_REF | sed -e "s/refs\/heads\///g")
        test $_PUBLISH_BRANCH || exit 1
        echo "PUBLISH_BRANCH=$_PUBLISH_BRANCH" >> $GITHUB_ENV

    - name: Checkout via SSH
      run: git checkout ${{ env.PUBLISH_BRANCH }}
    - name: Use Node.js 12
      uses: actions/setup-node@v2
      with:
        node-version: 12.x
    - uses: actions/cache@v2
      id: node-modules-cache # use this to check for `cache-hit` (`steps.node-modules-cache.outputs.cache-hit != 'true'`)
      with:
        path: node_modules
        key: ${{ runner.os }}${{ matrix.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}${{ matrix.node-version }}-node-modules-
    - name: Install dependencies
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile
    - name: Run tests with coverage
      run: yarn coverage
    - name: Upload Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
    - name: Build the distributable artifacts
      run: yarn build
    - name: Detect changes
      run: echo "HAS_CHANGES=$(git status --porcelain | wc -l | xargs echo)" >> $GITHUB_ENV
    - name: Commit changes
      if: env.HAS_CHANGES != '0'
      # If we have changes, we push them and then fail out. This prevents
      # us from running more testing than we want since the push will
      # trigger another test run anyway.
      run: |
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        git config user.name "$GITHUB_ACTOR"
        git add dist
        git commit -m "Updating branch with build artifacts (https://github.com/Khan/render-gateway/actions/runs/${{ github.run_id }})"
        git push
        exit 1
