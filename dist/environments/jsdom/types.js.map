{"version":3,"file":"types.js","names":[],"sources":["../../../src/environments/jsdom/types.js"],"sourcesContent":["// @flow\nimport type {ResourceLoader} from \"jsdom\";\nimport type {RenderAPI, ICloseable} from \"../../types.js\";\n\n/**\n * Gate API for control flow.\n */\nexport interface IGate extends ICloseable {\n    /**\n     * Open the gate.\n     */\n    open(): void;\n\n    /**\n     * Close the gate.\n     */\n    close: () => ?Promise<void>;\n\n    /**\n     * True, if the gate is open; otherwise, false.\n     */\n    get isOpen(): boolean;\n}\n\n/**\n * Standard timer API as implemented by Node's global or a browser window.\n */\nexport interface ITimerAPI {\n    setTimeout: $PropertyType<typeof window, \"setTimeout\">;\n    setInterval: $PropertyType<typeof window, \"setInterval\">;\n    requestAnimationFrame: $PropertyType<\n        typeof window,\n        \"requestAnimationFrame\",\n    >;\n}\n\n/**\n * A resource loader for use with JSDOM that can also have a close method for\n * tidying up resources deterministically.\n */\nexport interface CloseableResourceLoader extends ResourceLoader, ICloseable {\n    /**\n     * Close the resource loader and tidy up resources.\n     *\n     * This is optional.\n     */\n    +close?: () => void;\n}\n\n/**\n * Configuration for a JSDOM environment.\n */\nexport interface IJSDOMConfiguration {\n    /**\n     * The name of the callback function that should be exposed by the\n     * environment for renderable code to use when registering for rendering.\n     */\n    get registrationCallbackName(): string;\n\n    /**\n     * Get a JSDOM resource loader for the given render request.\n     *\n     * @param {string} url The URL that is to be rendered.\n     * @param {RenderAPI} renderAPI An API of utilities for assisting with the\n     * render operation.\n     * @returns {CloseableResourceLoader} A ResourceLoader instance for use\n     * with JSDOM that can optionally have a close() method, which will be\n     * invoked when the render completes.\n     */\n    getResourceLoader(\n        url: string,\n        renderAPI: RenderAPI,\n    ): CloseableResourceLoader;\n\n    /**\n     * Get the list of file URLs to retrieve and execute for the given request.\n     *\n     * @param {string} url The URL that is to be rendered.\n     * @param {RenderAPI} renderAPI An API of utilities for assisting with the\n     * render operation.\n     * @param {(url: string) => ?Promise<Buffer>} fetchFn\n     * Function to fetch a URL. Using this ensures proper tidy-up of associated\n     * sockets and agents.\n     * @returns {Promise<Array<string>>} An ordered array of absolute URLs for\n     * the JavaScript files that are to be executed. These are exectued in the\n     * same order as the array.\n     */\n    getFileList(\n        url: string,\n        renderAPI: RenderAPI,\n        fetchFn: (url: string) => ?Promise<Buffer>,\n    ): Promise<Array<string>>;\n\n    /**\n     * Perform any additional environment setup.\n     *\n     * This method gets access to the actual environment in which code will\n     * execute. Be careful what you do.\n     *\n     * @param {string} url The URL that is to be rendered.\n     * @param {RenderAPI} renderAPI An API of utilities for assisting with the\n     * render operation.\n     * @param {any} vmContext The actual environment that is being setup.\n     * @returns {?Promise<void>} A promise that the additional setup is done.\n     */\n    afterEnvSetup(\n        url: string,\n        fileURLs: $ReadOnlyArray<string>,\n        renderAPI: RenderAPI,\n        vmContext: any,\n    ): Promise<?ICloseable>;\n}\n"],"mappings":""}