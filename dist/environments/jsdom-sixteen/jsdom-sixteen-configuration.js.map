{"version":3,"file":"jsdom-sixteen-configuration.js","names":["_wonderStuffCore","require","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","JSDOMSixteenConfiguration","constructor","getFileList","getResourceLoader","afterEnvSetup","registrationCallbackName","KindError","Errors","Internal","Promise","resolve","exports"],"sources":["../../../src/environments/jsdom-sixteen/jsdom-sixteen-configuration.js"],"sourcesContent":["// @flow\nimport {KindError, Errors} from \"@khanacademy/wonder-stuff-core\";\nimport type {\n    IJSDOMSixteenConfiguration,\n    CloseableResourceLoader,\n    ICloseable,\n} from \"./types.js\";\nimport type {RenderAPI} from \"../../types.js\";\n\n/**\n * Utility for creating a valid configuration to use with the JSDOM Sixteen\n * environment.\n */\nexport class JSDOMSixteenConfiguration implements IJSDOMSixteenConfiguration {\n    +registrationCallbackName: string;\n    +getFileList: (\n        url: string,\n        renderAPI: RenderAPI,\n        fetchFn: (url: string) => ?Promise<Buffer>,\n    ) => Promise<Array<string>>;\n    +getResourceLoader: (\n        url: string,\n        renderAPI: RenderAPI,\n    ) => CloseableResourceLoader;\n    +afterEnvSetup: (\n        url: string,\n        fileURLs: $ReadOnlyArray<string>,\n        renderAPI: RenderAPI,\n        vmContext: any,\n    ) => Promise<?ICloseable>;\n\n    /**\n     * Create a configuration for use with the JSDOM Sixteen environment.\n     *\n     * @param {(url: string, renderAPI: RenderAPI) => Promise<Array<string>>} getFileList\n     * Callback that should return a promise for the list of JavaScript files\n     * the environment must execute in order to produce a result for the given\n     * render request.\n     * @param {(url: string, renderAPI: RenderAPI) => ResourceLoader} getResourceLoader\n     * Callback that should return a JSDOM resource loader for the given\n     * request. We must call this per render so that logging is appropriately\n     * channeled for the request being made.\n     * @param {(url: string, fileURLs: $ReadOnlyArray<string>, renderAPI: RenderAPI, vmContext: any) => ?Promise<mixed>} [afterEnvSetup]\n     * Callback to perform additional environment setup before the render\n     * occurs. This can optionally return an object that can add extra fields\n     * to the environment context for rendering code to access. This is useful\n     * if your render server wants to add some specific configuration, such\n     * as setting up some versions of Apollo for server-side rendering.\n     * Be careful; any functions you attach can be executed by the rendering\n     * code.\n     * @param {string} [registrationCallbackName] The name of the function\n     * that the environment should expose for client code to register for\n     * rendering. This defaults to `__jsdom_env_register`.\n     */\n    constructor(\n        getFileList: (\n            url: string,\n            renderAPI: RenderAPI,\n            fetchFn: (url: string) => ?Promise<Buffer>,\n        ) => Promise<Array<string>>,\n        getResourceLoader: (\n            url: string,\n            renderAPI: RenderAPI,\n        ) => CloseableResourceLoader,\n        afterEnvSetup?: (\n            url: string,\n            fileURLs: $ReadOnlyArray<string>,\n            renderAPI: RenderAPI,\n            vmContext: any,\n        ) => Promise<?ICloseable>,\n        registrationCallbackName?: string = \"__jsdom_env_register\",\n    ) {\n        if (typeof getFileList !== \"function\") {\n            throw new KindError(\n                \"Must provide valid callback for obtaining file list\",\n                Errors.Internal,\n            );\n        }\n        if (typeof getResourceLoader !== \"function\") {\n            throw new KindError(\n                \"Must provide valid callback for obtaining resource loader\",\n                Errors.Internal,\n            );\n        }\n        if (afterEnvSetup != null && typeof afterEnvSetup !== \"function\") {\n            throw new KindError(\n                \"Must provide valid callback for after env setup or null\",\n                Errors.Internal,\n            );\n        }\n\n        this.registrationCallbackName = registrationCallbackName;\n        this.getFileList = getFileList;\n        this.getResourceLoader = getResourceLoader;\n        this.afterEnvSetup = afterEnvSetup || (() => Promise.resolve(null));\n    }\n}\n"],"mappings":";;;;;;AACA,IAAAA,gBAAA,GAAAC,OAAA;AAAiE,SAAAC,gBAAAC,GAAA,EAAAC,GAAA,EAAAC,KAAA,IAAAD,GAAA,GAAAE,cAAA,CAAAF,GAAA,OAAAA,GAAA,IAAAD,GAAA,IAAAI,MAAA,CAAAC,cAAA,CAAAL,GAAA,EAAAC,GAAA,IAAAC,KAAA,EAAAA,KAAA,EAAAI,UAAA,QAAAC,YAAA,QAAAC,QAAA,oBAAAR,GAAA,CAAAC,GAAA,IAAAC,KAAA,WAAAF,GAAA;AAAA,SAAAG,eAAAM,GAAA,QAAAR,GAAA,GAAAS,YAAA,CAAAD,GAAA,2BAAAR,GAAA,gBAAAA,GAAA,GAAAU,MAAA,CAAAV,GAAA;AAAA,SAAAS,aAAAE,KAAA,EAAAC,IAAA,eAAAD,KAAA,iBAAAA,KAAA,kBAAAA,KAAA,MAAAE,IAAA,GAAAF,KAAA,CAAAG,MAAA,CAAAC,WAAA,OAAAF,IAAA,KAAAG,SAAA,QAAAC,GAAA,GAAAJ,IAAA,CAAAK,IAAA,CAAAP,KAAA,EAAAC,IAAA,2BAAAK,GAAA,sBAAAA,GAAA,YAAAE,SAAA,4DAAAP,IAAA,gBAAAF,MAAA,GAAAU,MAAA,EAAAT,KAAA;AAQjE;AACA;AACA;AACA;AACO,MAAMU,yBAAyB,CAAuC;EAkBzE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CACPC,WAI2B,EAC3BC,iBAG4B,EAC5BC,aAKyB,EACzBC,wBAAiC,GAAG,sBAAsB,EAC5D;IAAA5B,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA;IACE,IAAI,OAAOyB,WAAW,KAAK,UAAU,EAAE;MACnC,MAAM,IAAII,0BAAS,CACf,qDAAqD,EACrDC,uBAAM,CAACC,QAAQ,CAClB;IACL;IACA,IAAI,OAAOL,iBAAiB,KAAK,UAAU,EAAE;MACzC,MAAM,IAAIG,0BAAS,CACf,2DAA2D,EAC3DC,uBAAM,CAACC,QAAQ,CAClB;IACL;IACA,IAAIJ,aAAa,IAAI,IAAI,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;MAC9D,MAAM,IAAIE,0BAAS,CACf,yDAAyD,EACzDC,uBAAM,CAACC,QAAQ,CAClB;IACL;IAEA,IAAI,CAACH,wBAAwB,GAAGA,wBAAwB;IACxD,IAAI,CAACH,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,aAAa,GAAGA,aAAa,KAAK,MAAMK,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC,CAAC;EACvE;AACJ;AAACC,OAAA,CAAAX,yBAAA,GAAAA,yBAAA"}