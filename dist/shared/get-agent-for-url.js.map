{"version":3,"sources":["../../src/shared/get-agent-for-url.js"],"names":["httpAgent","httpsAgent","getAgentForURL","url","agentOptions","keepAlive","protocol","http","require","Agent","https","Error"],"mappings":";;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAIA,SAAJ;AACA,IAAIC,UAAJ;AAEA;;;;;;;;;;AASO,MAAMC,cAAc,GAAIC,GAAD,IAAsC;AAChE,QAAMC,YAAY,GAAG;AAACC,IAAAA,SAAS,EAAE;AAAZ,GAArB;;AACA,UAAQF,GAAG,CAACG,QAAZ;AACI,SAAK,OAAL;AACI,UAAIN,SAAS,IAAI,IAAjB,EAAuB;AACnB,cAAMO,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACAR,QAAAA,SAAS,GAAG,IAAIO,IAAI,CAACE,KAAT,CAAeL,YAAf,CAAZ;AACH;;AACD,aAAOJ,SAAP;;AAEJ,SAAK,QAAL;AACI,UAAIC,UAAU,IAAI,IAAlB,EAAwB;AACpB,cAAMS,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACAP,QAAAA,UAAU,GAAG,IAAIS,KAAK,CAACD,KAAV,CAAgBL,YAAhB,CAAb;AACH;;AACD,aAAOH,UAAP;;AAEJ;AACI,YAAM,IAAIU,KAAJ,CAAW,yBAAwBR,GAAG,CAACG,QAAS,EAAhD,CAAN;AAhBR;AAkBH,CApBM","sourcesContent":["// @flow\nimport type {URL} from \"url\";\nimport type {Agent as HttpAgent} from \"http\";\nimport type {Agent as HttpsAgent} from \"https\";\n\n/**\n * When making requests from one Node service to other services, we have seen\n * some long delays establishing TCP connections to the load balancer of those\n * backends. To try and workaround the problem, we ensure the keepAlive option\n * of the agent is set. It is hoped that this will re-use a recently released\n * socket instead of creating a new one on each request.\n *\n * If a socket is not available, the agent will automatically create a new one.\n * If increased load on the Node service results in similar connection delays,\n * we may consider setting maxSockets to instruct the agent to limit the\n * number of sockets created per destination host.\n *\n * NOTE: agentkeepalive and http/2 have been tried with superagent to see if\n * we could utilize those approaches, which provide more persistent connections.\n * However, App Engine/load balancer appear to interrupt the creation of these\n * persistent connections. It could be that the relevant ports need to be\n * listened on for that to work correctly, so further investigation into those\n * options might bear some fruit.\n *\n * For now, we do this.\n */\n\nlet httpAgent;\nlet httpsAgent;\n\n/**\n * Get an agent to use for a given URL.\n *\n * For keep-alive behavior to work, the agent must be shared across requests.\n * Therefore, the returned agent (one per protocol - http or https) will be\n * the same on repeated requests.\n *\n * Agents are created on first request.\n */\nexport const getAgentForURL = (url: URL): HttpAgent | HttpsAgent => {\n    const agentOptions = {keepAlive: true};\n    switch (url.protocol) {\n        case \"http:\":\n            if (httpAgent == null) {\n                const http = require(\"http\");\n                httpAgent = new http.Agent(agentOptions);\n            }\n            return httpAgent;\n\n        case \"https:\":\n            if (httpsAgent == null) {\n                const https = require(\"https\");\n                httpsAgent = new https.Agent(agentOptions);\n            }\n            return httpsAgent;\n\n        default:\n            throw new Error(`Unsupported protocol: ${url.protocol}`);\n    }\n};\n"],"file":"get-agent-for-url.js"}