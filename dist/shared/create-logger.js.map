{"version":3,"file":"create-logger.js","names":["devFormatter","level","message","metadata","metadataString","Object","keys","length","JSON","stringify","getFormatters","mode","formatters","winston","format","splat","push","cli","printf","info","combine","getTransport","logLevel","sink","stream","Writable","write","_write","transports","Stream","Console","lw","LoggingWinston","getDefaultMetadata","instance","pid","getGatewayInfo","instanceID","processID","createLogger","runtimeMode","winstonLogger","kind","Errors","Internal","defaultMeta","debug"],"sources":["../../src/shared/create-logger.js"],"sourcesContent":["// @flow\nimport stream from \"stream\";\nimport winston from \"winston\";\nimport * as lw from \"@google-cloud/logging-winston\";\nimport type {Transport, NpmLogLevels, Format} from \"winston\";\n\nimport {Errors} from \"./errors.js\";\nimport {getGatewayInfo} from \"./get-gateway-info.js\";\nimport type {Runtime, Logger, LogLevel, Info} from \"./types.js\";\n\n/**\n * This is how the log message gets formatted.\n *\n * We can expand this to include additional metadata as needed. For example,\n * if we have the profiling API from react-render-server, we could include\n * the duration metadata.\n */\nconst devFormatter = ({level, message, ...metadata}: Info): string => {\n    const metadataString =\n        metadata == null || Object.keys(metadata).length === 0\n            ? \"\"\n            : ` ${JSON.stringify(metadata, null, 4)}`;\n    return `${level}: ${message}${metadataString}`;\n};\n\n/**\n * Build the formatters to give us some nice dev output.\n */\nconst getFormatters = (mode: Runtime): Format => {\n    const formatters: Array<Format> = [\n        winston.format.splat(), // Allows for %s style substitutions\n    ];\n    if (mode === \"development\") {\n        formatters.push(winston.format.cli({level: true}));\n    }\n\n    /**\n     * This must be added after the cli formatter if it is to be used in\n     * the dev output.\n     */\n    formatters.push(winston.format.printf((info: any) => devFormatter(info)));\n    return winston.format.combine(...formatters);\n};\n\n/**\n * Gets the logging transport for the given mode.\n */\nconst getTransport = (mode: Runtime, logLevel: LogLevel): Transport => {\n    switch (mode) {\n        /**\n         * Our flow types guard against misuse as long as someone is using them.\n         * Let's be defensive and cope with a bad value. In that case, we'll\n         * assume our test mode as it's the most inert.\n         */\n        default:\n        case \"test\":\n            /**\n             * During testing, we just dump logging.\n             * This avoids storing it anywhere and keeps it out of our\n             * test output.\n             * To do this, we use a stream that just writes to nowhere.\n             *\n             * If you want to test logging, you can jest.spy on the logger's\n             * log method, or any other of its more specific logging methods.\n             */\n            const sink = new stream.Writable({write: () => {}});\n            /**\n             * This is a hack to make our writable stream work\n             */\n            // $FlowFixMe[cannot-write]\n            // $FlowFixMe[method-unbinding]\n            sink._write = sink.write;\n            return new winston.transports.Stream({\n                format: getFormatters(\"test\"),\n                stream: sink,\n            });\n\n        case \"development\":\n            /**\n             * If we're in dev mode, just use a console transport.\n             */\n            return new winston.transports.Console({\n                format: getFormatters(\"development\"),\n            });\n\n        case \"production\":\n            /**\n             * We must be in production, so we will use the Stackdriver logging\n             * setup.\n             *\n             * The Google-provided logging-winston middleware, which adds a log\n             * property to the express request, looks for this transport before\n             * adding its own (if it didn't, we would get double logging of\n             * each message we logged).\n             */\n            return new lw.LoggingWinston({\n                level: logLevel,\n            });\n    }\n};\n\n/**\n * Get default metadata to attach to logs.\n */\nexport const getDefaultMetadata = (): any => {\n    const {instance, pid} = getGatewayInfo();\n    return {\n        instanceID: instance,\n        processID: pid,\n    };\n};\n\n/**\n * Create a logger for the given runtime mode and log level.\n */\nexport const createLogger = (\n    runtimeMode: Runtime,\n    logLevel: LogLevel,\n): Logger => {\n    const winstonLogger = winston.createLogger<NpmLogLevels>({\n        level: logLevel,\n        transports: getTransport(runtimeMode, logLevel),\n        format: winston.format((info) => {\n            // Let's make sure that errors reported without a taxonomic\n            // label get labelled.\n            if (info.level === \"error\" && info.kind == null) {\n                info.kind = Errors.Internal;\n            }\n            return info;\n        })(),\n        defaultMeta: getDefaultMetadata(),\n    });\n\n    winstonLogger.debug(\n        `Created logger (Level=${logLevel} Mode=${runtimeMode})`,\n    );\n\n    return winstonLogger;\n};\n"],"mappings":"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"}