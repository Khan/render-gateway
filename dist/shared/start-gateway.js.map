{"version":3,"file":"start-gateway.js","names":["startGateway","options","app","logger","host","port","name","mode","keepAliveTimeout","process","env","GAE_SERVICE","setRootLogger","KA_ALLOW_HEAPDUMP","require","debug","pid","e","setupStackdriver","cloudOptions","appWithMiddleware","useAppEngineMiddleware","gateway","listen","err","error","message","kind","Errors","Internal","address","warn","info","connections","closeConnections","connection","Object","values","destroy","on","key","remoteAddress","remotePort","close","exit","trickFlow","headersTimeout"],"sources":["../../src/shared/start-gateway.js"],"sourcesContent":["// @flow\nimport type {$Application, $Request, $Response} from \"express\";\nimport {useAppEngineMiddleware} from \"./use-app-engine-middleware.js\";\nimport {setupStackdriver} from \"./setup-stackdriver.js\";\nimport {setRootLogger} from \"./root-logger.js\";\nimport type {GatewayOptions, RequestWithLog} from \"./types.js\";\nimport {Errors} from \"./errors.js\";\n\n/**\n * Start a gateway application server.\n *\n * This takes a server application definition and attaches middleware before\n * listening on the appropriate port per the passed options.\n */\nexport async function startGateway<\n    TReq: RequestWithLog<$Request>,\n    TRes: $Response,\n>(\n    options: GatewayOptions,\n    app: $Application<TReq, TRes>,\n): Promise<?http$Server> {\n    const {logger, host, port, name, mode, keepAliveTimeout} = options;\n\n    /**\n     * Make sure GAE_SERVICE has a value.\n     *\n     * If it isn't set at this point, we're not running in GAE, so we can\n     * set it ourselves.\n     */\n    if (process.env.GAE_SERVICE == null) {\n        process.env.GAE_SERVICE = name;\n    }\n\n    /**\n     * Setup logging.\n     * We create the root logger once and then share it via a singleton.\n     * This avoids us creating a new one in each worker, which was happening\n     * when we created the logger on import of `getLogger`.\n     */\n    setRootLogger(logger);\n\n    /**\n     * In development mode, we include the heapdump module if it exists.\n     * With this installed, `kill -USR2 <pid>` can be used to create a\n     * heapsnapshot file of the gateway's memory.\n     *\n     * We ignore this from coverage because we don't care enough to test it.\n     */\n    /* istanbul ignore next */\n    if (process.env.KA_ALLOW_HEAPDUMP || mode === \"development\") {\n        try {\n            /* eslint-disable import/no-unassigned-import */\n            // $FlowIgnore[cannot-resolve-module]\n            require(\"heapdump\");\n            /* eslint-enable import/no-unassigned-import */\n            logger.debug(\n                `Heapdumps enabled. To create a heap snapshot at any time, run \"kill -USR2 ${process.pid}\".`,\n            );\n        } catch (e) {\n            // heapdump is an optional peer dependency, so if it is absent,\n            // that is perfectly fine.\n        }\n    }\n\n    // Set up stackdriver integrations.\n    await setupStackdriver(mode, options.cloudOptions);\n\n    // Add GAE middleware.\n    const appWithMiddleware = await useAppEngineMiddleware<TReq, TRes>(\n        app,\n        mode,\n        logger,\n    );\n\n    /**\n     * Start the gateway listening.\n     *\n     * We need the variable so we can reference it inside the error handling\n     * callback. Feels a bit nasty, but it works.\n     */\n    const gateway = appWithMiddleware.listen(port, host, (err: ?Error) => {\n        if (gateway == null || err != null) {\n            logger.error(\n                `${name} appears not to have started: ${\n                    (err && err.message) || \"Unknown error\"\n                }`,\n                {\n                    kind: Errors.Internal,\n                },\n            );\n            return;\n        }\n\n        const address = gateway.address();\n        if (address == null || typeof address === \"string\") {\n            logger.warn(`${name} may not have started properly: ${address}`);\n            return;\n        }\n\n        const host = address.address;\n        const port = address.port;\n        logger.info(`${name} running at http://${host}:${port}`);\n    });\n\n    /**\n     * We use keep-alive connections with other resources. These can prevent\n     * the gateway process from shutting down if they are open when we're\n     * trying to close. So, let's track them and provide a means for us to\\\n     * destroy them.\n     */\n    const connections: {\n        [key: string]: net$Socket | tls$TLSSocket,\n    } = {};\n    const closeConnections = () => {\n        for (const connection of Object.values(connections)) {\n            (connection: any).destroy();\n        }\n    };\n    gateway?.on(\"connection\", (connection) => {\n        const key = `${connection.remoteAddress}:${connection.remotePort}`;\n        connections[key] = connection;\n        connection.on(\"close\", () => {\n            delete connections[key];\n        });\n    });\n\n    /**\n     * When this server is being run (by direct invocation, or using a process\n     * manager, such as PM2), we may be asked to shutdown gracefully.\n     * We do this be listening for the SIGINT signal and then close the server.\n     * This prevents new connections from coming in and waits until the\n     * existing connections complete before the callback is fired.\n     * At which point we can safely shutdown the server.\n     *\n     * We hurry things along by actively closing any existing connections\n     * once the close has been requested.\n     *\n     * If we fail to respond then the process manager may try to forcefully\n     * shutdown the server after a timeout.\n     */\n    process.on(\"SIGINT\", () => {\n        if (!gateway) {\n            return;\n        }\n\n        logger.info(\"SIGINT received, shutting down server.\");\n\n        try {\n            gateway.close((err) => {\n                if (err) {\n                    logger.error(\n                        `Error shutting down server: ${\n                            (err && err.message) || \"Unknown Error\"\n                        }`,\n                        {\n                            kind: Errors.Internal,\n                        },\n                    );\n                    process.exit(1);\n                } else {\n                    process.exit(0);\n                }\n            });\n            closeConnections();\n        } catch (err) {\n            logger.error(\n                `Error closing gateway: ${\n                    (err && err.message) || \"Unknown Error\"\n                }`,\n                {\n                    kind: Errors.Internal,\n                },\n            );\n            process.exit(1);\n        }\n    });\n\n    /**\n     * NOTE(somewhatabstract): We have seen many 502 BAD GATEWAY errors in\n     * production Node services. It seems this is because the Node server\n     * is closing a connection before the load balancer is expecting it to.\n     * There is some indication on the Internet [1] that the issue can occur\n     * when Node's (or nginx [2]) keepalive is lower than the load balancer's\n     * keepalive. In addition, the recommended fix is to always have the load\n     * balancer close a connection by ensuring the Node server has a higher\n     * keepalive timeout value than the load balancer.\n     *\n     * Node's default is 5s, but the indication is that the Google load\n     * balancer value is 80s [3]. So, here we default to 90s, but we also\n     * provide a configuration value to change it as needed.\n     *\n     * In addition, it is suggested that the headers timeout should be higher\n     * than the keepalive timeout [1].\n     *\n     * [1] https://shuheikagawa.com/blog/2019/04/25/keep-alive-timeout/\n     * [2] https://blog.percy.io/tuning-nginx-behind-google-cloud-platform-http-s-load-balancer-305982ddb340\n     * [3] https://khanacademy.slack.com/archives/CJSE4TMQX/p1573252787333500\n     */\n    if (gateway != null) {\n        gateway.keepAliveTimeout = keepAliveTimeout || 90000;\n\n        /**\n         * The Flow type for a Node server does not include headersTimeout.\n         * However, if we don't do the following shenanigans, it puts an error\n         * on the appWithMiddleware.listen call above instead of here, and that\n         * just feels wrong. I tried a $FlowIgnore here, but that doesn't work,\n         * it has to be suppressed above in that case.\n         */\n        const trickFlow: any = gateway;\n        trickFlow.headersTimeout = gateway.keepAliveTimeout + 5000;\n    }\n\n    return gateway;\n}\n"],"mappings":"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"}