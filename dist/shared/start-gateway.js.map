{"version":3,"file":"start-gateway.js","names":["startGateway","options","app","logger","host","port","name","mode","keepAliveTimeout","process","env","GAE_SERVICE","setRootLogger","KA_ALLOW_HEAPDUMP","require","debug","pid","e","setupStackdriver","cloudOptions","appWithMiddleware","useAppEngineMiddleware","gateway","listen","err","error","message","kind","Errors","Internal","address","warn","info","connections","closeConnections","connection","Object","values","destroy","on","key","remoteAddress","remotePort","close","exit","trickFlow","headersTimeout"],"sources":["../../src/shared/start-gateway.js"],"sourcesContent":["// @flow\nimport type {$Application, $Request, $Response} from \"express\";\nimport {useAppEngineMiddleware} from \"./use-app-engine-middleware.js\";\nimport {setupStackdriver} from \"./setup-stackdriver.js\";\nimport {setRootLogger} from \"./root-logger.js\";\nimport type {GatewayOptions, RequestWithLog} from \"./types.js\";\nimport {Errors} from \"./errors.js\";\n\n/**\n * Start a gateway application server.\n *\n * This takes a server application definition and attaches middleware before\n * listening on the appropriate port per the passed options.\n */\nexport async function startGateway<\n    TReq: RequestWithLog<$Request>,\n    TRes: $Response,\n>(\n    options: GatewayOptions,\n    app: $Application<TReq, TRes>,\n): Promise<?http$Server> {\n    const {logger, host, port, name, mode, keepAliveTimeout} = options;\n\n    /**\n     * Make sure GAE_SERVICE has a value.\n     *\n     * If it isn't set at this point, we're not running in GAE, so we can\n     * set it ourselves.\n     */\n    if (process.env.GAE_SERVICE == null) {\n        process.env.GAE_SERVICE = name;\n    }\n\n    /**\n     * Setup logging.\n     * We create the root logger once and then share it via a singleton.\n     * This avoids us creating a new one in each worker, which was happening\n     * when we created the logger on import of `getLogger`.\n     */\n    setRootLogger(logger);\n\n    /**\n     * In development mode, we include the heapdump module if it exists.\n     * With this installed, `kill -USR2 <pid>` can be used to create a\n     * heapsnapshot file of the gateway's memory.\n     *\n     * We ignore this from coverage because we don't care enough to test it.\n     */\n    /* istanbul ignore next */\n    if (process.env.KA_ALLOW_HEAPDUMP || mode === \"development\") {\n        try {\n            /* eslint-disable import/no-unassigned-import */\n            // $FlowIgnore[cannot-resolve-module]\n            require(\"heapdump\");\n            /* eslint-enable import/no-unassigned-import */\n            logger.debug(\n                `Heapdumps enabled. To create a heap snapshot at any time, run \"kill -USR2 ${process.pid}\".`,\n            );\n        } catch (e) {\n            // heapdump is an optional peer dependency, so if it is absent,\n            // that is perfectly fine.\n        }\n    }\n\n    // Set up stackdriver integrations.\n    await setupStackdriver(mode, options.cloudOptions);\n\n    // Add GAE middleware.\n    const appWithMiddleware = await useAppEngineMiddleware<TReq, TRes>(\n        app,\n        mode,\n        logger,\n    );\n\n    /**\n     * Start the gateway listening.\n     *\n     * We need the variable so we can reference it inside the error handling\n     * callback. Feels a bit nasty, but it works.\n     */\n    const gateway = appWithMiddleware.listen(port, host, (err: ?Error) => {\n        if (gateway == null || err != null) {\n            logger.error(\n                `${name} appears not to have started: ${\n                    (err && err.message) || \"Unknown error\"\n                }`,\n                {\n                    kind: Errors.Internal,\n                },\n            );\n            return;\n        }\n\n        const address = gateway.address();\n        if (address == null || typeof address === \"string\") {\n            logger.warn(`${name} may not have started properly: ${address}`);\n            return;\n        }\n\n        const host = address.address;\n        const port = address.port;\n        logger.info(`${name} running at http://${host}:${port}`);\n    });\n\n    /**\n     * We use keep-alive connections with other resources. These can prevent\n     * the gateway process from shutting down if they are open when we're\n     * trying to close. So, let's track them and provide a means for us to\\\n     * destroy them.\n     */\n    const connections = {};\n    const closeConnections = () => {\n        for (const connection of Object.values(connections)) {\n            (connection: any).destroy();\n        }\n    };\n    gateway?.on(\"connection\", (connection) => {\n        const key = `${connection.remoteAddress}:${connection.remotePort}`;\n        connections[key] = connection;\n        connection.on(\"close\", () => {\n            delete connections[key];\n        });\n    });\n\n    /**\n     * When this server is being run (by direct invocation, or using a process\n     * manager, such as PM2), we may be asked to shutdown gracefully.\n     * We do this be listening for the SIGINT signal and then close the server.\n     * This prevents new connections from coming in and waits until the\n     * existing connections complete before the callback is fired.\n     * At which point we can safely shutdown the server.\n     *\n     * We hurry things along by actively closing any existing connections\n     * once the close has been requested.\n     *\n     * If we fail to respond then the process manager may try to forcefully\n     * shutdown the server after a timeout.\n     */\n    process.on(\"SIGINT\", () => {\n        if (!gateway) {\n            return;\n        }\n\n        logger.info(\"SIGINT received, shutting down server.\");\n\n        try {\n            gateway.close((err) => {\n                if (err) {\n                    logger.error(\n                        `Error shutting down server: ${\n                            (err && err.message) || \"Unknown Error\"\n                        }`,\n                        {\n                            kind: Errors.Internal,\n                        },\n                    );\n                    process.exit(1);\n                } else {\n                    process.exit(0);\n                }\n            });\n            closeConnections();\n        } catch (err) {\n            logger.error(\n                `Error closing gateway: ${\n                    (err && err.message) || \"Unknown Error\"\n                }`,\n                {\n                    kind: Errors.Internal,\n                },\n            );\n            process.exit(1);\n        }\n    });\n\n    /**\n     * NOTE(somewhatabstract): We have seen many 502 BAD GATEWAY errors in\n     * production Node services. It seems this is because the Node server\n     * is closing a connection before the load balancer is expecting it to.\n     * There is some indication on the Internet [1] that the issue can occur\n     * when Node's (or nginx [2]) keepalive is lower than the load balancer's\n     * keepalive. In addition, the recommended fix is to always have the load\n     * balancer close a connection by ensuring the Node server has a higher\n     * keepalive timeout value than the load balancer.\n     *\n     * Node's default is 5s, but the indication is that the Google load\n     * balancer value is 80s [3]. So, here we default to 90s, but we also\n     * provide a configuration value to change it as needed.\n     *\n     * In addition, it is suggested that the headers timeout should be higher\n     * than the keepalive timeout [1].\n     *\n     * [1] https://shuheikagawa.com/blog/2019/04/25/keep-alive-timeout/\n     * [2] https://blog.percy.io/tuning-nginx-behind-google-cloud-platform-http-s-load-balancer-305982ddb340\n     * [3] https://khanacademy.slack.com/archives/CJSE4TMQX/p1573252787333500\n     */\n    if (gateway != null) {\n        gateway.keepAliveTimeout = keepAliveTimeout || 90000;\n\n        /**\n         * The Flow type for a Node server does not include headersTimeout.\n         * However, if we don't do the following shenanigans, it puts an error\n         * on the appWithMiddleware.listen call above instead of here, and that\n         * just feels wrong. I tried a $FlowIgnore here, but that doesn't work,\n         * it has to be suppressed above in that case.\n         */\n        const trickFlow: any = gateway;\n        trickFlow.headersTimeout = gateway.keepAliveTimeout + 5000;\n    }\n\n    return gateway;\n}\n"],"mappings":"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"}