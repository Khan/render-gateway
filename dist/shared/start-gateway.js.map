{"version":3,"sources":["../../src/shared/start-gateway.js"],"names":["startGateway","options","app","logger","port","name","mode","appWithMiddleware","gateway","listen","err","error","message","address","warn","host","info"],"mappings":";;;;;;;AAEA;;AACA;;AAGA;;;;;;AAMO,eAAeA,YAAf,CAGLC,OAHK,EAGoBC,GAHpB,EAGkE;AACrE,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,IAAT;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA;AAArB,MAA6BL,OAAnC,CADqE,CAGrE;;AACA,QAAM,wCAAiBK,IAAjB,CAAN,CAJqE,CAMrE;;AACA,QAAMC,iBAAiB,GAAG,MAAM,oDAC5BL,GAD4B,EAE5BI,IAF4B,EAG5BH,MAH4B,CAAhC;AAMA;;;;;;;AAMA,QAAMK,OAAO,GAAGD,iBAAiB,CAACE,MAAlB,CAAyBL,IAAzB,EAAgCM,GAAD,IAAiB;AAC5D,QAAIF,OAAO,IAAI,IAAX,IAAmBE,GAAG,IAAI,IAA9B,EAAoC;AAChCP,MAAAA,MAAM,CAACQ,KAAP,CACK,GAAEN,IAAK,iCAAiCK,GAAG,IAAIA,GAAG,CAACE,OAAZ,IACpC,eAAgB,EAFxB;AAIA;AACH;;AAED,UAAMC,OAAO,GAAGL,OAAO,CAACK,OAAR,EAAhB;;AACA,QAAIA,OAAO,IAAI,IAAX,IAAmB,OAAOA,OAAP,KAAmB,QAA1C,EAAoD;AAChDV,MAAAA,MAAM,CAACW,IAAP,CAAa,GAAET,IAAK,mCAAkCQ,OAAQ,EAA9D;AACA;AACH;;AAED,UAAME,IAAI,GAAGF,OAAO,CAACA,OAArB;AACA,UAAMT,IAAI,GAAGS,OAAO,CAACT,IAArB;AACAD,IAAAA,MAAM,CAACa,IAAP,CAAa,GAAEX,IAAK,sBAAqBU,IAAK,IAAGX,IAAK,EAAtD;AACH,GAlBe,CAAhB;AAmBH","sourcesContent":["// @flow\nimport type {$Application, $Request, $Response} from \"express\";\nimport {useAppEngineMiddleware} from \"./use-app-engine-middleware.js\";\nimport {setupStackdriver} from \"./setup-stackdriver.js\";\nimport type {GatewayOptions, RequestWithLog} from \"./types.js\";\n\n/**\n * Start a gateway application server.\n *\n * This takes a server application definition and attaches middleware before\n * listening on the appropriate port per the passed options.\n */\nexport async function startGateway<\n    TReq: RequestWithLog<$Request>,\n    TRes: $Response,\n>(options: GatewayOptions, app: $Application<TReq, TRes>): Promise<void> {\n    const {logger, port, name, mode} = options;\n\n    // Set up stackdriver integrations.\n    await setupStackdriver(mode);\n\n    // Add GAE middleware.\n    const appWithMiddleware = await useAppEngineMiddleware<TReq, TRes>(\n        app,\n        mode,\n        logger,\n    );\n\n    /**\n     * Start the gateway listening.\n     *\n     * We need the variable so we can reference it inside the error handling\n     * callback. Feels a bit nasty, but it works.\n     */\n    const gateway = appWithMiddleware.listen(port, (err: ?Error) => {\n        if (gateway == null || err != null) {\n            logger.error(\n                `${name} appears not to have started: ${(err && err.message) ||\n                    \"Unknown error\"}`,\n            );\n            return;\n        }\n\n        const address = gateway.address();\n        if (address == null || typeof address === \"string\") {\n            logger.warn(`${name} may not have started properly: ${address}`);\n            return;\n        }\n\n        const host = address.address;\n        const port = address.port;\n        logger.info(`${name} running at http://${host}:${port}`);\n    });\n}\n"],"file":"start-gateway.js"}