{"version":3,"file":"make-request-middleware.js","names":["lw","_interopRequireWildcard","require","_expressWinston","_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","makeRequestMiddleware","mode","logger","express","makeMiddleware","Promise","resolve","expressWinston","level","winstonInstance","expressFormat","colorize","meta","exports"],"sources":["../../../src/shared/middleware/make-request-middleware.js"],"sourcesContent":["// @flow\nimport * as lw from \"@google-cloud/logging-winston\";\nimport expressWinston from \"express-winston\";\n\nimport type {Middleware, $Request, $Response} from \"express\";\nimport type {Logger, Runtime} from \"../types.js\";\n\n/**\n * Create middleware for tracking requests.\n */\nexport const makeRequestMiddleware = <TReq: $Request, TRes: $Response>(\n    mode: Runtime,\n    logger: Logger,\n): Promise<Middleware<TReq, TRes>> => {\n    if (mode === \"production\") {\n        /**\n         * In production, we're using the Google logging-winston middleware.\n         * This adds the log property to the request, allowing us to associate\n         * log entries with a request trace, if the request is being traced.\n         */\n        return lw.express.makeMiddleware(logger);\n    }\n\n    /**\n     * In all other cases, we use express-winston to log requests for us.\n     */\n    return Promise.resolve(\n        expressWinston.logger({\n            /**\n             * Specify the level that this logger logs at.\n             * (use a function to dynamically change level based on req and res)\n             *     `function(req, res) { return String; }`\n             */\n            level: \"info\",\n\n            /**\n             * Use the logger we already set up.\n             */\n            winstonInstance: logger,\n            expressFormat: true,\n            colorize: true,\n            meta: false,\n        }),\n    );\n};\n"],"mappings":";;;;;;AACA,IAAAA,EAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,eAAA,GAAAC,sBAAA,CAAAF,OAAA;AAA6C,SAAAE,uBAAAC,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAAA,SAAAG,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,CAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAR,wBAAAI,GAAA,EAAAI,WAAA,SAAAA,WAAA,IAAAJ,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,oBAAAA,GAAA,wBAAAA,GAAA,4BAAAE,OAAA,EAAAF,GAAA,UAAAQ,KAAA,GAAAL,wBAAA,CAAAC,WAAA,OAAAI,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAT,GAAA,YAAAQ,KAAA,CAAAE,GAAA,CAAAV,GAAA,SAAAW,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAhB,GAAA,QAAAgB,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAnB,GAAA,EAAAgB,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAf,GAAA,EAAAgB,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAhB,GAAA,CAAAgB,GAAA,SAAAL,MAAA,CAAAT,OAAA,GAAAF,GAAA,MAAAQ,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAArB,GAAA,EAAAW,MAAA,YAAAA,MAAA;AAK7C;AACA;AACA;AACO,MAAMW,qBAAqB,GAAGA,CACjCC,IAAa,EACbC,MAAc,KACoB;EAClC,IAAID,IAAI,KAAK,YAAY,EAAE;IACvB;AACR;AACA;AACA;AACA;IACQ,OAAO5B,EAAE,CAAC8B,OAAO,CAACC,cAAc,CAACF,MAAM,CAAC;EAC5C;;EAEA;AACJ;AACA;EACI,OAAOG,OAAO,CAACC,OAAO,CAClBC,uBAAc,CAACL,MAAM,CAAC;IAClB;AACZ;AACA;AACA;AACA;IACYM,KAAK,EAAE,MAAM;IAEb;AACZ;AACA;IACYC,eAAe,EAAEP,MAAM;IACvBQ,aAAa,EAAE,IAAI;IACnBC,QAAQ,EAAE,IAAI;IACdC,IAAI,EAAE;EACV,CAAC,CAAC,CACL;AACL,CAAC;AAACC,OAAA,CAAAb,qBAAA,GAAAA,qBAAA"}