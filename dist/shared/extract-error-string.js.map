{"version":3,"sources":["../../src/shared/extract-error-string.js"],"names":["extractErrorString","error","response","stack","toString"],"mappings":";;;;;;;AAGA;;;;;;;;;;AAUO,SAASA,kBAAT,CAA4BC,KAA5B,EAA2D;AAC9D,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,WAAOA,KAAP;AACH;;AAED,MAAIA,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeD,KAArC,EAA4C;AACxC,WAAQ,GAAEA,KAAK,CAACC,QAAN,CAAeD,KAAM,KAAIA,KAAK,CAACE,KAAN,IAAe,EAAG,EAArD;AACH;;AAED,MAAIF,KAAK,CAACA,KAAN,IAAeA,KAAK,KAAKA,KAAK,CAACA,KAAnC,EAA0C;AACtC,WAAOD,kBAAkB,CAACC,KAAK,CAACA,KAAP,CAAzB;AACH;;AAED,MAAIA,KAAK,CAACE,KAAV,EAAiB;AACb,WAAOF,KAAK,CAACE,KAAb;AACH;;AAED,SAAOF,KAAK,CAACG,QAAN,EAAP;AACH","sourcesContent":["// @flow\nimport type {AmbiguousError} from \"./types.js\";\n\n/**\n * Extract an error string from an ambiguous error.\n *\n * This takes an ambiguous error representation and attempts to turn it into\n * a string for logging. If a string is passed, that string is returned.\n * This function can be recursive.\n *\n * @param {mixed} error An object or string that represents an error.\n * @returns {string} A string representing the error.\n */\nexport function extractErrorString(error: AmbiguousError): string {\n    if (typeof error === \"string\") {\n        return error;\n    }\n\n    if (error.response && error.response.error) {\n        return `${error.response.error}: ${error.stack || \"\"}`;\n    }\n\n    if (error.error && error !== error.error) {\n        return extractErrorString(error.error);\n    }\n\n    if (error.stack) {\n        return error.stack;\n    }\n\n    return error.toString();\n}\n"],"file":"extract-error-string.js"}