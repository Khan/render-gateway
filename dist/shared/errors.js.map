{"version":3,"sources":["../../src/shared/errors.js"],"names":["Errors","Object","freeze","NotFound","InvalidInput","NotAllowed","Unauthorized","Internal","NotImplemented","TransientService","Service"],"mappings":";;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;;;;AAMO,MAAMA,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc;AAChCC,EAAAA,QAAQ,EAAE,UADsB;AAEhCC,EAAAA,YAAY,EAAE,cAFkB;AAGhCC,EAAAA,UAAU,EAAE,YAHoB;AAIhCC,EAAAA,YAAY,EAAE,cAJkB;AAKhCC,EAAAA,QAAQ,EAAE,UALsB;AAMhCC,EAAAA,cAAc,EAAE,gBANgB;AAOhCC,EAAAA,gBAAgB,EAAE,kBAPc;AAQhCC,EAAAA,OAAO,EAAE;AARuB,CAAd,CAAf","sourcesContent":["// @flow\n\n/**\n * @typedef {Object} Errors The different errors in our error taxononomy.\n *\n * @property {ErrorKind} NotFound A resource was not found. If the resource\n * couldn't be retrieved due to access control use {@link Unauthorized}\n * instead. If the resource couldn't be found because the input was invalid use\n * {@link InvalidInput} instead.\n *\n * @property {ErrorKind} InvalidInput There was a problem with provided input,\n * such as the wrong format. This indicates inputs that are problematic\n * regardless of the state of the system. If the input was valid but caused\n * problems anyway consider {@link NotAllowed}.\n *\n * @property {ErrorKind} NotAllowed There was a problem due to the state of the\n * system not matching the requested operation or input. For example, trying to\n * create a username that is valid, but is already taken by another user. Use\n * {@link InvalidInput} instead when the input isn't valid regardless of\n * the state of the system. Use {@link NotFound} when the failure is due\n * to not being able to find a resource.\n *\n * @property {ErrorKind} Unauthorized There was an access control problem\n *\n * @property {ErrorKind} Internal The function failed for a reason unrelated\n * to invalid input or problems working with a remote system. This is the most\n * commonly used error kind.\n *\n * @property {ErrorKind} NotImplemented The function isn't implemented\n *\n * @property {ErrorKind} TransientService There was a problem when making a\n * request to a non-Khan service, e.g. datastore that might be resolvable by\n * retrying.\n *\n * @property {ErrorKind} Service There was a non-transient problem when making\n * a request to a non-Khan service, e.g. datastore.\n */\n\n/**\n * @type {Errors} A utility for referencing our error taxonomy.\n *\n * See https://khanacademy.atlassian.net/wiki/spaces/ENG/pages/150208513/Goliath+Errors+Best+Practices#Error-Kinds\n * for details of the error taxonomy definitions.\n */\nexport const Errors = Object.freeze({\n    NotFound: \"NotFound\",\n    InvalidInput: \"InvalidInput\",\n    NotAllowed: \"NotAllowed\",\n    Unauthorized: \"Unauthorized\",\n    Internal: \"Internal\",\n    NotImplemented: \"NotImplemented\",\n    TransientService: \"TransientService\",\n    Service: \"Service\",\n});\n"],"file":"errors.js"}