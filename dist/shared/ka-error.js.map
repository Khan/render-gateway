{"version":3,"file":"ka-error.js","names":["KAError","Error","constructor","message","kind","sourceError","name"],"sources":["../../src/shared/ka-error.js"],"sourcesContent":["// @flow\nimport {extractError} from \"./extract-error.js\";\nimport type {ErrorKind, SimplifiedError} from \"./types.js\";\n\n/**\n * Error to be thrown and logged within KA code.\n *\n * This custom error supports error taxonomy.\n */\nexport default class KAError<TKind: ErrorKind> extends Error {\n    kind: TKind;\n    sourceError: ?SimplifiedError;\n\n    /**\n     * Construct a KAError instance.\n     *\n     * @param {string} message The error message.\n     * @param {TKind} kind The kind of error.\n     * @param {Error} [sourceError] The original error that spawned this one.\n     */\n    constructor(message: string, kind: TKind, sourceError: ?Error = null) {\n        super(message);\n\n        // Set the name so we get a nice error output, like\n        // KAInternalError\n        this.name = `KA${kind}Error`;\n\n        // The kind of error which could be used for categorization with\n        // other error sources that use the same error taxonomy.\n        this.kind = kind;\n\n        // If there is a source error that we're wrapping, we also want to\n        // unpack that and attach it for additional diagnostics.\n        if (sourceError != null) {\n            this.sourceError = extractError(sourceError);\n        }\n    }\n}\n"],"mappings":";;;;;;;AACA;;;;AAGA;AACA;AACA;AACA;AACA;AACe,MAAMA,OAAN,SAAwCC,KAAxC,CAA8C;EAIzD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,OAAD,EAAkBC,IAAlB,EAA+BC,WAAmB,GAAG,IAArD,EAA2D;IAClE,MAAMF,OAAN,EADkE,CAGlE;IACA;;IAJkE;;IAAA;;IAKlE,KAAKG,IAAL,GAAa,KAAIF,IAAK,OAAtB,CALkE,CAOlE;IACA;;IACA,KAAKA,IAAL,GAAYA,IAAZ,CATkE,CAWlE;IACA;;IACA,IAAIC,WAAW,IAAI,IAAnB,EAAyB;MACrB,KAAKA,WAAL,GAAmB,gCAAaA,WAAb,CAAnB;IACH;EACJ;;AA3BwD"}