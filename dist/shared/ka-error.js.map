{"version":3,"sources":["../../src/shared/ka-error.js"],"names":["KAError","Error","constructor","message","kind","sourceError","name"],"mappings":";;;;;;;AACA;;;;AAGA;;;;;AAKe,MAAMA,OAAN,SAAwCC,KAAxC,CAA8C;AAIzD;;;;;;;AAOAC,EAAAA,WAAW,CAACC,OAAD,EAAkBC,IAAlB,EAA+BC,WAAmB,GAAG,IAArD,EAA2D;AAClE,UAAMF,OAAN;;AADkE;;AAAA;;AAElE,SAAKG,IAAL,GAAa,KAAIF,IAAK,OAAtB;AACA,SAAKA,IAAL,GAAYA,IAAZ;;AAEA,QAAIC,WAAW,IAAI,IAAnB,EAAyB;AACrB,WAAKA,WAAL,GAAmB,gCAAaA,WAAb,CAAnB;AACH;AACJ;;AAnBwD","sourcesContent":["// @flow\nimport {extractError} from \"./extract-error.js\";\nimport type {ErrorKind, SimplifiedError} from \"./types.js\";\n\n/**\n * Error to be thrown and logged within KA code.\n *\n * This custom error supports error taxonomy.\n */\nexport default class KAError<TKind: ErrorKind> extends Error {\n    kind: TKind;\n    sourceError: ?SimplifiedError;\n\n    /**\n     * Construct KAError instance.\n     *\n     * @param {string} message The error message.\n     * @param {TKind} kind The kind of KA error.\n     * @param {Error} [sourceError] The original error that spawned this one.\n     */\n    constructor(message: string, kind: TKind, sourceError: ?Error = null) {\n        super(message);\n        this.name = `KA${kind}Error`;\n        this.kind = kind;\n\n        if (sourceError != null) {\n            this.sourceError = extractError(sourceError);\n        }\n    }\n}\n"],"file":"ka-error.js"}