{"version":3,"file":"types.js","names":[],"sources":["../../src/shared/types.js"],"sourcesContent":["// @flow\n\nimport type {\n    NpmLogLevels,\n    Logger as WinstonLogger,\n    Info as WinstonInfo,\n} from \"winston\";\n\nimport type {$Request} from \"express\";\nimport typeof {Errors} from \"./errors.js\";\n\n/**\n * What kind of error is being reported.\n *\n * This type represents our error taxonomy:\n *  - https://khanacademy.atlassian.net/wiki/spaces/ENG/pages/150208513/Goliath+Errors+Best+Practices\n */\nexport type ErrorKind = $Values<Errors>;\n\n/**\n * Describes logging metdata.\n */\nexport type Info = WinstonInfo<NpmLogLevels>;\n\n/**\n * Defines the different log levels.\n */\nexport type LogLevel = $Keys<NpmLogLevels>;\n\n/**\n * Describes the interface for logging gateway activity.\n */\nexport type Logger = WinstonLogger<NpmLogLevels>;\n\nexport type CloudOptions = {\n    +profiler?: boolean,\n};\n\n/**\n * Information about a gateway.\n */\nexport type GatewayInfo = {\n    /**\n     * Usually the value of GAE_SERVICE, if set. Otherwise, \"unknown\".\n     */\n    +name: string,\n\n    /**\n     * Usually the value of GAE_VERSION, if set. Otherwise, \"unknown\".\n     */\n    +version: string,\n\n    /**\n     * Usually the value of GAE_INSTANCE, if set. Otherwise, \"unknown\".\n     */\n    +instance: string,\n\n    /**\n     * The process identifier.\n     */\n    +pid: number,\n};\n\n/**\n * Represents an error and associated stack.\n */\nexport type SimplifiedError = {\n    /**\n     * A string representing the error that occurred.\n     * In some circumstances, this will match the stack property.\n     */\n    +error: ?string,\n\n    /**\n     * The error's stack, if it has one.\n     */\n    +stack?: string,\n\n    /**\n     * Additional properties that the source error had.\n     */\n    +props?: {\n        +[key: string]: string | number | boolean,\n        ...\n    },\n};\n\n/**\n * Represents an error when we don't really know how it is structured.\n *\n * Use extractError to turn this into a SimplifiedError representation.\n */\nexport type AmbiguousError =\n    | SimplifiedError\n    | string\n    | {\n          error?: AmbiguousError,\n          response?: {\n              error?: string,\n          },\n          stack?: string,\n          message?: string,\n          name?: string,\n          ...\n      }\n    | Error;\n\n/**\n * Information to attach to a trace session.\n */\nexport type TraceSessionInfo = {\n    /**\n     * The level at which to log the session.\n     */\n    +level?: LogLevel,\n\n    /**\n     * Additional metadata about the session. Unlike using `addLabel` on the\n     * trace session, this will only go to logging and not the trace as well.\n     */\n    +[datum: string]: mixed,\n    ...\n};\n\n/**\n * A trace session that has been started.\n */\nexport interface ITraceSession {\n    /**\n     * The name of the action being traced as provided when it was started.\n     */\n    get action(): string;\n\n    /**\n     * Add a label to the trace session.\n     *\n     * Adds a key-value pair as a label to the trace span and metadata to the\n     * logged output. Both the name and value may be truncated in the trace\n     * according to hosting configuration. The value will be coerced to a\n     * string in tracing if it isn't one already.\n     */\n    addLabel<T>(name: string, value: T): void;\n\n    /**\n     * End the trace session.\n     *\n     * It the session were opened with a Google Cloud tracer, this will also\n     * end the associated tracer span.\n     *\n     * @param {TraceSessionInfo} [info] Additional information to\n     * modify the logged session info. This can be used to provide a different\n     * level at which to log the session (default is \"debug\"). All other\n     * fields are used to add metadata to the logged session.\n     * @returns {void}\n     */\n    end(info?: TraceSessionInfo): void;\n}\n\n/**\n * The runtime modes that a gateway can run under.\n */\nexport type Runtime = \"production\" | \"test\" | \"development\";\n\n/**\n * Options to configure a gateway.\n */\nexport type GatewayOptions = {\n    /**\n     * Specify which cloud facilities we want.\n     */\n    +cloudOptions?: CloudOptions,\n\n    /**\n     * The name of the gateway.\n     *\n     * If GAE_SERVICE is not set when the gateway is started, it will be set\n     * to this value.\n     */\n    +name: string,\n\n    /**\n     * The port on which the gateway should listen.\n     */\n    +port: number,\n\n    /**\n     * The hostname to which the gateway should bind.\n     */\n    +host: string,\n\n    /**\n     * The logger to use for logging.\n     */\n    +logger: Logger,\n\n    /**\n     * What runtime mode the gateway is running under.\n     */\n    +mode: Runtime,\n\n    /**\n     * Optional value in milliseconds for keepalive timeout of the server.\n     * For running in Google Cloud, this should be higher than the load\n     * balancer's own keepalive timeout value, which at time of writing was\n     * indicated to be 80000ms [1].\n     *\n     * [1] https://khanacademy.slack.com/archives/CJSE4TMQX/p1573252787333500\n     *\n     * Defaults to 90000.\n     */\n    +keepAliveTimeout?: number,\n};\n\nexport type RequestWithLog<TReq: $Request> = TReq & {\n    log?: Logger,\n};\n\n/**\n * A thing that can be closed.\n */\nexport interface ICloseable {\n    /**\n     * Close the closeable.\n     */\n    +close?: () => ?Promise<void>;\n}\n"],"mappings":""}