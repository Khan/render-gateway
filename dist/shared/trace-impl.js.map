{"version":3,"sources":["../../src/shared/trace-impl.js"],"names":["traceImpl","logger","action","message","tracer","KAError","Errors","Internal","logMessage","silly","profiler","startTimer","beforeMemory","process","memoryUsage","name","gatewayName","span","createChildSpan","profileLabels","addLabel","value","end","info","afterMemory","metadata","level","done","endSpan"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;AAwBO,MAAMA,SAAS,GAAG,CACrBC,MADqB,EAErBC,MAFqB,EAGrBC,OAHqB,EAIrBC,MAJqB,KAKL;AAChB,MAAI,CAACF,MAAL,EAAa;AACT,UAAM,IAAIG,gBAAJ,CACF,+CADE,EAEFC,eAAOC,QAFL,CAAN;AAIH;;AACD,QAAMC,UAAU,GAAI,GAAEN,MAAO,GAAEC,OAAO,GAAI,KAAIA,OAAQ,EAAhB,GAAoB,EAAG,EAA7D;AAEA;;;;;;;;;;;;AAWAF,EAAAA,MAAM,CAACQ,KAAP,CAAc,SAAQD,UAAW,EAAjC;AAEA;;;;AAGA,QAAME,QAAQ,GAAGT,MAAM,CAACU,UAAP,EAAjB;AACA,QAAMC,YAAY,GAAGC,OAAO,CAACC,WAAR,EAArB;AACA,QAAM;AAACC,IAAAA,IAAI,EAAEC;AAAP,MAAsB,qCAA5B;AAEA;;;;;;;;;AAQA,QAAMC,IAAI,GAAGb,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEc,eAAR,CAAwB;AAACH,IAAAA,IAAI,EAAG,GAAEC,WAAY,IAAGd,MAAO;AAAhC,GAAxB,CAAb;AAEA,QAAMiB,aAAa,GAAG,EAAtB;;AACA,QAAMC,QAAQ,GAAG,CAAIL,IAAJ,EAAkBM,KAAlB,KAAqC;AAClD;;;AAGAF,IAAAA,aAAa,CAACJ,IAAD,CAAb,GAAsBM,KAAtB;AAEA;;;;;;;AAMAJ,IAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEG,QAAN,CAAeL,IAAf,EAAqBM,KAArB;AACH,GAbD;AAeA;;;;;;AAIA,QAAMC,GAAG,GAAIC,IAAD,IAAmC;AAC3C,UAAMC,WAAW,GAAGX,OAAO,CAACC,WAAR,EAApB;AAEA;;;;AAGAM,IAAAA,QAAQ,CAAC,eAAD,EAAkB,wBAASR,YAAT,EAAuBY,WAAvB,CAAlB,CAAR;AACAJ,IAAAA,QAAQ,CAAC,eAAD,EAAkBI,WAAlB,CAAR;AAEA;;;;;;AAKA,UAAMC,QAAQ,+DASP,uCATO,GAUPN,aAVO,GAWPI,IAXO;AAYVpB,MAAAA,OAAO,EAAG,UAASK,UAAW,EAZpB;AAaVkB,MAAAA,KAAK,EAAE,CAAAH,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEG,KAAN,KAAe;AAbZ,MAAd;AAgBA;;;;;;;;AAMAhB,IAAAA,QAAQ,CAACiB,IAAT,CAAcF,QAAd;AAEA;;;;;;;AAMAR,IAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEW,OAAN;AACH,GA7CD;;AA+CA,SAAO;AACH,QAAI1B,MAAJ,GAAa;AACT,aAAOA,MAAP;AACH,KAHE;;AAIHkB,IAAAA,QAJG;AAKHE,IAAAA;AALG,GAAP;AAOH,CAtHM","sourcesContent":["// @flow\nimport type {Tracer} from \"@google-cloud/trace-agent\";\nimport {getGatewayInfo} from \"./get-gateway-info.js\";\nimport {getDelta} from \"./get-delta.js\";\nimport {getDefaultMetadata} from \"./create-logger.js\";\nimport KAError from \"./ka-error.js\";\nimport {Errors} from \"./errors.js\";\nimport type {Logger, ITraceSession, TraceSessionInfo} from \"./types.js\";\n\n/**\n * Start tracing an event.\n *\n * This will log the start of a trace and open a trace session, which is\n * returned. Use the returned session to end the trace when the traced event is\n * over. The traced event will be logged and also written to the Google Cloud\n * StackDriver Trace agent.\n *\n * Trace logs include metadata about the trace such as duration and memory\n * usage.\n *\n * @param {Logger} logger A logger to use for documention and timing the\n * traced action.\n * @param {string} action The name of the traced action. Keep it short. This\n * should be the name of an action rather than a specific URL, for example. Use\n * addLabel on the returned session or the session info when ending the session\n * to add additional details about the trace.\n * @param {string} message A message that will be logged. This is not included\n * in the traces.\n * @param {Tracer} [tracer] A Google Cloud trace agent tracer which\n * can be used to record the traced action.\n * @returns {ITraceSession} A trace session that the caller should use to\n * indicate when the session is finished.\n */\nexport const traceImpl = (\n    logger: Logger,\n    action: string,\n    message: string,\n    tracer?: Tracer,\n): ITraceSession => {\n    if (!action) {\n        throw new KAError(\n            \"Must provide an action for the trace session.\",\n            Errors.Internal,\n        );\n    }\n    const logMessage = `${action}${message ? `: ${message}` : \"\"}`;\n\n    /**\n     * We are going to use the logger's profiling API (provided by winston).\n     * However, we want to mark the start of the trace as it gives us some\n     * debug information which can be valuable when investigating operations.\n     *\n     * Winston only logs when profiling is done and the optional trace agent\n     * tracer will only show the span if it is ended.\n     *\n     * Since this is noise in most situations, we will log this at the lowest\n     * level of silly.\n     */\n    logger.silly(`TRACE ${logMessage}`);\n\n    /**\n     * Now we start the profiling timer.\n     */\n    const profiler = logger.startTimer();\n    const beforeMemory = process.memoryUsage();\n    const {name: gatewayName} = getGatewayInfo();\n\n    /**\n     * Next, if we were given a tracer, we start a trace section for this so\n     * trace session so that it will appear in Stackdriver Trace.\n     *\n     * We annotate the span with the gateway name so that it is clear in the\n     * trace which spans were created by this API and which were inserted by\n     * other means.\n     */\n    const span = tracer?.createChildSpan({name: `${gatewayName}.${action}`});\n\n    const profileLabels = {};\n    const addLabel = <T>(name: string, value: T): void => {\n        /**\n         * Track this so we can also include it in our logging info.\n         */\n        profileLabels[name] = value;\n\n        /**\n         * Send this label on to the trace span.\n         *\n         * We disable this lint rule as the linter does not appear to\n         * understand the optional chaining.\n         */\n        span?.addLabel(name, value);\n    };\n\n    /**\n     * This is the function that we will return to our caller.\n     * It can then be used to end and record the trace session.\n     */\n    const end = (info?: TraceSessionInfo): void => {\n        const afterMemory = process.memoryUsage();\n\n        /**\n         * Add some session information to the span as labels.\n         */\n        addLabel(\"/memory/delta\", getDelta(beforeMemory, afterMemory));\n        addLabel(\"/memory/final\", afterMemory);\n\n        /**\n         * We need to build the metadata that we will be logging.\n         * This is a combination of the given info, some custom things we add,\n         * and any profile labels that were added.\n         */\n        const metadata = {\n            /**\n             * We have to add the default metadata because winston does not\n             * include this for profiler.done calls, strangely.\n             *\n             * And we have to recreate it because we might be in a worker\n             * that doesn't have access directly to the root logger that has\n             * the default data.\n             */\n            ...getDefaultMetadata(),\n            ...profileLabels,\n            ...info,\n            message: `TRACED ${logMessage}`,\n            level: info?.level || \"debug\",\n        };\n\n        /**\n         * Let's mark our profile as done.\n         *\n         * We include the session info object, but make sure to set the level\n         * and message ourselves.\n         */\n        profiler.done(metadata);\n\n        /**\n         * If we started a tracer span, let's end it.\n         *\n         * We disable this lint rule as the linter does not appear to\n         * understand the optional chaining.\n         */\n        span?.endSpan();\n    };\n\n    return {\n        get action() {\n            return action;\n        },\n        addLabel,\n        end,\n    };\n};\n"],"file":"trace-impl.js"}