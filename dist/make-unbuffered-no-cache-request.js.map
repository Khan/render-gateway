{"version":3,"file":"make-unbuffered-no-cache-request.js","names":["_superagent","_interopRequireDefault","require","_wonderStuffServer","_makeShouldRetry","obj","__esModule","default","makeUnbufferedNoCacheRequest","options","logger","url","name","version","getAppEngineInfo","superagent","get","agent","retry","retries","makeShouldRetry","shouldRetry","set","timeout","exports"],"sources":["../src/make-unbuffered-no-cache-request.js"],"sourcesContent":["// @flow\nimport superagent from \"superagent\";\nimport type {Request} from \"superagent\";\nimport {getAppEngineInfo} from \"@khanacademy/wonder-stuff-server\";\nimport type {Logger} from \"@khanacademy/wonder-stuff-server\";\nimport type {RequestOptions} from \"./types.js\";\nimport {makeShouldRetry} from \"./make-should-retry.js\";\n\n/**\n * Make a request for a given URL without buffering or caching.\n *\n * This is not intended for direct use. Use makeRequest.\n *\n * @param {RenderGatewayOptions} options The options used to start the gateway.\n * @param {Logger} logger The logger to use.\n * @param {string} url The URL to be requested.\n * @returns {SuperAgentRequest} A superagent request for the URL.\n */\nexport const makeUnbufferedNoCacheRequest = (\n    options: RequestOptions,\n    logger: Logger,\n    url: string,\n): Request => {\n    const {name, version} = getAppEngineInfo();\n    return (\n        superagent\n            .get(url)\n            .agent(options.agent)\n            /**\n             * Configure retries since superagent can handle this for us.\n             * We give it a callback so we can log the retry and, if we so choose\n             * in the future, decide whether we should allow any more. This would\n             * allow us to short circuit the retry count (the max retries still\n             * takes precedence over our callback response, so we can't retry\n             * forever).\n             */\n            .retry(\n                options.retries,\n                makeShouldRetry(logger, options.shouldRetry),\n            )\n            /**\n             * We add a user agent header so that we can easily identify our\n             * requests in logs.\n             *\n             * The header has a form like:\n             *     SERVICE_NAME_HERE (VERSION_STRING_HERE)\n             */\n            .set(\"User-Agent\", `${name} (${version})`)\n            .timeout(options.timeout)\n    );\n};\n"],"mappings":";;;;;;AACA,IAAAA,WAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,kBAAA,GAAAD,OAAA;AAGA,IAAAE,gBAAA,GAAAF,OAAA;AAAuD,SAAAD,uBAAAI,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMG,4BAA4B,GAAGA,CACxCC,OAAuB,EACvBC,MAAc,EACdC,GAAW,KACD;EACV,MAAM;IAACC,IAAI;IAAEC;EAAO,CAAC,GAAG,IAAAC,mCAAgB,GAAE;EAC1C,OACIC,mBAAU,CACLC,GAAG,CAACL,GAAG,CAAC,CACRM,KAAK,CAACR,OAAO,CAACQ,KAAK;EACpB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,KAPY,CAQCC,KAAK,CACFT,OAAO,CAACU,OAAO,EACf,IAAAC,gCAAe,EAACV,MAAM,EAAED,OAAO,CAACY,WAAW,CAAC;EAEhD;AACZ;AACA;AACA;AACA;AACA;AACA,KANY,CAOCC,GAAG,CAAC,YAAY,EAAG,GAAEV,IAAK,KAAIC,OAAQ,GAAE,CAAC,CACzCU,OAAO,CAACd,OAAO,CAACc,OAAO,CAAC;AAErC,CAAC;AAACC,OAAA,CAAAhB,4BAAA,GAAAA,4BAAA"}