{"version":3,"sources":["../src/make-unbuffered-no-cache-request.js"],"names":["makeUnbufferedNoCacheRequest","options","url","logger","name","gatewayName","requests","requestOptions","agent","keepAlive","superagent","get","retry","retries","shouldRetry","set","process","env","GAE_VERSION","timeout"],"mappings":";;;;;;;AACA;;AAEA;;AAEA;;;;AAGA;;;;;;;;;;AAUO,MAAMA,4BAA4B,GAAG,CACxCC,OADwC,EAExCC,GAFwC,EAGxCC,MAHwC,KAIpB;AACpB,QAAM;AAACC,IAAAA,IAAI,EAAEC,WAAP;AAAoBC,IAAAA,QAAQ,EAAEC;AAA9B,MAAgDN,OAAtD,CADoB,CAGpB;;AACA,QAAMO,KAAK,GAAG,0BAAUD,cAAV,aAAUA,cAAV,uBAAUA,cAAc,CAAEE,SAA1B,CAAd,CAJoB,CAMpB;;AACA,SACIC,oBACKF,KADL,CACWA,KADX,EAEKG,GAFL,CAEST,GAFT;AAGI;;;;;;;;AAHJ,GAWKU,KAXL,CAYQ,CAAAL,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAEM,OAAhB,KAA2B,CAZnC,EAaQ,sCAAgBV,MAAhB,EAAwBI,cAAxB,aAAwBA,cAAxB,uBAAwBA,cAAc,CAAEO,WAAxC,CAbR;AAeI;;;;;;;AAfJ,GAsBKC,GAtBL,CAuBQ,YAvBR,EAwBS,GAAEV,WAAY,KAAIW,OAAO,CAACC,GAAR,CAAYC,WAAZ,IAA2B,SAAU,GAxBhE;AA0BI;;;;AA1BJ,GA8BKC,OA9BL,CA8Ba,CAAAZ,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAEY,OAAhB,KAA2B,KA9BxC,CADJ;AAiCH,CA5CM","sourcesContent":["// @flow\nimport superagent from \"superagent\";\nimport type {SuperAgentRequest} from \"superagent\";\nimport {makeAgent} from \"./make-agent.js\";\nimport type {RenderGatewayOptions} from \"./types.js\";\nimport {makeShouldRetry} from \"./make-should-retry.js\";\nimport type {Logger} from \"./shared/index.js\";\n\n/**\n * Make a request for a given URL without buffering or caching.\n *\n * This is not intended for direct use. Use makeRequest.\n *\n * @param {RenderGatewayOptions} options The options used to start the gateway.\n * @param {string} url The URL to be requested.\n * @param {Logger} logger The logger to use.\n * @returns {SuperAgentRequest} A superagent request for the URL.\n */\nexport const makeUnbufferedNoCacheRequest = (\n    options: RenderGatewayOptions,\n    url: string,\n    logger: Logger,\n): SuperAgentRequest => {\n    const {name: gatewayName, requests: requestOptions} = options;\n\n    // Get an agent.\n    const agent = makeAgent(requestOptions?.keepAlive);\n\n    // Build our main fetcher using the configured agent.\n    return (\n        superagent\n            .agent(agent)\n            .get(url)\n            /**\n             * Configure retries since superagent can handle this for us.\n             * We give it a callback so we can log the retry and, if we so choose\n             * in the future, decide whether we should allow any more. This would\n             * allow us to short circuit the retry count (the max retries still\n             * takes precedence over our callback response, so we can't retry\n             * forever).\n             */\n            .retry(\n                requestOptions?.retries || 2,\n                makeShouldRetry(logger, requestOptions?.shouldRetry),\n            )\n            /**\n             * We add a user agent header so that we can easily identify our\n             * requests in logs.\n             *\n             * The header has a form like:\n             *     gateway-name (GAE_VERSION_STRING_HERE)\n             */\n            .set(\n                \"User-Agent\",\n                `${gatewayName} (${process.env.GAE_VERSION || \"UNKNOWN\"})`,\n            )\n            /**\n             * Our default timeout is 1 minute, but we allow for it to be\n             * overridden by gateway options.\n             */\n            .timeout(requestOptions?.timeout || 60000)\n    );\n};\n"],"file":"make-unbuffered-no-cache-request.js"}