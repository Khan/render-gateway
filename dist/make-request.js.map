{"version":3,"sources":["../src/make-request.js"],"names":["makeRequest","options","url","logger","request","cachePlugin","isCacheable"],"mappings":";;;;;;;AAGA;;AAEA;;AACA;;AAEA;;;;;;;;;;;;;;AAcO,MAAMA,WAAW,GAAG,CACvBC,OADuB,EAEvBC,GAFuB,EAGvBC,MAHuB,KAIO;AAC9B;;;AAGA,QAAMC,OAAO,GAAG,gEAA6BH,OAA7B,EAAsCC,GAAtC,EAA2CC,MAA3C,CAAhB;AAEA;;;;;;;AAMA,MAAIF,OAAO,CAACI,WAAR,IAAuB,8BAAYH,GAAZ,EAAiBD,OAAO,CAACK,WAAzB,CAA3B,EAAkE;AAC9D;;;AAGA,WAAO,wCAAgBL,OAAhB,EAAyBG,OAAzB,CAAP;AACH;AAED;;;;;AAGA,SAAO,0CAAkBH,OAAlB,EAA2BG,OAA3B,CAAP;AACH,CA3BM","sourcesContent":["// @flow\nimport type {Response as SuperAgentResponse} from \"superagent\";\nimport type {RequestOptions} from \"./types.js\";\nimport {isCacheable} from \"./is-cacheable.js\";\nimport type {Logger} from \"./shared/index.js\";\nimport {makeUnbufferedNoCacheRequest} from \"./make-unbuffered-no-cache-request.js\";\nimport {asCachedRequest, asUncachedRequest} from \"./requests-from-cache.js\";\n\n/**\n * Make a request for a given URL\n *\n * Could resolve from cache if caching is enabled and the request has already\n * been fulfilled once. Otherwise, this creates a new request for the URL.\n *\n * The request will resolve with an additional property, which will\n * indicate if it was resolved from cache or not.\n *\n * @param {RequestOptions} options The options used to configure the request.\n * @param {string} url The URL to be requested.\n * @param {Logger} logger The logger to use.\n * @returns {Promise<SuperAgentResponse>} A superagent request for the URL.\n */\nexport const makeRequest = (\n    options: RequestOptions,\n    url: string,\n    logger: Logger,\n): Promise<SuperAgentResponse> => {\n    /**\n     * Create the base request with our various options.\n     */\n    const request = makeUnbufferedNoCacheRequest(options, url, logger);\n\n    /**\n     * We only add caching support if we were given a cache to use.\n     * We also make sure that this request is something we want to cache.\n     * We default to JS files only, but this can be overridden in the gateway\n     * options.\n     */\n    if (options.cachePlugin && isCacheable(url, options.isCacheable)) {\n        /**\n         * If we get here, we are caching this request.\n         */\n        return asCachedRequest(options, request);\n    }\n\n    /**\n     * We're not caching this request, so let's just not set caching up.\n     */\n    return asUncachedRequest(options, request);\n};\n"],"file":"make-request.js"}