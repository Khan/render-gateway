{"version":3,"sources":["../src/make-request.js"],"names":["makeRequest","options","url","logger","buffer","request","cacheOptions","requests","caching","isCacheable"],"mappings":";;;;;;;AAGA;;AAEA;;AACA;;AAEA;;;;;;;;;;;;;;;;AAgBO,MAAMA,WAAW,GAAG,CACvBC,OADuB,EAEvBC,GAFuB,EAGvBC,MAHuB,EAIvBC,MAAgB,GAAG,IAJI,KAKH;AAAA;;AACpB;;;AAGA,QAAMC,OAAO,GAAG,gEAA6BJ,OAA7B,EAAsCC,GAAtC,EAA2CC,MAA3C,CAAhB;AAEA;;;;;;;AAMA,QAAMG,YAAY,wBAAGL,OAAO,CAACM,QAAX,sDAAG,kBAAkBC,OAAvC;;AACA,MAAIF,YAAY,IAAI,8BAAYJ,GAAZ,EAAiBI,YAAY,CAACG,WAA9B,CAApB,EAAgE;AAC5D;;;AAGA,WAAO,wCAAgBJ,OAAhB,EAAyBC,YAAzB,EAAuCF,MAAvC,CAAP;AACH;AAED;;;;;AAGA,SAAO,0CAAkBC,OAAlB,EAA2BD,MAA3B,CAAP;AACH,CA7BM","sourcesContent":["// @flow\nimport type {SuperAgentRequest} from \"superagent\";\nimport type {RenderGatewayOptions} from \"./types.js\";\nimport {isCacheable} from \"./is-cacheable.js\";\nimport type {Logger} from \"./shared/index.js\";\nimport {makeUnbufferedNoCacheRequest} from \"./make-unbuffered-no-cache-request.js\";\nimport {asCachedRequest, asUncachedRequest} from \"./requests-from-cache.js\";\n\n/**\n * Make a request for a given URL\n *\n * Could resolve from cache if caching is enabled and the request has already\n * been fulfilled once. Otherwise, this creates a new request for the URL.\n *\n * The request will resolve with an additional _fromCache property, which will\n * indicate if it was resolved from cache or not.\n *\n * @param {RenderGatewayOptions} options The options used to start the gateway.\n * @param {string} url The URL to be requested.\n * @param {Logger} logger The logger to use.\n * @param {boolean} [buffer] Defaults to true. When true, the response body will\n * be buffered, otherwise it will not.\n * @returns {SuperAgentRequest} A superagent request for the URL.\n */\nexport const makeRequest = (\n    options: RenderGatewayOptions,\n    url: string,\n    logger: Logger,\n    buffer?: boolean = true,\n): SuperAgentRequest => {\n    /**\n     * Create the base request with our various options.\n     */\n    const request = makeUnbufferedNoCacheRequest(options, url, logger);\n\n    /**\n     * We only add caching support if we were given a cache to use.\n     * We also make sure that this request is something we want to cache.\n     * We default to JS files only, but this can be overridden in the gateway\n     * options.\n     */\n    const cacheOptions = options.requests?.caching;\n    if (cacheOptions && isCacheable(url, cacheOptions.isCacheable)) {\n        /**\n         * If we get here, we are caching this request.\n         */\n        return asCachedRequest(request, cacheOptions, buffer);\n    }\n\n    /**\n     * We're not caching this request, so let's just not set caching up.\n     */\n    return asUncachedRequest(request, buffer);\n};\n"],"file":"make-request.js"}