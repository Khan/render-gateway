{"version":3,"sources":["../../src/handlers/make-render-handler.js"],"names":["renderHandler","renderFn","req","res","logger","trackHeaderLookup","name","header","renderURL","url","body","status","code","targetURL","send","e","error","json","makeRenderHandler"],"mappings":";;;;;;;AAGA;;AACA;;;;;;;;AAEA;;;;;;;;;AASA,eAAeA,aAAf,CACIC,QADJ,EAEIC,GAFJ,EAGIC,GAHJ,EAIiB;AACb,QAAMC,MAAM,GAAG,uBAAUF,GAAV,CAAf,CADa,CAGb;AACA;AACA;;AACA,QAAMG,iBAAiB,GAAIC,IAAD,IAA2B;AACjD,WAAOJ,GAAG,CAACK,MAAJ,CAAWD,IAAX,CAAP;AACH,GAFD,CANa,CASb;AACA;;AAEA;;;;;;;AAKA,QAAME,SAAS,GAAGN,GAAG,CAACO,GAAtB;;AACA,MAAI;AACA;;;AAGA,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAiB,MAAMV,QAAQ,CAACO,SAAD,EAAYH,iBAAZ,CAArC;AAEA;;;;AAGA,QAAIM,MAAM,CAACC,IAAP,KAAgB,GAAhB,IAAuBD,MAAM,CAACC,IAAP,KAAgB,GAA3C,EAAgD;AAC5CT,MAAAA,GAAG,CAACI,MAAJ,CAAW,UAAX,EAAuBI,MAAM,CAACE,SAA9B;AACH,KAXD,CAYA;;;AACAV,IAAAA,GAAG,CAACQ,MAAJ,CAAWA,MAAM,CAACC,IAAlB;AACAT,IAAAA,GAAG,CAACW,IAAJ,CAASJ,IAAT;AACH,GAfD,CAeE,OAAOK,CAAP,EAAU;AACR;;;AAGA,UAAMC,KAAK,GAAG,yBAAaD,CAAb,CAAd;AAEAX,IAAAA,MAAM,CAACY,KAAP,CAAa,eAAb,oBAAkCA,KAAlC;AAAyCR,MAAAA;AAAzC;AACAL,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqBD,KAArB;AACH;AACJ;AAED;;;;;;;;;;;;AAUO,MAAME,iBAAiB,GAC1BjB,QAD6B,IAEG,CAChCC,GADgC,EAEhCC,GAFgC,KAGhBH,aAAa,CAACC,QAAD,EAAWC,GAAX,EAAgBC,GAAhB,CAL1B","sourcesContent":["// @flow\nimport type {Middleware} from \"express\";\nimport type {Request, Response, RenderCallback} from \"../types.js\";\nimport {extractError} from \"../shared/index.js\";\nimport {getLogger} from \"../ka-shared/index.js\";\n\n/**\n * Handle a request as a render.\n *\n * This method orchestrates the download and setup of a render environment\n * and the subsequent rendering process. The downloaded code is responsible for\n * the actual render operation.\n *\n * This is expected to be wrapped with express-async-handler.\n */\nasync function renderHandler(\n    renderFn: RenderCallback,\n    req: Request,\n    res: Response,\n): Promise<void> {\n    const logger = getLogger(req);\n\n    // TODO(somewhatabstract): Actually track headers and build vary header.\n    //                         Encapsulate in other code to make it easily\n    //                         tested.\n    const trackHeaderLookup = (name: string): ?string => {\n        return req.header(name);\n    };\n    // TODO(somewhatabstract): Hook in tracing (make sure that we don't leave\n    // trace sessions open on rejection (or otherwise)).\n\n    /**\n     * TODO(somewhatabstract): Currently passing the entire URL, but we\n     * want to be more specific here and define the render route better as\n     * we'll really want an absolute URL.\n     */\n    const renderURL = req.url;\n    try {\n        /**\n         * Defer this bit to the render callback.\n         */\n        const {body, status} = await renderFn(renderURL, trackHeaderLookup);\n\n        /**\n         * If the status is a redirect, we need to set the redirect header/\n         */\n        if (status.code === 301 || status.code === 302) {\n            res.header(\"Location\", status.targetURL);\n        }\n        // TODO(somewhatabstract): Add Vary header.\n        res.status(status.code);\n        res.send(body);\n    } catch (e) {\n        /**\n         * Something went wrong. Let's report it!\n         */\n        const error = extractError(e);\n\n        logger.error(\"Render failed\", {...error, renderURL});\n        res.status(500).json(error);\n    }\n}\n\n/**\n * Create a render handler.\n *\n * This creates a handler for use with express. The created handler manages\n * executing the render process, a part of which involves invoking the given\n * render function.\n *\n * @param {RenderCallback} renderFn The function that is responsible for\n * performing the render operation.\n */\nexport const makeRenderHandler = (\n    renderFn: RenderCallback,\n): Middleware<Request, Response> => (\n    req: Request,\n    res: Response,\n): Promise<void> => renderHandler(renderFn, req, res);\n"],"file":"make-render-handler.js"}