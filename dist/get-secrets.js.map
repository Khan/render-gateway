{"version":3,"sources":["../src/get-secrets.js"],"names":["getSecrets","cryptoKeyPath","serviceRootPath","lookupFn"],"mappings":";;;;;;;AACA;;AACA;;AAIA;;;AAGO,MAAMA,UAAU,GAAG,MAAwB;AAC9C,UAAQ,qCAAR;AACI,SAAK,YAAL;AACI,aAAO,6BAAiB;AACpBC,QAAAA,aAAa,EACT;AAFgB,OAAjB,CAAP;;AAKJ;AACI;;;;;;;;;AASA,aAAO,6BAAiB;AACpBC,QAAAA,eAAe,EAAE,EADG;AAEpBC,QAAAA,QAAQ,EAAE,MAAM;AAFI,OAAjB,CAAP;AAjBR;AAsBH,CAvBM","sourcesContent":["// @flow\nimport {getGCloudSecrets} from \"./ka-shared/index.js\";\nimport {getRuntimeMode} from \"./ka-shared/get-runtime-mode.js\";\n\nimport type {Secrets} from \"./ka-shared/index.js\";\n\n/**\n * Get the secrets table for the service.\n */\nexport const getSecrets = (): Promise<Secrets> => {\n    switch (getRuntimeMode()) {\n        case \"production\":\n            return getGCloudSecrets({\n                cryptoKeyPath:\n                    \"projects/khan-academy/locations/global/keyRings/secrets/cryptoKeys/render-gateway\",\n            });\n\n        default:\n            /**\n             * This should never get called, but I wanted to demonstrate\n             * call usage. We give a false path and return null from the\n             * lookupFn. This means it won't find a secrets config file, and it\n             * it does, it'll still throw from looking up null values.\n             *\n             * A service that needs this behavior would provide a real root path\n             * and a real lookup function.\n             */\n            return getGCloudSecrets({\n                serviceRootPath: \"\",\n                lookupFn: () => null,\n            });\n    }\n};\n"],"file":"get-secrets.js"}