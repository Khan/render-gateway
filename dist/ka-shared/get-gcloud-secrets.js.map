{"version":3,"sources":["../../src/ka-shared/get-gcloud-secrets.js"],"names":["secretsForDev","serviceRootPath","lookupFn","configBuffer","path","join","secretsConfig","JSON","parse","toString","secrets","Object","keys","forEach","name","secret","KAError","Errors","NotFound","secretsForProd","cryptoKeyPath","client","kms","KeyManagementServiceClient","contentsBuffer","ciphertext","result","decrypt","Buffer","from","plaintext","getGCloudSecrets","config","NotAllowed"],"mappings":";;;;;;;AAIA;;AACA;;AACA;;AACA;;AACA;;;;AAPA;;;;AAWA;;;;;;AAMA,MAAMA,aAAa,GAAG,OAClBC,eADkB,EAElBC,QAFkB,KAGC;AACnB;AACA;AACA;AACA,QAAMC,YAAY,GAAG,MAAM,wBACvBC,cAAKC,IAAL,CAAUJ,eAAV,EAA2B,qBAA3B,CADuB,CAA3B;AAGA,QAAMK,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACM,QAAb,EAAX,CAAtB;AAEA,QAAMC,OAAgB,GAAG,EAAzB;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYN,aAAZ,EAA2BO,OAA3B,CAAoCC,IAAD,IAAU;AACzC,UAAMC,MAAM,GAAGb,QAAQ,CAACY,IAAD,EAAOR,aAAa,CAACQ,IAAD,CAApB,CAAvB;;AACA,QAAI,CAACC,MAAL,EAAa;AACT,YAAM,IAAIC,cAAJ,CAAa,yBAAwBF,IAAK,EAA1C,EAA6CG,eAAOC,QAApD,CAAN;AACH;;AACDR,IAAAA,OAAO,CAACI,IAAD,CAAP,GAAgBC,MAAhB;AACH,GAND;AAQA,SAAOL,OAAP;AACH,CAtBD;AAwBA;;;;;;;;AAMA,MAAMS,cAAc,GAAG,MAAOC,aAAP,IAAmD;AACtE,QAAMC,MAAM,GAAG,IAAIC,aAAIC,0BAAR,EAAf;AACA,QAAMC,cAAc,GAAG,MAAM,wBAAS,oBAAT,CAA7B;AACA,QAAMC,UAAU,GAAGD,cAAc,CAACf,QAAf,CAAwB,QAAxB,CAAnB;AACA,QAAM,CAACiB,MAAD,IAAW,MAAML,MAAM,CAACM,OAAP,CAAe;AAACb,IAAAA,IAAI,EAAEM,aAAP;AAAsBK,IAAAA;AAAtB,GAAf,CAAvB;AACA,SAAOlB,IAAI,CAACC,KAAL,CAAWoB,MAAM,CAACC,IAAP,CAAYH,MAAM,CAACI,SAAnB,EAA8B,QAA9B,CAAX,CAAP;AACH,CAND;AAQA;;;;;AAGO,MAAMC,gBAAgB,GAAIC,MAAD,IAA6C;AACzE,MAAIA,MAAM,CAACZ,aAAX,EAA0B;AACtB,WAAOD,cAAc,CAACa,MAAM,CAACZ,aAAR,CAArB;AACH,GAFD,MAEO,IAAIY,MAAM,CAAC/B,eAAX,EAA4B;AAC/B,WAAOD,aAAa,CAACgC,MAAM,CAAC/B,eAAR,EAAyB+B,MAAM,CAAC9B,QAAhC,CAApB;AACH;;AAED,QAAM,IAAIc,cAAJ,CAAY,2BAAZ,EAAyCC,eAAOgB,UAAhD,CAAN;AACH,CARM","sourcesContent":["// @flow\n/**\n * Utilities for reading secrets from secrets files.\n */\nimport path from \"path\";\nimport kms from \"@google-cloud/kms\";\nimport {Errors} from \"./errors.js\";\nimport {KAError} from \"../shared/index.js\";\nimport {readFile} from \"./read-file.js\";\n\nimport type {SecretsConfig, Secrets, SecretString} from \"./types.js\";\n\n/**\n * Look up secrets during development.\n *\n * This assumes a secrets-config.json file exists and then uses the given\n * lookupFn to map them to dev secrets.\n */\nconst secretsForDev = async (\n    serviceRootPath: string,\n    lookupFn: (name: string, config: string) => ?SecretString,\n): Promise<Secrets> => {\n    // NOTE(somewhatabstract): It's convenient to use require here since that\n    // already understands JSON, but that's harder to test. This way we get\n    // the same functionality but we can actually test it.\n    const configBuffer = await readFile(\n        path.join(serviceRootPath, \"secrets-config.json\"),\n    );\n    const secretsConfig = JSON.parse(configBuffer.toString());\n\n    const secrets: Secrets = {};\n    Object.keys(secretsConfig).forEach((name) => {\n        const secret = lookupFn(name, secretsConfig[name]);\n        if (!secret) {\n            throw new KAError(`Could not read secret ${name}`, Errors.NotFound);\n        }\n        secrets[name] = secret;\n    });\n\n    return secrets;\n};\n\n/**\n * Look up secrets during production.\n *\n * This is based on\n * https://cloud.google.com/kms/docs/encrypt-decrypt#kms-howto-encrypt-nodejs\n */\nconst secretsForProd = async (cryptoKeyPath: string): Promise<Secrets> => {\n    const client = new kms.KeyManagementServiceClient();\n    const contentsBuffer = await readFile(\"./secrets.json.enc\");\n    const ciphertext = contentsBuffer.toString(\"base64\");\n    const [result] = await client.decrypt({name: cryptoKeyPath, ciphertext});\n    return JSON.parse(Buffer.from(result.plaintext, \"base64\"));\n};\n\n/**\n * Get secrets\n */\nexport const getGCloudSecrets = (config: SecretsConfig): Promise<Secrets> => {\n    if (config.cryptoKeyPath) {\n        return secretsForProd(config.cryptoKeyPath);\n    } else if (config.serviceRootPath) {\n        return secretsForDev(config.serviceRootPath, config.lookupFn);\n    }\n\n    throw new KAError(\"Unsupported configuration\", Errors.NotAllowed);\n};\n"],"file":"get-gcloud-secrets.js"}