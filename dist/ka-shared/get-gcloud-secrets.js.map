{"version":3,"file":"get-gcloud-secrets.js","names":["secretsForDev","serviceRootPath","lookupFn","configBuffer","readFile","path","join","secretsConfig","JSON","parse","toString","secrets","Object","keys","forEach","name","secret","KAError","Errors","NotFound","secretsForProd","cryptoKeyPath","client","kms","KeyManagementServiceClient","contentsBuffer","ciphertext","result","decrypt","Buffer","from","plaintext","getGCloudSecrets","config","NotAllowed"],"sources":["../../src/ka-shared/get-gcloud-secrets.js"],"sourcesContent":["// @flow\n/**\n * Utilities for reading secrets from secrets files.\n */\nimport path from \"path\";\nimport kms from \"@google-cloud/kms\";\nimport {Errors} from \"./errors.js\";\nimport {KAError} from \"../shared/index.js\";\nimport {readFile} from \"./read-file.js\";\n\nimport type {SecretsConfig, Secrets, SecretString} from \"./types.js\";\n\n/**\n * Look up secrets during development.\n *\n * This assumes a secrets-config.json file exists and then uses the given\n * lookupFn to map them to dev secrets.\n */\nconst secretsForDev = async (\n    serviceRootPath: string,\n    lookupFn: (name: string, config: string) => ?SecretString,\n): Promise<Secrets> => {\n    // NOTE(somewhatabstract): It's convenient to use require here since that\n    // already understands JSON, but that's harder to test. This way we get\n    // the same functionality but we can actually test it.\n    const configBuffer = await readFile(\n        path.join(serviceRootPath, \"secrets-config.json\"),\n    );\n    const secretsConfig = JSON.parse(configBuffer.toString());\n\n    const secrets: Secrets = {};\n    Object.keys(secretsConfig).forEach((name) => {\n        const secret = lookupFn(name, secretsConfig[name]);\n        if (!secret) {\n            throw new KAError(`Could not read secret ${name}`, Errors.NotFound);\n        }\n        secrets[name] = secret;\n    });\n\n    return secrets;\n};\n\n/**\n * Look up secrets during production.\n *\n * This is based on\n * https://cloud.google.com/kms/docs/encrypt-decrypt#kms-howto-encrypt-nodejs\n */\nconst secretsForProd = async (cryptoKeyPath: string): Promise<Secrets> => {\n    const client = new kms.KeyManagementServiceClient();\n    const contentsBuffer = await readFile(\"./secrets.json.enc\");\n    const ciphertext = contentsBuffer.toString(\"base64\");\n    const [result] = await client.decrypt({name: cryptoKeyPath, ciphertext});\n    return JSON.parse(Buffer.from(result.plaintext, \"base64\"));\n};\n\n/**\n * Get secrets\n */\nexport const getGCloudSecrets = (config: SecretsConfig): Promise<Secrets> => {\n    if (config.cryptoKeyPath) {\n        return secretsForProd(config.cryptoKeyPath);\n    } else if (config.serviceRootPath) {\n        return secretsForDev(config.serviceRootPath, config.lookupFn);\n    }\n\n    throw new KAError(\"Unsupported configuration\", Errors.NotAllowed);\n};\n"],"mappings":";;;;;;AAIA;AACA;AACA;AACA;AACA;AAAwC;AAPxC;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,aAAa,GAAG,OAClBC,eAAuB,EACvBC,QAAyD,KACtC;EACnB;EACA;EACA;EACA,MAAMC,YAAY,GAAG,MAAM,IAAAC,kBAAQ,EAC/BC,aAAI,CAACC,IAAI,CAACL,eAAe,EAAE,qBAAqB,CAAC,CACpD;EACD,MAAMM,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACN,YAAY,CAACO,QAAQ,EAAE,CAAC;EAEzD,MAAMC,OAAgB,GAAG,CAAC,CAAC;EAC3BC,MAAM,CAACC,IAAI,CAACN,aAAa,CAAC,CAACO,OAAO,CAAEC,IAAI,IAAK;IACzC,MAAMC,MAAM,GAAGd,QAAQ,CAACa,IAAI,EAAER,aAAa,CAACQ,IAAI,CAAC,CAAC;IAClD,IAAI,CAACC,MAAM,EAAE;MACT,MAAM,IAAIC,cAAO,CAAE,yBAAwBF,IAAK,EAAC,EAAEG,cAAM,CAACC,QAAQ,CAAC;IACvE;IACAR,OAAO,CAACI,IAAI,CAAC,GAAGC,MAAM;EAC1B,CAAC,CAAC;EAEF,OAAOL,OAAO;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMS,cAAc,GAAG,MAAOC,aAAqB,IAAuB;EACtE,MAAMC,MAAM,GAAG,IAAIC,YAAG,CAACC,0BAA0B,EAAE;EACnD,MAAMC,cAAc,GAAG,MAAM,IAAArB,kBAAQ,EAAC,oBAAoB,CAAC;EAC3D,MAAMsB,UAAU,GAAGD,cAAc,CAACf,QAAQ,CAAC,QAAQ,CAAC;EACpD,MAAM,CAACiB,MAAM,CAAC,GAAG,MAAML,MAAM,CAACM,OAAO,CAAC;IAACb,IAAI,EAAEM,aAAa;IAAEK;EAAU,CAAC,CAAC;EACxE,OAAOlB,IAAI,CAACC,KAAK,CAACoB,MAAM,CAACC,IAAI,CAACH,MAAM,CAACI,SAAS,EAAE,QAAQ,CAAC,CAAC;AAC9D,CAAC;;AAED;AACA;AACA;AACO,MAAMC,gBAAgB,GAAIC,MAAqB,IAAuB;EACzE,IAAIA,MAAM,CAACZ,aAAa,EAAE;IACtB,OAAOD,cAAc,CAACa,MAAM,CAACZ,aAAa,CAAC;EAC/C,CAAC,MAAM,IAAIY,MAAM,CAAChC,eAAe,EAAE;IAC/B,OAAOD,aAAa,CAACiC,MAAM,CAAChC,eAAe,EAAEgC,MAAM,CAAC/B,QAAQ,CAAC;EACjE;EAEA,MAAM,IAAIe,cAAO,CAAC,2BAA2B,EAAEC,cAAM,CAACgB,UAAU,CAAC;AACrE,CAAC;AAAC"}