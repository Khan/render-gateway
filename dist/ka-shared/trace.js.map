{"version":3,"sources":["../../src/ka-shared/trace.js"],"names":["trace","name","request","logger","tracer","traceAgent","get"],"mappings":";;;;;;;AACA;;AAEA;;AACA;;;;;;AAIA;;;;;;;;;;;;;;;;;AAiBO,MAAMA,KAAK,GAAG,CACjBC,IADiB,EAEjBC,OAFiB,KAGD;AAChB,QAAMC,MAAM,GAAG,0BAAUD,OAAV,CAAf;AACA,QAAME,MAAM,GAAGC,UAAU,CAACC,GAAX,EAAf;AACA,SAAO,kBAAUH,MAAV,EAAkBF,IAAlB,EAAwBG,MAAxB,CAAP;AACH,CAPM","sourcesContent":["// @flow\nimport * as traceAgent from \"@google-cloud/trace-agent\";\nimport type {$Request} from \"express\";\nimport {trace as traceImpl} from \"../shared/index.js\";\nimport {getLogger} from \"./get-logger.js\";\n\nimport type {RequestWithLog, ITraceSession} from \"../shared/types.js\";\n\n/**\n * Start tracing an event.\n *\n * This will log the start of a trace and open a trace session, which is\n * returned. Use the returned session to end the trace when the traced event is\n * over. The traced event will be logged and also written to the Google Cloud\n * StackDriver Trace agent.\n *\n * Note that if startTraceAgent was never called, this will still log but the\n * StackDriver trace span creation will not actually happen.\n *\n * @param {string} name The name of the event being traced.\n * @param {TReq: RequestWithLog<$Request>} [request] The request being\n * fulfilled. This is used to determine if a request-scoped logger can be used.\n * @returns {ITraceSession} The new trace session that was created and is to be\n * used to end the session.\n */\nexport const trace = <TReq: RequestWithLog<$Request>>(\n    name: string,\n    request?: TReq,\n): ITraceSession => {\n    const logger = getLogger(request);\n    const tracer = traceAgent.get();\n    return traceImpl(logger, name, tracer);\n};\n"],"file":"trace.js"}