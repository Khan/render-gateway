{"version":3,"sources":["../../src/ka-shared/trace.js"],"names":["trace","action","message","requestOrLogger","tracer","traceAgent","get","Object","prototype","hasOwnProperty","call","logger"],"mappings":";;;;;;;AACA;;AAEA;;AACA;;;;;;AAkDO,MAAMA,KAAa,GAAG,CACzBC,MADyB,EAEzBC,OAFyB,EAGzBC,eAHyB,KAIT;AAChB,QAAMC,MAAM,GAAGC,UAAU,CAACC,GAAX,EAAf;;AACA,MACIH,eAAe,IAAI,IAAnB,IACAI,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCP,eAArC,EAAsD,KAAtD,CAFJ,EAGE;AACE,UAAMQ,MAAM,GAAG,0BAAUR,eAAV,CAAf;AACA,WAAO,kBAAUQ,MAAV,EAAkBV,MAAlB,EAA0BC,OAA1B,EAAmCE,MAAnC,CAAP;AACH;;AACD,SAAO,kBAAUD,eAAV,EAA2BF,MAA3B,EAAmCC,OAAnC,EAA4CE,MAA5C,CAAP;AACH,CAdM","sourcesContent":["// @flow\nimport * as traceAgent from \"@google-cloud/trace-agent\";\nimport type {$Request} from \"express\";\nimport {trace as traceImpl} from \"../shared/index.js\";\nimport {getLogger} from \"./get-logger.js\";\nimport type {Logger} from \"../shared/index.js\";\n\nimport type {RequestWithLog, ITraceSession} from \"../shared/types.js\";\n\ninterface ITrace {\n    /**\n     * Start tracing an event.\n     *\n     * This will log the start of a trace and open a trace session, which is\n     * returned. Use the returned session to end the trace when the traced event is\n     * over. The traced event will be logged and also written to the Google Cloud\n     * StackDriver Trace agent.\n     *\n     * Note that if startTraceAgent was never called, this will still log but the\n     * StackDriver trace span creation will not actually happen.\n     *\n     * @param {string} action The name of the action being traced.\n     * @param {string} message A message to be logged along side the action\n     * @param {TReq: RequestWithLog<$Request>} [request] The request being\n     * fulfilled. This is used to determine if a request-scoped logger can be used.\n     * @returns {ITraceSession} The new trace session that was created and is to be\n     * used to end the session.\n     */\n    <TReq: RequestWithLog<$Request>>(\n        action: string,\n        message: string,\n        request?: TReq,\n    ): ITraceSession;\n\n    /**\n     * Start tracing an event.\n     *\n     * This will log the start of a trace and open a trace session, which is\n     * returned. Use the returned session to end the trace when the traced event is\n     * over. The traced event will be logged and also written to the Google Cloud\n     * StackDriver Trace agent.\n     *\n     * Note that if startTraceAgent was never called, this will still log but the\n     * StackDriver trace span creation will not actually happen.\n     *\n     * @param {string} action The name of the action being traced.\n     * @param {string} message A message to be logged along side the action\n     * @param {Logger} logger The logger to be used for the trace.\n     * @returns {ITraceSession} The new trace session that was created and is to be\n     * used to end the session.\n     */\n    (action: string, message: string, logger: Logger): ITraceSession;\n}\n\nexport const trace: ITrace = (\n    action: string,\n    message: string,\n    requestOrLogger: any,\n): ITraceSession => {\n    const tracer = traceAgent.get();\n    if (\n        requestOrLogger == null ||\n        Object.prototype.hasOwnProperty.call(requestOrLogger, \"url\")\n    ) {\n        const logger = getLogger(requestOrLogger);\n        return traceImpl(logger, action, message, tracer);\n    }\n    return traceImpl(requestOrLogger, action, message, tracer);\n};\n"],"file":"trace.js"}