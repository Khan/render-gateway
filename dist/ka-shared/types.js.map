{"version":3,"file":"types.js","names":[],"sources":["../../src/ka-shared/types.js"],"sourcesContent":["// @flow\nimport typeof {Errors} from \"./errors.js\";\n\n/**\n * What kind of error is being reported.\n *\n * This type represents our error taxonomy:\n *  - https://khanacademy.atlassian.net/wiki/spaces/ENG/pages/150208513/Goliath+Errors+Best+Practices\n */\nexport type ErrorKind = $Values<Errors>;\n\n/**\n * A secret that is a string.\n *\n * This opaque type makes it clearer when secrets are being used and enforces\n * the need for explicit casting if they must be used as a string.\n */\nexport opaque type SecretString = string;\n\n/**\n * A named secret and its value.\n */\nexport type Secret = {\n    /**\n     * The name of the secret.\n     */\n    name: string,\n\n    /**\n     * The secret. ðŸ¤«ssshhhhh!\n     */\n    value: SecretString,\n};\n\n/**\n * A collection of secrets keyed by their names.\n */\nexport type Secrets = {[string]: SecretString, ...};\n\n/**\n * Configuration of secrets lookup.\n *\n * One variation provides a Google Cloud KMS configuration; the other provides\n * means to map secrets dynamically.\n */\nexport type SecretsConfig =\n    | {\n          /**\n           * A Google Cloud KMS crpyto key path. This is required in\n           * production.\n           */\n          cryptoKeyPath: string,\n      }\n    | {\n          /**\n           * The absolute path of the root folder for the service.\n           */\n          serviceRootPath: string,\n          /**\n           * A function used to lookup a secret by name.\n           */\n          lookupFn: (name: string, config: string) => ?SecretString,\n      };\n\nexport interface WarmUpHandlerFn {\n    /**\n     * Warm up a new instance of the server.\n     */\n    (\n        headers: $ReadOnly<{\n            +[header: string]: string,\n            ...\n        }>,\n    ): Promise<void>;\n}\n"],"mappings":""}