{"version":3,"file":"make-render-handler.js","names":["renderHandler","renderEnvironment","errorHandler","defaultErrorResponse","req","res","logger","getLogger","traceFn","action","message","trace","renderURL","query","url","KAError","Errors","InvalidInput","traceSession","renderAPI","headers","body","status","render","addLabel","includes","NotAllowed","header","send","e","handleError","end","level","makeRenderHandler","next","finally"],"sources":["../../../src/gateway/handlers/make-render-handler.js"],"sourcesContent":["// @flow\nimport type {Middleware, NextFunction} from \"express\";\nimport {getLogger, trace, KAError} from \"../../shared/index.js\";\nimport {Errors} from \"../../ka-shared/index.js\";\nimport {handleError} from \"./handle-error.js\";\nimport type {ITraceSession} from \"../../shared/index.js\";\nimport type {\n    Request,\n    Response,\n    IRenderEnvironment,\n    RenderAPI,\n    CustomErrorHandlerFn,\n} from \"../types.js\";\n\n/**\n * Handle a request as a render.\n *\n * This method orchestrates the download and setup of a render environment\n * and the subsequent rendering process. The downloaded code is responsible for\n * the actual render operation.\n *\n * This is expected to be wrapped with express-async-handler.\n */\nasync function renderHandler(\n    renderEnvironment: IRenderEnvironment,\n    errorHandler: ?CustomErrorHandlerFn,\n    defaultErrorResponse: ?string,\n    req: Request,\n    res: Response,\n): Promise<void> {\n    const logger = getLogger(req);\n\n    /**\n     * TODO(somewhatabstract, WEB-2057): Make sure that we don't leave trace\n     * sessions open on rejection (or otherwise).\n     *\n     * For now, we'll assume callers will tidy up.\n     */\n    const traceFn = (action: string, message: string): ITraceSession =>\n        trace(action, message, req);\n\n    /**\n     * The URL being rendered is given in a query param named, url.\n     */\n    const renderURL = req.query.url;\n    if (typeof renderURL !== \"string\") {\n        if (renderURL == null) {\n            throw new KAError(`Missing url query param`, Errors.InvalidInput);\n        }\n        throw new KAError(\n            `More than one url query param given`,\n            Errors.InvalidInput,\n        );\n    }\n    const traceSession = traceFn(\"render\", `Rendering ${renderURL}`);\n    try {\n        /**\n         * Put together the API we make available when rendering.\n         */\n        const renderAPI: RenderAPI = {\n            trace: traceFn,\n            logger,\n            // Passthrough the request headers\n            headers: {...req.headers},\n        };\n\n        /**\n         * Defer this bit to the render callback.\n         */\n        const {body, status, headers} = await renderEnvironment.render(\n            renderURL,\n            renderAPI,\n        );\n        traceSession.addLabel(\"/result/status\", status);\n        traceSession.addLabel(\"/result/headers\", headers);\n\n        /**\n         * We don't do anything to the response headers other than validate\n         * that redirect-type statuses include a Location header.\n         * 3xx headers that MUST have a Location header are:\n         * - 301\n         * - 302\n         * - 307\n         * - 308\n         */\n        if (\n            [301, 302, 307, 308].includes(status) &&\n            headers[\"Location\"] == null\n        ) {\n            throw new KAError(\n                \"Render resulted in redirection status without required Location header\",\n                Errors.NotAllowed,\n            );\n        }\n        /**\n         * TODO(somewhatabstract): Since we have access to the tracked\n         * headers, we could generate a Vary header for the response when one\n         * is not already included. This would ensure it does the right thing\n         * out-of-the-box while also providing means to support more complex\n         * implementations. This is super low priority though.\n         */\n\n        /**\n         * Finally, we set the headers, status and send the response body.\n         */\n        res.header(headers);\n        res.status(status);\n        res.send(body);\n    } catch (e) {\n        await handleError(\n            \"Render failed\",\n            errorHandler,\n            defaultErrorResponse,\n            req,\n            res,\n            e,\n        );\n    } finally {\n        traceSession.end({level: \"info\"});\n    }\n}\n\n/**\n * Create a render handler.\n *\n * This creates a handler for use with express. The created handler manages\n * executing the render process, a part of which involves invoking a render\n * within the given render environment.\n *\n * @param {IRenderEnvironment} renderEnvironment The environment responsible for\n * performing renders.\n */\nexport const makeRenderHandler =\n    (\n        renderEnvironment: IRenderEnvironment,\n        errorHandler: ?CustomErrorHandlerFn,\n        defaultErrorResponse: ?string,\n    ): Middleware<Request, Response> =>\n    (req: Request, res: Response, next: NextFunction): Promise<void> =>\n        renderHandler(\n            renderEnvironment,\n            errorHandler,\n            defaultErrorResponse,\n            req,\n            res,\n        ).finally(next);\n"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeA,aAAf,CACIC,iBADJ,EAEIC,YAFJ,EAGIC,oBAHJ,EAIIC,GAJJ,EAKIC,GALJ,EAMiB;EACb,MAAMC,MAAM,GAAG,IAAAC,gBAAA,EAAUH,GAAV,CAAf;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACI,MAAMI,OAAO,GAAG,CAACC,MAAD,EAAiBC,OAAjB,KACZ,IAAAC,YAAA,EAAMF,MAAN,EAAcC,OAAd,EAAuBN,GAAvB,CADJ;EAGA;AACJ;AACA;;;EACI,MAAMQ,SAAS,GAAGR,GAAG,CAACS,KAAJ,CAAUC,GAA5B;;EACA,IAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;IAC/B,IAAIA,SAAS,IAAI,IAAjB,EAAuB;MACnB,MAAM,IAAIG,cAAJ,CAAa,yBAAb,EAAuCC,cAAA,CAAOC,YAA9C,CAAN;IACH;;IACD,MAAM,IAAIF,cAAJ,CACD,qCADC,EAEFC,cAAA,CAAOC,YAFL,CAAN;EAIH;;EACD,MAAMC,YAAY,GAAGV,OAAO,CAAC,QAAD,EAAY,aAAYI,SAAU,EAAlC,CAA5B;;EACA,IAAI;IACA;AACR;AACA;IACQ,MAAMO,SAAoB,GAAG;MACzBR,KAAK,EAAEH,OADkB;MAEzBF,MAFyB;MAGzB;MACAc,OAAO,oBAAMhB,GAAG,CAACgB,OAAV;IAJkB,CAA7B;IAOA;AACR;AACA;;IACQ,MAAM;MAACC,IAAD;MAAOC,MAAP;MAAeF;IAAf,IAA0B,MAAMnB,iBAAiB,CAACsB,MAAlB,CAClCX,SADkC,EAElCO,SAFkC,CAAtC;IAIAD,YAAY,CAACM,QAAb,CAAsB,gBAAtB,EAAwCF,MAAxC;IACAJ,YAAY,CAACM,QAAb,CAAsB,iBAAtB,EAAyCJ,OAAzC;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,IACI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqBK,QAArB,CAA8BH,MAA9B,KACAF,OAAO,CAAC,UAAD,CAAP,IAAuB,IAF3B,EAGE;MACE,MAAM,IAAIL,cAAJ,CACF,wEADE,EAEFC,cAAA,CAAOU,UAFL,CAAN;IAIH;IACD;AACR;AACA;AACA;AACA;AACA;AACA;;IAEQ;AACR;AACA;;;IACQrB,GAAG,CAACsB,MAAJ,CAAWP,OAAX;IACAf,GAAG,CAACiB,MAAJ,CAAWA,MAAX;IACAjB,GAAG,CAACuB,IAAJ,CAASP,IAAT;EACH,CArDD,CAqDE,OAAOQ,CAAP,EAAU;IACR,MAAM,IAAAC,wBAAA,EACF,eADE,EAEF5B,YAFE,EAGFC,oBAHE,EAIFC,GAJE,EAKFC,GALE,EAMFwB,CANE,CAAN;EAQH,CA9DD,SA8DU;IACNX,YAAY,CAACa,GAAb,CAAiB;MAACC,KAAK,EAAE;IAAR,CAAjB;EACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMC,iBAAiB,GAC1B,CACIhC,iBADJ,EAEIC,YAFJ,EAGIC,oBAHJ,KAKA,CAACC,GAAD,EAAeC,GAAf,EAA8B6B,IAA9B,KACIlC,aAAa,CACTC,iBADS,EAETC,YAFS,EAGTC,oBAHS,EAITC,GAJS,EAKTC,GALS,CAAb,CAME8B,OANF,CAMUD,IANV,CAPD"}