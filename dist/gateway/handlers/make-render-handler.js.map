{"version":3,"sources":["../../../src/gateway/handlers/make-render-handler.js"],"names":["renderHandler","renderEnvironment","errorHandler","defaultErrorResponse","req","res","logger","traceFn","action","message","renderURL","query","url","KAError","Errors","InvalidInput","traceSession","renderAPI","trace","headers","body","status","render","addLabel","includes","NotAllowed","header","send","e","end","makeRenderHandler","next","finally"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;;;;;AAUA;;;;;;;;;AASA,eAAeA,aAAf,CACIC,iBADJ,EAEIC,YAFJ,EAGIC,oBAHJ,EAIIC,GAJJ,EAKIC,GALJ,EAMiB;AACb,QAAMC,MAAM,GAAG,sBAAUF,GAAV,CAAf;AAEA;;;;;;;AAMA,QAAMG,OAAO,GAAG,CAACC,MAAD,EAAiBC,OAAjB,KACZ,kBAAMD,MAAN,EAAcC,OAAd,EAAuBL,GAAvB,CADJ;AAGA;;;;;AAGA,QAAMM,SAAS,GAAGN,GAAG,CAACO,KAAJ,CAAUC,GAA5B;;AACA,MAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;AAC/B,QAAIA,SAAS,IAAI,IAAjB,EAAuB;AACnB,YAAM,IAAIG,cAAJ,CAAa,yBAAb,EAAuCC,eAAOC,YAA9C,CAAN;AACH;;AACD,UAAM,IAAIF,cAAJ,CACD,qCADC,EAEFC,eAAOC,YAFL,CAAN;AAIH;;AACD,QAAMC,YAAY,GAAGT,OAAO,CAAC,QAAD,EAAY,aAAYG,SAAU,EAAlC,CAA5B;;AACA,MAAI;AACA;;;AAGA,UAAMO,SAAoB,GAAG;AACzBC,MAAAA,KAAK,EAAEX,OADkB;AAEzBD,MAAAA,MAFyB;AAGzB;AACAa,MAAAA,OAAO,oBAAMf,GAAG,CAACe,OAAV;AAJkB,KAA7B;AAOA;;;;AAGA,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA,MAAP;AAAeF,MAAAA;AAAf,QAA0B,MAAMlB,iBAAiB,CAACqB,MAAlB,CAClCZ,SADkC,EAElCO,SAFkC,CAAtC;AAIAD,IAAAA,YAAY,CAACO,QAAb,CAAsB,gBAAtB,EAAwCF,MAAxC;AACAL,IAAAA,YAAY,CAACO,QAAb,CAAsB,iBAAtB,EAAyCJ,OAAzC;AAEA;;;;;;;;;;AASA,QACI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqBK,QAArB,CAA8BH,MAA9B,KACAF,OAAO,CAAC,UAAD,CAAP,IAAuB,IAF3B,EAGE;AACE,YAAM,IAAIN,cAAJ,CACF,wEADE,EAEFC,eAAOW,UAFL,CAAN;AAIH;AACD;;;;;;;;AAQA;;;;;AAGApB,IAAAA,GAAG,CAACqB,MAAJ,CAAWP,OAAX;AACAd,IAAAA,GAAG,CAACgB,MAAJ,CAAWA,MAAX;AACAhB,IAAAA,GAAG,CAACsB,IAAJ,CAASP,IAAT;AACH,GArDD,CAqDE,OAAOQ,CAAP,EAAU;AACR,kCACI,eADJ,EAEI1B,YAFJ,EAGIC,oBAHJ,EAIIC,GAJJ,EAKIC,GALJ,EAMIuB,CANJ;AAQH,GA9DD,SA8DU;AACNZ,IAAAA,YAAY,CAACa,GAAb;AACH;AACJ;AAED;;;;;;;;;;;;AAUO,MAAMC,iBAAiB,GAAG,CAC7B7B,iBAD6B,EAE7BC,YAF6B,EAG7BC,oBAH6B,KAIG,CAChCC,GADgC,EAEhCC,GAFgC,EAGhC0B,IAHgC,KAKhC/B,aAAa,CACTC,iBADS,EAETC,YAFS,EAGTC,oBAHS,EAITC,GAJS,EAKTC,GALS,CAAb,CAME2B,OANF,CAMUD,IANV,CATG","sourcesContent":["// @flow\nimport type {Middleware, NextFunction} from \"express\";\nimport {getLogger, trace, KAError} from \"../../shared/index.js\";\nimport {Errors} from \"../../ka-shared/index.js\";\nimport {handleError} from \"./handle-error.js\";\nimport type {ITraceSession} from \"../../shared/index.js\";\nimport type {\n    Request,\n    Response,\n    IRenderEnvironment,\n    RenderAPI,\n    CustomErrorHandlerFn,\n} from \"../types.js\";\n\n/**\n * Handle a request as a render.\n *\n * This method orchestrates the download and setup of a render environment\n * and the subsequent rendering process. The downloaded code is responsible for\n * the actual render operation.\n *\n * This is expected to be wrapped with express-async-handler.\n */\nasync function renderHandler(\n    renderEnvironment: IRenderEnvironment,\n    errorHandler: ?CustomErrorHandlerFn,\n    defaultErrorResponse: ?string,\n    req: Request,\n    res: Response,\n): Promise<void> {\n    const logger = getLogger(req);\n\n    /**\n     * TODO(somewhatabstract, WEB-2057): Make sure that we don't leave trace\n     * sessions open on rejection (or otherwise).\n     *\n     * For now, we'll assume callers will tidy up.\n     */\n    const traceFn = (action: string, message: string): ITraceSession =>\n        trace(action, message, req);\n\n    /**\n     * The URL being rendered is given in a query param named, url.\n     */\n    const renderURL = req.query.url;\n    if (typeof renderURL !== \"string\") {\n        if (renderURL == null) {\n            throw new KAError(`Missing url query param`, Errors.InvalidInput);\n        }\n        throw new KAError(\n            `More than one url query param given`,\n            Errors.InvalidInput,\n        );\n    }\n    const traceSession = traceFn(\"render\", `Rendering ${renderURL}`);\n    try {\n        /**\n         * Put together the API we make available when rendering.\n         */\n        const renderAPI: RenderAPI = {\n            trace: traceFn,\n            logger,\n            // Passthrough the request headers\n            headers: {...req.headers},\n        };\n\n        /**\n         * Defer this bit to the render callback.\n         */\n        const {body, status, headers} = await renderEnvironment.render(\n            renderURL,\n            renderAPI,\n        );\n        traceSession.addLabel(\"/result/status\", status);\n        traceSession.addLabel(\"/result/headers\", headers);\n\n        /**\n         * We don't do anything to the response headers other than validate\n         * that redirect-type statuses include a Location header.\n         * 3xx headers that MUST have a Location header are:\n         * - 301\n         * - 302\n         * - 307\n         * - 308\n         */\n        if (\n            [301, 302, 307, 308].includes(status) &&\n            headers[\"Location\"] == null\n        ) {\n            throw new KAError(\n                \"Render resulted in redirection status without required Location header\",\n                Errors.NotAllowed,\n            );\n        }\n        /**\n         * TODO(somewhatabstract): Since we have access to the tracked\n         * headers, we could generate a Vary header for the response when one\n         * is not already included. This would ensure it does the right thing\n         * out-of-the-box while also providing means to support more complex\n         * implementations. This is super low priority though.\n         */\n\n        /**\n         * Finally, we set the headers, status and send the response body.\n         */\n        res.header(headers);\n        res.status(status);\n        res.send(body);\n    } catch (e) {\n        handleError(\n            \"Render failed\",\n            errorHandler,\n            defaultErrorResponse,\n            req,\n            res,\n            e,\n        );\n    } finally {\n        traceSession.end();\n    }\n}\n\n/**\n * Create a render handler.\n *\n * This creates a handler for use with express. The created handler manages\n * executing the render process, a part of which involves invoking a render\n * within the given render environment.\n *\n * @param {IRenderEnvironment} renderEnvironment The environment responsible for\n * performing renders.\n */\nexport const makeRenderHandler = (\n    renderEnvironment: IRenderEnvironment,\n    errorHandler: ?CustomErrorHandlerFn,\n    defaultErrorResponse: ?string,\n): Middleware<Request, Response> => (\n    req: Request,\n    res: Response,\n    next: NextFunction,\n): Promise<void> =>\n    renderHandler(\n        renderEnvironment,\n        errorHandler,\n        defaultErrorResponse,\n        req,\n        res,\n    ).finally(next);\n"],"file":"make-render-handler.js"}