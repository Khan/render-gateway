{"version":3,"file":"make-render-handler.js","names":["renderHandler","renderEnvironment","errorHandler","defaultErrorResponse","req","res","logger","getLogger","traceFn","action","message","trace","renderURL","query","url","KAError","Errors","InvalidInput","traceSession","renderAPI","headers","body","status","render","addLabel","includes","NotAllowed","header","send","e","handleError","end","level","makeRenderHandler","next","finally"],"sources":["../../../src/gateway/handlers/make-render-handler.js"],"sourcesContent":["// @flow\nimport type {Middleware, NextFunction} from \"express\";\nimport {getLogger, trace, KAError} from \"../../shared/index.js\";\nimport {Errors} from \"../../ka-shared/index.js\";\nimport {handleError} from \"./handle-error.js\";\nimport type {ITraceSession} from \"../../shared/index.js\";\nimport type {\n    Request,\n    Response,\n    IRenderEnvironment,\n    RenderAPI,\n    CustomErrorHandlerFn,\n} from \"../types.js\";\n\n/**\n * Handle a request as a render.\n *\n * This method orchestrates the download and setup of a render environment\n * and the subsequent rendering process. The downloaded code is responsible for\n * the actual render operation.\n *\n * This is expected to be wrapped with express-async-handler.\n */\nasync function renderHandler(\n    renderEnvironment: IRenderEnvironment,\n    errorHandler: ?CustomErrorHandlerFn,\n    defaultErrorResponse: ?string,\n    req: Request,\n    res: Response,\n): Promise<void> {\n    const logger = getLogger(req);\n\n    /**\n     * TODO(somewhatabstract, WEB-2057): Make sure that we don't leave trace\n     * sessions open on rejection (or otherwise).\n     *\n     * For now, we'll assume callers will tidy up.\n     */\n    const traceFn = (action: string, message: string): ITraceSession =>\n        trace(action, message, req);\n\n    /**\n     * The URL being rendered is given in a query param named, url.\n     */\n    const renderURL = req.query.url;\n    if (typeof renderURL !== \"string\") {\n        if (renderURL == null) {\n            throw new KAError(`Missing url query param`, Errors.InvalidInput);\n        }\n        throw new KAError(\n            `More than one url query param given`,\n            Errors.InvalidInput,\n        );\n    }\n    const traceSession = traceFn(\"render\", `Rendering ${renderURL}`);\n    try {\n        /**\n         * Put together the API we make available when rendering.\n         */\n        const renderAPI: RenderAPI = {\n            trace: traceFn,\n            logger,\n            // Passthrough the request headers\n            headers: {...req.headers},\n        };\n\n        /**\n         * Defer this bit to the render callback.\n         */\n        const {body, status, headers} = await renderEnvironment.render(\n            renderURL,\n            renderAPI,\n        );\n        traceSession.addLabel(\"/result/status\", status);\n        traceSession.addLabel(\"/result/headers\", headers);\n\n        /**\n         * We don't do anything to the response headers other than validate\n         * that redirect-type statuses include a Location header.\n         * 3xx headers that MUST have a Location header are:\n         * - 301\n         * - 302\n         * - 307\n         * - 308\n         */\n        if (\n            [301, 302, 307, 308].includes(status) &&\n            headers[\"Location\"] == null\n        ) {\n            throw new KAError(\n                \"Render resulted in redirection status without required Location header\",\n                Errors.NotAllowed,\n            );\n        }\n        /**\n         * TODO(somewhatabstract): Since we have access to the tracked\n         * headers, we could generate a Vary header for the response when one\n         * is not already included. This would ensure it does the right thing\n         * out-of-the-box while also providing means to support more complex\n         * implementations. This is super low priority though.\n         */\n\n        /**\n         * Finally, we set the headers, status and send the response body.\n         */\n        res.header(headers);\n        res.status(status);\n        res.send(body);\n    } catch (e) {\n        await handleError(\n            \"Render failed\",\n            errorHandler,\n            defaultErrorResponse,\n            req,\n            res,\n            e,\n        );\n    } finally {\n        traceSession.end({level: \"info\"});\n    }\n}\n\n/**\n * Create a render handler.\n *\n * This creates a handler for use with express. The created handler manages\n * executing the render process, a part of which involves invoking a render\n * within the given render environment.\n *\n * @param {IRenderEnvironment} renderEnvironment The environment responsible for\n * performing renders.\n */\nexport const makeRenderHandler =\n    (\n        renderEnvironment: IRenderEnvironment,\n        errorHandler: ?CustomErrorHandlerFn,\n        defaultErrorResponse: ?string,\n    ): Middleware<Request, Response> =>\n    (req: Request, res: Response, next: NextFunction): Promise<void> =>\n        renderHandler(\n            renderEnvironment,\n            errorHandler,\n            defaultErrorResponse,\n            req,\n            res,\n        ).finally(next);\n"],"mappings":";;;;;;AAEA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeA,aAAa,CACxBC,iBAAqC,EACrCC,YAAmC,EACnCC,oBAA6B,EAC7BC,GAAY,EACZC,GAAa,EACA;EACb,MAAMC,MAAM,GAAG,IAAAC,gBAAS,EAACH,GAAG,CAAC;;EAE7B;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMI,OAAO,GAAG,CAACC,MAAc,EAAEC,OAAe,KAC5C,IAAAC,YAAK,EAACF,MAAM,EAAEC,OAAO,EAAEN,GAAG,CAAC;;EAE/B;AACJ;AACA;EACI,MAAMQ,SAAS,GAAGR,GAAG,CAACS,KAAK,CAACC,GAAG;EAC/B,IAAI,OAAOF,SAAS,KAAK,QAAQ,EAAE;IAC/B,IAAIA,SAAS,IAAI,IAAI,EAAE;MACnB,MAAM,IAAIG,cAAO,CAAE,yBAAwB,EAAEC,cAAM,CAACC,YAAY,CAAC;IACrE;IACA,MAAM,IAAIF,cAAO,CACZ,qCAAoC,EACrCC,cAAM,CAACC,YAAY,CACtB;EACL;EACA,MAAMC,YAAY,GAAGV,OAAO,CAAC,QAAQ,EAAG,aAAYI,SAAU,EAAC,CAAC;EAChE,IAAI;IACA;AACR;AACA;IACQ,MAAMO,SAAoB,GAAG;MACzBR,KAAK,EAAEH,OAAO;MACdF,MAAM;MACN;MACAc,OAAO,EAAE;QAAC,GAAGhB,GAAG,CAACgB;MAAO;IAC5B,CAAC;;IAED;AACR;AACA;IACQ,MAAM;MAACC,IAAI;MAAEC,MAAM;MAAEF;IAAO,CAAC,GAAG,MAAMnB,iBAAiB,CAACsB,MAAM,CAC1DX,SAAS,EACTO,SAAS,CACZ;IACDD,YAAY,CAACM,QAAQ,CAAC,gBAAgB,EAAEF,MAAM,CAAC;IAC/CJ,YAAY,CAACM,QAAQ,CAAC,iBAAiB,EAAEJ,OAAO,CAAC;;IAEjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IACI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACK,QAAQ,CAACH,MAAM,CAAC,IACrCF,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI,EAC7B;MACE,MAAM,IAAIL,cAAO,CACb,wEAAwE,EACxEC,cAAM,CAACU,UAAU,CACpB;IACL;IACA;AACR;AACA;AACA;AACA;AACA;AACA;;IAEQ;AACR;AACA;IACQrB,GAAG,CAACsB,MAAM,CAACP,OAAO,CAAC;IACnBf,GAAG,CAACiB,MAAM,CAACA,MAAM,CAAC;IAClBjB,GAAG,CAACuB,IAAI,CAACP,IAAI,CAAC;EAClB,CAAC,CAAC,OAAOQ,CAAC,EAAE;IACR,MAAM,IAAAC,wBAAW,EACb,eAAe,EACf5B,YAAY,EACZC,oBAAoB,EACpBC,GAAG,EACHC,GAAG,EACHwB,CAAC,CACJ;EACL,CAAC,SAAS;IACNX,YAAY,CAACa,GAAG,CAAC;MAACC,KAAK,EAAE;IAAM,CAAC,CAAC;EACrC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,iBAAiB,GAC1B,CACIhC,iBAAqC,EACrCC,YAAmC,EACnCC,oBAA6B,KAEjC,CAACC,GAAY,EAAEC,GAAa,EAAE6B,IAAkB,KAC5ClC,aAAa,CACTC,iBAAiB,EACjBC,YAAY,EACZC,oBAAoB,EACpBC,GAAG,EACHC,GAAG,CACN,CAAC8B,OAAO,CAACD,IAAI,CAAC;AAAC"}