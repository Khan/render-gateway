{"version":3,"sources":["../../../src/gateway/handlers/make-render-handler.js"],"names":["renderHandler","renderEnvironment","req","res","logger","trackHeaderLookup","name","header","traceFn","action","message","renderURL","query","url","Error","traceSession","renderAPI","getHeader","trace","body","status","headers","render","addLabel","send","e","error","json","end","makeRenderHandler"],"mappings":";;;;;;;AAEA;;AACA;;;;;;;;AASA;;;;;;;;;AASA,eAAeA,aAAf,CACIC,iBADJ,EAEIC,GAFJ,EAGIC,GAHJ,EAIiB;AACb,QAAMC,MAAM,GAAG,uBAAUF,GAAV,CAAf;AAEA;;;;;;AAKA,QAAMG,iBAAiB,GAAIC,IAAD,IAA2B;AACjD,WAAOJ,GAAG,CAACK,MAAJ,CAAWD,IAAX,CAAP;AACH,GAFD;AAIA;;;;;;;;AAMA,QAAME,OAAO,GAAG,CAACC,MAAD,EAAiBC,OAAjB,KACZ,mBAAMD,MAAN,EAAcC,OAAd,EAAuBR,GAAvB,CADJ;AAGA;;;;;AAGA,QAAMS,SAAS,GAAGT,GAAG,CAACU,KAAJ,CAAUC,GAA5B;;AACA,MAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;AAC/B,QAAIA,SAAS,IAAI,IAAjB,EAAuB;AACnB,YAAM,IAAIG,KAAJ,CAAW,yBAAX,CAAN;AACH;;AACD,UAAM,IAAIA,KAAJ,CAAW,qCAAX,CAAN;AACH;;AACD,QAAMC,YAAY,GAAGP,OAAO,CAAC,QAAD,EAAY,aAAYG,SAAU,EAAlC,CAA5B;;AACA,MAAI;AACA;;;AAGA,UAAMK,SAAoB,GAAG;AACzBC,MAAAA,SAAS,EAAEZ,iBADc;AAEzBa,MAAAA,KAAK,EAAEV,OAFkB;AAGzBJ,MAAAA;AAHyB,KAA7B;AAMA;;;;AAGA,UAAM;AAACe,MAAAA,IAAD;AAAOC,MAAAA,MAAP;AAAeC,MAAAA;AAAf,QAA0B,MAAMpB,iBAAiB,CAACqB,MAAlB,CAClCX,SADkC,EAElCK,SAFkC,CAAtC;AAIAD,IAAAA,YAAY,CAACQ,QAAb,CAAsB,gBAAtB,EAAwCH,MAAxC;AACAL,IAAAA,YAAY,CAACQ,QAAb,CAAsB,iBAAtB,EAAyCF,OAAzC;AAEA;;;;;;;;;;AAWA;AACA;;AACAlB,IAAAA,GAAG,CAACiB,MAAJ,CAAWA,MAAX;AACAjB,IAAAA,GAAG,CAACqB,IAAJ,CAASL,IAAT;AACH,GAnCD,CAmCE,OAAOM,CAAP,EAAU;AACR;;;AAGA,UAAMC,KAAK,GAAG,yBAAaD,CAAb,CAAd;AAEArB,IAAAA,MAAM,CAACsB,KAAP,CAAa,eAAb,oBAAkCA,KAAlC;AAAyCf,MAAAA;AAAzC;AACAR,IAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqBD,KAArB;AACH,GA3CD,SA2CU;AACNX,IAAAA,YAAY,CAACa,GAAb;AACH;AACJ;AAED;;;;;;;;;;;;AAUO,MAAMC,iBAAiB,GAC1B5B,iBAD6B,IAEG,CAChCC,GADgC,EAEhCC,GAFgC,KAGhBH,aAAa,CAACC,iBAAD,EAAoBC,GAApB,EAAyBC,GAAzB,CAL1B","sourcesContent":["// @flow\nimport type {Middleware} from \"express\";\nimport {extractError} from \"../../shared/index.js\";\nimport {getLogger, trace} from \"../../ka-shared/index.js\";\nimport type {ITraceSession} from \"../../shared/index.js\";\nimport type {\n    Request,\n    Response,\n    IRenderEnvironment,\n    RenderAPI,\n} from \"../types.js\";\n\n/**\n * Handle a request as a render.\n *\n * This method orchestrates the download and setup of a render environment\n * and the subsequent rendering process. The downloaded code is responsible for\n * the actual render operation.\n *\n * This is expected to be wrapped with express-async-handler.\n */\nasync function renderHandler(\n    renderEnvironment: IRenderEnvironment,\n    req: Request,\n    res: Response,\n): Promise<void> {\n    const logger = getLogger(req);\n\n    /**\n     * TODO(somewhatabstract, WEB-1108): Actually track headers and build vary\n     * header.\n     * Encapsulate in other code to make it easily tested.\n     */\n    const trackHeaderLookup = (name: string): ?string => {\n        return req.header(name);\n    };\n\n    /**\n     * TODO(somewhatabstract, WEB-2057): Make sure that we don't leave trace\n     * sessions open on rejection (or otherwise).\n     *\n     * For now, we'll assume callers will tidy up.\n     */\n    const traceFn = (action: string, message: string): ITraceSession =>\n        trace(action, message, req);\n\n    /**\n     * The URL being rendered is given in a query param named, url.\n     */\n    const renderURL = req.query.url;\n    if (typeof renderURL !== \"string\") {\n        if (renderURL == null) {\n            throw new Error(`Missing url query param`);\n        }\n        throw new Error(`More than one url query param given`);\n    }\n    const traceSession = traceFn(\"render\", `Rendering ${renderURL}`);\n    try {\n        /**\n         * Put together the API we make available when rendering.\n         */\n        const renderAPI: RenderAPI = {\n            getHeader: trackHeaderLookup,\n            trace: traceFn,\n            logger,\n        };\n\n        /**\n         * Defer this bit to the render callback.\n         */\n        const {body, status, headers} = await renderEnvironment.render(\n            renderURL,\n            renderAPI,\n        );\n        traceSession.addLabel(\"/result/status\", status);\n        traceSession.addLabel(\"/result/headers\", headers);\n\n        /**\n         * TODO(somewhatabstract, WEB-1108): Validate the status with the\n         * headers.\n         * There are a couple where we know we need certain things to match\n         * 1. If a Vary header is included, we should error to indicate that\n         *    is not allowed\n         * 2. For 301/302 status, we need a `Location` header.\n         *\n         * validateStatusAndHeaders(status, headers);\n         */\n\n        // TODO(somewhatabstract, WEB-1108): Add headers.\n        // TODO(somewhatabstract, WEB-1108): Add Vary header.\n        res.status(status);\n        res.send(body);\n    } catch (e) {\n        /**\n         * Something went wrong. Let's report it!\n         */\n        const error = extractError(e);\n\n        logger.error(\"Render failed\", {...error, renderURL});\n        res.status(500).json(error);\n    } finally {\n        traceSession.end();\n    }\n}\n\n/**\n * Create a render handler.\n *\n * This creates a handler for use with express. The created handler manages\n * executing the render process, a part of which involves invoking a render\n * within the given render environment.\n *\n * @param {IRenderEnvironment} renderEnvironment The environment responsible for\n * performing renders.\n */\nexport const makeRenderHandler = (\n    renderEnvironment: IRenderEnvironment,\n): Middleware<Request, Response> => (\n    req: Request,\n    res: Response,\n): Promise<void> => renderHandler(renderEnvironment, req, res);\n"],"file":"make-render-handler.js"}