{"version":3,"sources":["../../../src/gateway/handlers/make-render-handler.js"],"names":["renderHandler","renderEnvironment","req","res","logger","trackedHeaders","trackHeaderLookup","name","headerValue","header","getTrackedHeaders","Object","assign","traceFn","action","message","renderURL","query","url","Error","traceSession","renderAPI","getHeader","trace","body","status","headers","render","addLabel","includes","send","e","error","json","end","makeRenderHandler"],"mappings":";;;;;;;AAEA;;AACA;;;;;;;;AAUA;;;;;;;;;AASA,eAAeA,aAAf,CACIC,iBADJ,EAEIC,GAFJ,EAGIC,GAHJ,EAIiB;AACb,QAAMC,MAAM,GAAG,uBAAUF,GAAV,CAAf;AAEA;;;;;;;;AAOA,QAAMG,cAAc,GAAG,EAAvB;;AACA,QAAMC,iBAAiB,GAAIC,IAAD,IAA2B;AACjD,UAAMC,WAAW,GAAGN,GAAG,CAACO,MAAJ,CAAWF,IAAX,CAApB;;AACA,QAAIC,WAAW,IAAI,IAAnB,EAAyB;AACrBH,MAAAA,cAAc,CAACE,IAAD,CAAd,GAAuBC,WAAvB;AACH;;AACD,WAAOA,WAAP;AACH,GAND;;AAOA,QAAME,iBAA4C,GAAG,MACjDC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,cAAlB,CADJ;AAGA;;;;;;;;AAMA,QAAMQ,OAAO,GAAG,CAACC,MAAD,EAAiBC,OAAjB,KACZ,mBAAMD,MAAN,EAAcC,OAAd,EAAuBb,GAAvB,CADJ;AAGA;;;;;AAGA,QAAMc,SAAS,GAAGd,GAAG,CAACe,KAAJ,CAAUC,GAA5B;;AACA,MAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;AAC/B,QAAIA,SAAS,IAAI,IAAjB,EAAuB;AACnB,YAAM,IAAIG,KAAJ,CAAW,yBAAX,CAAN;AACH;;AACD,UAAM,IAAIA,KAAJ,CAAW,qCAAX,CAAN;AACH;;AACD,QAAMC,YAAY,GAAGP,OAAO,CAAC,QAAD,EAAY,aAAYG,SAAU,EAAlC,CAA5B;;AACA,MAAI;AACA;;;AAGA,UAAMK,SAAoB,GAAG;AACzBC,MAAAA,SAAS,EAAEhB,iBADc;AAEzBiB,MAAAA,KAAK,EAAEV,OAFkB;AAGzBH,MAAAA,iBAHyB;AAIzBN,MAAAA;AAJyB,KAA7B;AAOA;;;;AAGA,UAAM;AAACoB,MAAAA,IAAD;AAAOC,MAAAA,MAAP;AAAeC,MAAAA;AAAf,QAA0B,MAAMzB,iBAAiB,CAAC0B,MAAlB,CAClCX,SADkC,EAElCK,SAFkC,CAAtC;AAIAD,IAAAA,YAAY,CAACQ,QAAb,CAAsB,gBAAtB,EAAwCH,MAAxC;AACAL,IAAAA,YAAY,CAACQ,QAAb,CAAsB,iBAAtB,EAAyCF,OAAzC;AAEA;;;;;;;;;;AASA,QACI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqBG,QAArB,CAA8BJ,MAA9B,KACAC,OAAO,CAAC,UAAD,CAAP,IAAuB,IAF3B,EAGE;AACE,YAAM,IAAIP,KAAJ,CACF,wEADE,CAAN;AAGH;AACD;;;;;;;;AAQA;;;;;AAGAhB,IAAAA,GAAG,CAACM,MAAJ,CAAWiB,OAAX;AACAvB,IAAAA,GAAG,CAACsB,MAAJ,CAAWA,MAAX;AACAtB,IAAAA,GAAG,CAAC2B,IAAJ,CAASN,IAAT;AACH,GApDD,CAoDE,OAAOO,CAAP,EAAU;AACR;;;AAGA,UAAMC,KAAK,GAAG,yBAAaD,CAAb,CAAd;AAEA3B,IAAAA,MAAM,CAAC4B,KAAP,CAAa,eAAb,oBAAkCA,KAAlC;AAAyChB,MAAAA;AAAzC;AACAb,IAAAA,GAAG,CAACsB,MAAJ,CAAW,GAAX,EAAgBQ,IAAhB,CAAqBD,KAArB;AACH,GA5DD,SA4DU;AACNZ,IAAAA,YAAY,CAACc,GAAb;AACH;AACJ;AAED;;;;;;;;;;;;AAUO,MAAMC,iBAAiB,GAC1BlC,iBAD6B,IAEG,CAChCC,GADgC,EAEhCC,GAFgC,KAGhBH,aAAa,CAACC,iBAAD,EAAoBC,GAApB,EAAyBC,GAAzB,CAL1B","sourcesContent":["// @flow\nimport type {Middleware} from \"express\";\nimport {extractError} from \"../../shared/index.js\";\nimport {getLogger, trace} from \"../../ka-shared/index.js\";\nimport type {ITraceSession} from \"../../shared/index.js\";\nimport type {\n    Request,\n    Response,\n    IRenderEnvironment,\n    RenderAPI,\n    GetTrackedHeadersCallback,\n} from \"../types.js\";\n\n/**\n * Handle a request as a render.\n *\n * This method orchestrates the download and setup of a render environment\n * and the subsequent rendering process. The downloaded code is responsible for\n * the actual render operation.\n *\n * This is expected to be wrapped with express-async-handler.\n */\nasync function renderHandler(\n    renderEnvironment: IRenderEnvironment,\n    req: Request,\n    res: Response,\n): Promise<void> {\n    const logger = getLogger(req);\n\n    /**\n     * We track header access and provide an API to find out which headers were\n     * accessed. This allows service implementations and their rendering code\n     * to properly generate a Vary header or work out what data a page should\n     * embed so that they can implement effective caching and hydration\n     * strategies.\n     */\n    const trackedHeaders = {};\n    const trackHeaderLookup = (name: string): ?string => {\n        const headerValue = req.header(name);\n        if (headerValue != null) {\n            trackedHeaders[name] = headerValue;\n        }\n        return headerValue;\n    };\n    const getTrackedHeaders: GetTrackedHeadersCallback = () =>\n        Object.assign({}, trackedHeaders);\n\n    /**\n     * TODO(somewhatabstract, WEB-2057): Make sure that we don't leave trace\n     * sessions open on rejection (or otherwise).\n     *\n     * For now, we'll assume callers will tidy up.\n     */\n    const traceFn = (action: string, message: string): ITraceSession =>\n        trace(action, message, req);\n\n    /**\n     * The URL being rendered is given in a query param named, url.\n     */\n    const renderURL = req.query.url;\n    if (typeof renderURL !== \"string\") {\n        if (renderURL == null) {\n            throw new Error(`Missing url query param`);\n        }\n        throw new Error(`More than one url query param given`);\n    }\n    const traceSession = traceFn(\"render\", `Rendering ${renderURL}`);\n    try {\n        /**\n         * Put together the API we make available when rendering.\n         */\n        const renderAPI: RenderAPI = {\n            getHeader: trackHeaderLookup,\n            trace: traceFn,\n            getTrackedHeaders,\n            logger,\n        };\n\n        /**\n         * Defer this bit to the render callback.\n         */\n        const {body, status, headers} = await renderEnvironment.render(\n            renderURL,\n            renderAPI,\n        );\n        traceSession.addLabel(\"/result/status\", status);\n        traceSession.addLabel(\"/result/headers\", headers);\n\n        /**\n         * We don't do anything to the response headers other than validate\n         * that redirect-type statuses include a Location header.\n         * 3xx headers that MUST have a Location header are:\n         * - 301\n         * - 302\n         * - 307\n         * - 308\n         */\n        if (\n            [301, 302, 307, 308].includes(status) &&\n            headers[\"Location\"] == null\n        ) {\n            throw new Error(\n                \"Render resulted in redirection status without required Location header\",\n            );\n        }\n        /**\n         * TODO(somewhatabstract): Since we have access to the tracked\n         * headers, we could generate a Vary header for the response when one\n         * is not already included. This would ensure it does the right thing\n         * out-of-the-box while also providing means to support more complex\n         * implementations. This is super low priority though.\n         */\n\n        /**\n         * Finally, we set the headers, status and send the response body.\n         */\n        res.header(headers);\n        res.status(status);\n        res.send(body);\n    } catch (e) {\n        /**\n         * Something went wrong. Let's report it!\n         */\n        const error = extractError(e);\n\n        logger.error(\"Render failed\", {...error, renderURL});\n        res.status(500).json(error);\n    } finally {\n        traceSession.end();\n    }\n}\n\n/**\n * Create a render handler.\n *\n * This creates a handler for use with express. The created handler manages\n * executing the render process, a part of which involves invoking a render\n * within the given render environment.\n *\n * @param {IRenderEnvironment} renderEnvironment The environment responsible for\n * performing renders.\n */\nexport const makeRenderHandler = (\n    renderEnvironment: IRenderEnvironment,\n): Middleware<Request, Response> => (\n    req: Request,\n    res: Response,\n): Promise<void> => renderHandler(renderEnvironment, req, res);\n"],"file":"make-render-handler.js"}