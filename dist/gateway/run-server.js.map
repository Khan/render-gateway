{"version":3,"file":"run-server.js","names":["_express","_interopRequireDefault","require","_expressAsyncHandler","_index","_index2","_makeCheckSecretMiddleware","_logRequestInfoMiddleware","_makeRenderHandler","obj","__esModule","default","runServer","options","authentication","renderEnvironment","uncaughtRenderErrorHandler","defaultRenderErrorResponse","warmUpHandler","remainingOptions","version","getGatewayInfo","app","express","use","makeCommonServiceRouter","makeCheckSecretMiddleware","logRequestInfoMiddleware","get","asyncHandler","makeRenderHandler","set","runtimeMode","getRuntimeMode","logLevel","getLogLevel","gatewayOptions","mode","logger","createLogger","startGateway","exports"],"sources":["../../src/gateway/run-server.js"],"sourcesContent":["// @flow\nimport express from \"express\";\nimport asyncHandler from \"express-async-handler\";\nimport {startGateway, getGatewayInfo, createLogger} from \"../shared/index.js\";\nimport type {RenderGatewayOptions, Request, Response} from \"./types.js\";\nimport type {GatewayOptions} from \"../shared/index.js\";\nimport {\n    getRuntimeMode,\n    makeCommonServiceRouter,\n    getLogLevel,\n} from \"../ka-shared/index.js\";\nimport {makeCheckSecretMiddleware} from \"./middleware/make-check-secret-middleware.js\";\nimport {logRequestInfoMiddleware} from \"./middleware/log-request-info-middleware.js\";\nimport {makeRenderHandler} from \"./handlers/make-render-handler.js\";\n\n/**\n * Run the render-gateway server using the provided options.\n *\n * @param {RenderGatewayOptions} options The options that define how the\n * render gateway will operate.\n * @returns {Promise<void>} The promise of working.\n */\nexport const runServer = async (\n    options: RenderGatewayOptions,\n): Promise<void> => {\n    const {\n        authentication,\n        renderEnvironment,\n        uncaughtRenderErrorHandler,\n        defaultRenderErrorResponse,\n        warmUpHandler,\n        ...remainingOptions\n    } = options;\n    const {version} = getGatewayInfo();\n\n    const app = express<Request, Response>()\n        /**\n         * This sets up the /_api/ route handlers that are used by the KA\n         * deployment system. Has to go before we check secrets.\n         */\n        .use(makeCommonServiceRouter(version, warmUpHandler))\n        /**\n         * This adds a check that requests below this point are coming from\n         * a known source.\n         */\n        .use(await makeCheckSecretMiddleware(authentication))\n        /**\n         * After the secret check, we log info about the request. Since this\n         * is logging, it MUST go after the secret check or we might leak a\n         * secret, and we don't want that.\n         */\n        .use(logRequestInfoMiddleware)\n        /**\n         * This is our render route. See the handler to learn how the magic\n         * happens.\n         */\n        .get(\n            \"/_render\",\n            asyncHandler(\n                makeRenderHandler(\n                    renderEnvironment,\n                    uncaughtRenderErrorHandler,\n                    defaultRenderErrorResponse,\n                ),\n            ),\n        );\n\n    /**\n     * Added this to support forwarding proxies in case we need it, per the\n     * documentation:\n     *\n     * https://cloud.google.com/appengine/docs/standard/nodejs/runtime#https_and_forwarding_proxies\n     */\n    app.set(\"trust proxy\", true);\n\n    // Start the gateway.\n    const runtimeMode = getRuntimeMode();\n    const logLevel = getLogLevel();\n    const gatewayOptions: GatewayOptions = {\n        mode: runtimeMode,\n        logger: createLogger(runtimeMode, logLevel),\n        ...remainingOptions,\n    };\n    await startGateway<Request, Response>(gatewayOptions, app);\n};\n"],"mappings":";;;;;;AACA,IAAAA,QAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,oBAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,MAAA,GAAAF,OAAA;AAGA,IAAAG,OAAA,GAAAH,OAAA;AAKA,IAAAI,0BAAA,GAAAJ,OAAA;AACA,IAAAK,yBAAA,GAAAL,OAAA;AACA,IAAAM,kBAAA,GAAAN,OAAA;AAAoE,SAAAD,uBAAAQ,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMG,SAAS,GAAG,MACrBC,OAA6B,IACb;EAChB,MAAM;IACFC,cAAc;IACdC,iBAAiB;IACjBC,0BAA0B;IAC1BC,0BAA0B;IAC1BC,aAAa;IACb,GAAGC;EACP,CAAC,GAAGN,OAAO;EACX,MAAM;IAACO;EAAO,CAAC,GAAG,IAAAC,qBAAc,GAAE;EAElC,MAAMC,GAAG,GAAG,IAAAC,gBAAO;EACf;AACR;AACA;AACA,KAHQ,CAICC,GAAG,CAAC,IAAAC,+BAAuB,EAACL,OAAO,EAAEF,aAAa,CAAC;EACpD;AACR;AACA;AACA,KAHQ,CAICM,GAAG,CAAC,MAAM,IAAAE,oDAAyB,EAACZ,cAAc,CAAC;EACpD;AACR;AACA;AACA;AACA,KAJQ,CAKCU,GAAG,CAACG,kDAAwB;EAC7B;AACR;AACA;AACA,KAHQ,CAICC,GAAG,CACA,UAAU,EACV,IAAAC,4BAAY,EACR,IAAAC,oCAAiB,EACbf,iBAAiB,EACjBC,0BAA0B,EAC1BC,0BAA0B,CAC7B,CACJ,CACJ;;EAEL;AACJ;AACA;AACA;AACA;AACA;EACIK,GAAG,CAACS,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC;;EAE5B;EACA,MAAMC,WAAW,GAAG,IAAAC,sBAAc,GAAE;EACpC,MAAMC,QAAQ,GAAG,IAAAC,mBAAW,GAAE;EAC9B,MAAMC,cAA8B,GAAG;IACnCC,IAAI,EAAEL,WAAW;IACjBM,MAAM,EAAE,IAAAC,mBAAY,EAACP,WAAW,EAAEE,QAAQ,CAAC;IAC3C,GAAGf;EACP,CAAC;EACD,MAAM,IAAAqB,mBAAY,EAAoBJ,cAAc,EAAEd,GAAG,CAAC;AAC9D,CAAC;AAACmB,OAAA,CAAA7B,SAAA,GAAAA,SAAA"}