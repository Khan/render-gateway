{"version":3,"sources":["../../src/gateway/run-server.js"],"names":["runServer","options","authentication","renderEnvironment","uncaughtRenderErrorHandler","defaultRenderErrorResponse","remainingOptions","version","app","use","logRequestInfoMiddleware","get","set","runtimeMode","logLevel","gatewayOptions","mode","logger"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAGA;;AAKA;;AACA;;AACA;;;;;;;;;;;;;;AAEA;;;;;;;AAOO,MAAMA,SAAS,GAAG,OACrBC,OADqB,KAEL;AAChB,QAAM;AACFC,IAAAA,cADE;AAEFC,IAAAA,iBAFE;AAGFC,IAAAA,0BAHE;AAIFC,IAAAA;AAJE,MAMFJ,OANJ;AAAA,QAKOK,gBALP,4BAMIL,OANJ;;AAOA,QAAM;AAACM,IAAAA;AAAD,MAAY,4BAAlB;AAEA,QAAMC,GAAG,GAAG,wBACPC,GADO;AAEJ;;;;AAIA,uCAAwBF,OAAxB,CANI;AAQR;;;;AARQ,GAYPE,GAZO,CAYH,MAAM,0DAA0BP,cAA1B,CAZH;AAaR;;;;;AAbQ,GAkBPO,GAlBO,CAkBHC,kDAlBG;AAmBR;;;;AAnBQ,GAuBPC,GAvBO,CAwBJ,UAxBI,EAyBJ,kCACI,0CACIR,iBADJ,EAEIC,0BAFJ,EAGIC,0BAHJ,CADJ,CAzBI,CAAZ;AAkCA;;;;;;;AAMAG,EAAAA,GAAG,CAACI,GAAJ,CAAQ,aAAR,EAAuB,IAAvB,EAlDgB,CAoDhB;;AACA,QAAMC,WAAW,GAAG,6BAApB;AACA,QAAMC,QAAQ,GAAG,0BAAjB;;AACA,QAAMC,cAA8B;AAChCC,IAAAA,IAAI,EAAEH,WAD0B;AAEhCI,IAAAA,MAAM,EAAE,yBAAaJ,WAAb,EAA0BC,QAA1B;AAFwB,KAG7BR,gBAH6B,CAApC;;AAKA,QAAM,yBAAgCS,cAAhC,EAAgDP,GAAhD,CAAN;AACH,CA/DM","sourcesContent":["// @flow\nimport express from \"express\";\nimport asyncHandler from \"express-async-handler\";\nimport {startGateway, getGatewayInfo, createLogger} from \"../shared/index.js\";\nimport type {RenderGatewayOptions, Request, Response} from \"./types.js\";\nimport type {GatewayOptions} from \"../shared/index.js\";\nimport {\n    getRuntimeMode,\n    makeCommonServiceRouter,\n    getLogLevel,\n} from \"../ka-shared/index.js\";\nimport {makeCheckSecretMiddleware} from \"./middleware/make-check-secret-middleware.js\";\nimport {logRequestInfoMiddleware} from \"./middleware/log-request-info-middleware.js\";\nimport {makeRenderHandler} from \"./handlers/make-render-handler.js\";\n\n/**\n * Run the render-gateway server using the provided options.\n *\n * @param {RenderGatewayOptions} options The options that define how the\n * render gateway will operate.\n * @returns {Promise<void>} The promise of working.\n */\nexport const runServer = async (\n    options: RenderGatewayOptions,\n): Promise<void> => {\n    const {\n        authentication,\n        renderEnvironment,\n        uncaughtRenderErrorHandler,\n        defaultRenderErrorResponse,\n        ...remainingOptions\n    } = options;\n    const {version} = getGatewayInfo();\n\n    const app = express<Request, Response>()\n        .use(\n            /**\n             * This sets up the /_api/ route handlers that are used by the KA\n             * deployment system.\n             */\n            makeCommonServiceRouter(version),\n        )\n        /**\n         * This adds a check that requests below this point are coming from\n         * a known source.\n         */\n        .use(await makeCheckSecretMiddleware(authentication))\n        /**\n         * After the secret check, we log info about the request. Since this\n         * is logging, it MUST go after the secret check or we might leak a\n         * secret, and we don't want that.\n         */\n        .use(logRequestInfoMiddleware)\n        /**\n         * This is our render route. See the handler to learn how the magic\n         * happens.\n         */\n        .get(\n            \"/_render\",\n            asyncHandler(\n                makeRenderHandler(\n                    renderEnvironment,\n                    uncaughtRenderErrorHandler,\n                    defaultRenderErrorResponse,\n                ),\n            ),\n        );\n\n    /**\n     * Added this to support forwarding proxies in case we need it, per the\n     * documentation:\n     *\n     * https://cloud.google.com/appengine/docs/standard/nodejs/runtime#https_and_forwarding_proxies\n     */\n    app.set(\"trust proxy\", true);\n\n    // Start the gateway.\n    const runtimeMode = getRuntimeMode();\n    const logLevel = getLogLevel();\n    const gatewayOptions: GatewayOptions = {\n        mode: runtimeMode,\n        logger: createLogger(runtimeMode, logLevel),\n        ...remainingOptions,\n    };\n    await startGateway<Request, Response>(gatewayOptions, app);\n};\n"],"file":"run-server.js"}