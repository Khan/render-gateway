{"version":3,"file":"make-request.js","names":["makeRequest","options","logger","url","request","makeUnbufferedNoCacheRequest","Object","defineProperty","get","_aborted","cachePlugin","isCacheable","asCachedRequest","asUncachedRequest"],"sources":["../../src/gateway/make-request.js"],"sourcesContent":["// @flow\nimport type {Response as SuperAgentResponse} from \"superagent\";\nimport type {RequestOptions, AbortablePromise} from \"./types.js\";\nimport {isCacheable} from \"./is-cacheable.js\";\nimport type {Logger} from \"../shared/index.js\";\nimport {makeUnbufferedNoCacheRequest} from \"./make-unbuffered-no-cache-request.js\";\nimport {asCachedRequest, asUncachedRequest} from \"./requests-from-cache.js\";\n\n/**\n * Make a request for a given URL\n *\n * Could resolve from cache if caching is enabled and the request has already\n * been fulfilled once. Otherwise, this creates a new request for the URL.\n *\n * The request will resolve with an additional property, which will\n * indicate if it was resolved from cache or not.\n *\n * @param {RequestOptions} options The options used to configure the request.\n * @param {Logger} logger The logger to use.\n * @param {string} url The URL to be requested.\n * @returns {Promise<SuperAgentResponse>} A superagent request for the URL.\n */\nexport const makeRequest = (\n    options: RequestOptions,\n    logger: Logger,\n    url: string,\n): AbortablePromise<SuperAgentResponse> => {\n    /**\n     * Create the base request with our various options.\n     */\n    const request = makeUnbufferedNoCacheRequest(options, logger, url);\n    // We know request doesn't have this, but we want it to have this, so we're\n    // adding it.\n    // $FlowIgnore[prop-missing]\n    Object.defineProperty(request, \"aborted\", {\n        // We happen to know that this internal property exists.\n        // $FlowIgnore[prop-missing]\n        get: () => request._aborted,\n    });\n\n    /**\n     * We only add caching support if we were given a cache to use.\n     * We also make sure that this request is something we want to cache.\n     * We default to JS files only, but this can be overridden in the gateway\n     * options.\n     */\n    if (options.cachePlugin && isCacheable(url, options.isCacheable)) {\n        /**\n         * If we get here, we are caching this request.\n         */\n        return asCachedRequest(options, request);\n    }\n\n    /**\n     * We're not caching this request, so let's just not set caching up.\n     */\n    return asUncachedRequest(request);\n};\n"],"mappings":";;;;;;;AAGA;;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,WAAW,GAAG,CACvBC,OADuB,EAEvBC,MAFuB,EAGvBC,GAHuB,KAIgB;EACvC;AACJ;AACA;EACI,MAAMC,OAAO,GAAG,IAAAC,0DAAA,EAA6BJ,OAA7B,EAAsCC,MAAtC,EAA8CC,GAA9C,CAAhB,CAJuC,CAKvC;EACA;EACA;;EACAG,MAAM,CAACC,cAAP,CAAsBH,OAAtB,EAA+B,SAA/B,EAA0C;IACtC;IACA;IACAI,GAAG,EAAE,MAAMJ,OAAO,CAACK;EAHmB,CAA1C;EAMA;AACJ;AACA;AACA;AACA;AACA;;EACI,IAAIR,OAAO,CAACS,WAAR,IAAuB,IAAAC,wBAAA,EAAYR,GAAZ,EAAiBF,OAAO,CAACU,WAAzB,CAA3B,EAAkE;IAC9D;AACR;AACA;IACQ,OAAO,IAAAC,kCAAA,EAAgBX,OAAhB,EAAyBG,OAAzB,CAAP;EACH;EAED;AACJ;AACA;;;EACI,OAAO,IAAAS,oCAAA,EAAkBT,OAAlB,CAAP;AACH,CAnCM"}