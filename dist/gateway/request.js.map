{"version":3,"file":"request.js","names":["_makeRequest","require","_requestsFromCache","_index","DefaultRequestOptions","retries","timeout","exports","request","logger","url","options","retryCount","retryTracker","err","res","_options$shouldRetry","shouldRetry","call","optionsToUse","requestLogger","child","traceSession","trace","addLabel","abortableRequest","makeRequest","finalizedPromise","then","_options$getCacheID","currentRequestCacheID","getCacheID","getResponseSource","catch","e","error","extractError","finally","end","finalizedRequest","abort","Object","defineProperty","get","aborted"],"sources":["../../src/gateway/request.js"],"sourcesContent":["// @flow\nimport type {Response, CallbackHandler} from \"superagent\";\nimport type {RequestOptions, AbortablePromise} from \"./types.js\";\nimport type {Logger} from \"../shared/types.js\";\nimport {makeRequest} from \"./make-request.js\";\nimport {getResponseSource} from \"./requests-from-cache.js\";\nimport {extractError, trace} from \"../shared/index.js\";\n\n/**\n * The defaults used for request options.\n */\nexport const DefaultRequestOptions: RequestOptions = {\n    retries: 2,\n    timeout: 60000,\n};\n\n/**\n * Request a URL.\n *\n * NOTE: The AbortablePromise is only shallowly abortable. If any standard\n * promise methods are called on this, the promise they return no longer will\n * have the abort function. Therefore, you'll need to readd it.\n */\nexport const request = (\n    logger: Logger,\n    url: string,\n    options?: RequestOptions,\n): AbortablePromise<Response> => {\n    let retryCount = 0;\n    const retryTracker: CallbackHandler = (err, res) => {\n        if (err != null) {\n            // Only update the count on errors.\n            // This gets called even for successful requests.\n            retryCount++;\n        }\n        return options?.shouldRetry?.(err, res);\n    };\n    const optionsToUse = {\n        ...DefaultRequestOptions,\n        ...options,\n        shouldRetry: retryTracker,\n    };\n    const requestLogger = logger.child({url});\n\n    /**\n     * We don't already have this request in flight, so let's make a new\n     * request.\n     *\n     * First, we start a trace.\n     * Then we make the request.\n     * Then we capture the abort function so we can reattach it later.\n     */\n    const traceSession = trace(`request`, url, requestLogger);\n    traceSession.addLabel(\"url\", url);\n    const abortableRequest = makeRequest(optionsToUse, requestLogger, url);\n\n    /**\n     * Now, let's do the infrastructure bits for tracing this request with\n     * some useful logging data and removing completed requests from our\n     * in flight list.\n     */\n    const finalizedPromise = abortableRequest\n        .then((res) => {\n            const currentRequestCacheID = options?.getCacheID?.();\n            traceSession.addLabel(\n                \"source\",\n                getResponseSource(res, currentRequestCacheID),\n            );\n            traceSession.addLabel(\"successful\", true);\n            return res;\n        })\n        .catch((e) => {\n            // Let's log why this request failed since JSDOM may not share that\n            // info with us.\n            requestLogger.error(\"Request failed\", extractError(e));\n            throw e;\n        })\n        .finally(() => {\n            traceSession.addLabel(\"retries\", retryCount);\n            traceSession.end();\n        });\n\n    /**\n     * Finally, we need to turn the promise back into an abortable and add it\n     * to our list of in flight requests.\n     */\n    const finalizedRequest: AbortablePromise<Response> =\n        (finalizedPromise: any);\n    finalizedRequest.abort = () => abortableRequest.abort();\n    Object.defineProperty(finalizedRequest, \"aborted\", {\n        get: () => abortableRequest.aborted,\n    });\n    return finalizedRequest;\n};\n"],"mappings":";;;;;;AAIA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,kBAAA,GAAAD,OAAA;AACA,IAAAE,MAAA,GAAAF,OAAA;AAEA;AACA;AACA;AACO,MAAMG,qBAAqC,GAAG;EACjDC,OAAO,EAAE,CAAC;EACVC,OAAO,EAAE;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AANAC,OAAA,CAAAH,qBAAA,GAAAA,qBAAA;AAOO,MAAMI,OAAO,GAAGA,CACnBC,MAAc,EACdC,GAAW,EACXC,OAAwB,KACK;EAC7B,IAAIC,UAAU,GAAG,CAAC;EAClB,MAAMC,YAA6B,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAAA,IAAAC,oBAAA;IAChD,IAAIF,GAAG,IAAI,IAAI,EAAE;MACb;MACA;MACAF,UAAU,EAAE;IAChB;IACA,OAAOD,OAAO,aAAPA,OAAO,wBAAAK,oBAAA,GAAPL,OAAO,CAAEM,WAAW,cAAAD,oBAAA,uBAApBA,oBAAA,CAAAE,IAAA,CAAAP,OAAO,EAAgBG,GAAG,EAAEC,GAAG,CAAC;EAC3C,CAAC;EACD,MAAMI,YAAY,GAAG;IACjB,GAAGf,qBAAqB;IACxB,GAAGO,OAAO;IACVM,WAAW,EAAEJ;EACjB,CAAC;EACD,MAAMO,aAAa,GAAGX,MAAM,CAACY,KAAK,CAAC;IAACX;EAAG,CAAC,CAAC;;EAEzC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMY,YAAY,GAAG,IAAAC,YAAK,EAAE,SAAQ,EAAEb,GAAG,EAAEU,aAAa,CAAC;EACzDE,YAAY,CAACE,QAAQ,CAAC,KAAK,EAAEd,GAAG,CAAC;EACjC,MAAMe,gBAAgB,GAAG,IAAAC,wBAAW,EAACP,YAAY,EAAEC,aAAa,EAAEV,GAAG,CAAC;;EAEtE;AACJ;AACA;AACA;AACA;EACI,MAAMiB,gBAAgB,GAAGF,gBAAgB,CACpCG,IAAI,CAAEb,GAAG,IAAK;IAAA,IAAAc,mBAAA;IACX,MAAMC,qBAAqB,GAAGnB,OAAO,aAAPA,OAAO,wBAAAkB,mBAAA,GAAPlB,OAAO,CAAEoB,UAAU,cAAAF,mBAAA,uBAAnBA,mBAAA,CAAAX,IAAA,CAAAP,OAAO,CAAgB;IACrDW,YAAY,CAACE,QAAQ,CACjB,QAAQ,EACR,IAAAQ,oCAAiB,EAACjB,GAAG,EAAEe,qBAAqB,CAAC,CAChD;IACDR,YAAY,CAACE,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC;IACzC,OAAOT,GAAG;EACd,CAAC,CAAC,CACDkB,KAAK,CAAEC,CAAC,IAAK;IACV;IACA;IACAd,aAAa,CAACe,KAAK,CAAC,gBAAgB,EAAE,IAAAC,mBAAY,EAACF,CAAC,CAAC,CAAC;IACtD,MAAMA,CAAC;EACX,CAAC,CAAC,CACDG,OAAO,CAAC,MAAM;IACXf,YAAY,CAACE,QAAQ,CAAC,SAAS,EAAEZ,UAAU,CAAC;IAC5CU,YAAY,CAACgB,GAAG,EAAE;EACtB,CAAC,CAAC;;EAEN;AACJ;AACA;AACA;EACI,MAAMC,gBAA4C,GAC7CZ,gBAAsB;EAC3BY,gBAAgB,CAACC,KAAK,GAAG,MAAMf,gBAAgB,CAACe,KAAK,EAAE;EACvDC,MAAM,CAACC,cAAc,CAACH,gBAAgB,EAAE,SAAS,EAAE;IAC/CI,GAAG,EAAEA,CAAA,KAAMlB,gBAAgB,CAACmB;EAChC,CAAC,CAAC;EACF,OAAOL,gBAAgB;AAC3B,CAAC;AAAChC,OAAA,CAAAC,OAAA,GAAAA,OAAA"}