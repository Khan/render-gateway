{"version":3,"sources":["../../src/gateway/request.js"],"names":["DefaultRequestOptions","retries","timeout","request","logger","url","options","retryCount","retryTracker","err","res","shouldRetry","optionsToUse","requestLogger","child","traceSession","addLabel","abortableRequest","finalizedPromise","then","currentRequestCacheID","getCacheID","catch","e","error","finally","end","finalizedRequest","abort","Object","defineProperty","get","aborted"],"mappings":";;;;;;;AAIA;;AACA;;AACA;;;;;;;;AAEA;AACA;AACA;AACO,MAAMA,qBAAqC,GAAG;AACjDC,EAAAA,OAAO,EAAE,CADwC;AAEjDC,EAAAA,OAAO,EAAE;AAFwC,CAA9C;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACO,MAAMC,OAAO,GAAG,CACnBC,MADmB,EAEnBC,GAFmB,EAGnBC,OAHmB,KAIU;AAC7B,MAAIC,UAAU,GAAG,CAAjB;;AACA,QAAMC,YAAY,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAAA;;AAC/B,QAAID,GAAG,IAAI,IAAX,EAAiB;AACb;AACA;AACAF,MAAAA,UAAU;AACb;;AACD,WAAOD,OAAP,aAAOA,OAAP,+CAAOA,OAAO,CAAEK,WAAhB,yDAAO,0BAAAL,OAAO,EAAgBG,GAAhB,EAAqBC,GAArB,CAAd;AACH,GAPD;;AAQA,QAAME,YAAY,iDACXZ,qBADW,GAEXM,OAFW;AAGdK,IAAAA,WAAW,EAAEH;AAHC,IAAlB;;AAKA,QAAMK,aAAa,GAAGT,MAAM,CAACU,KAAP,CAAa;AAACT,IAAAA;AAAD,GAAb,CAAtB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,QAAMU,YAAY,GAAG,kBAAO,SAAP,EAAiBV,GAAjB,EAAsBQ,aAAtB,CAArB;AACAE,EAAAA,YAAY,CAACC,QAAb,CAAsB,KAAtB,EAA6BX,GAA7B;AACA,QAAMY,gBAAgB,GAAG,8BAAYL,YAAZ,EAA0BC,aAA1B,EAAyCR,GAAzC,CAAzB;AAEA;AACJ;AACA;AACA;AACA;;AACI,QAAMa,gBAAgB,GAAGD,gBAAgB,CACpCE,IADoB,CACdT,GAAD,IAAS;AAAA;;AACX,UAAMU,qBAAqB,GAAGd,OAAH,aAAGA,OAAH,8CAAGA,OAAO,CAAEe,UAAZ,wDAAG,yBAAAf,OAAO,CAArC;AACAS,IAAAA,YAAY,CAACC,QAAb,CACI,QADJ,EAEI,0CAAkBN,GAAlB,EAAuBU,qBAAvB,CAFJ;AAIAL,IAAAA,YAAY,CAACC,QAAb,CAAsB,YAAtB,EAAoC,IAApC;AACA,WAAON,GAAP;AACH,GAToB,EAUpBY,KAVoB,CAUbC,CAAD,IAAO;AACV;AACA;AACAV,IAAAA,aAAa,CAACW,KAAd,CAAoB,gBAApB,EAAsC,yBAAaD,CAAb,CAAtC;AACA,UAAMA,CAAN;AACH,GAfoB,EAgBpBE,OAhBoB,CAgBZ,MAAM;AACXV,IAAAA,YAAY,CAACC,QAAb,CAAsB,SAAtB,EAAiCT,UAAjC;AACAQ,IAAAA,YAAY,CAACW,GAAb;AACH,GAnBoB,CAAzB;AAqBA;AACJ;AACA;AACA;;AACI,QAAMC,gBAA4C,GAAIT,gBAAtD;;AACAS,EAAAA,gBAAgB,CAACC,KAAjB,GAAyB,MAAMX,gBAAgB,CAACW,KAAjB,EAA/B;;AACAC,EAAAA,MAAM,CAACC,cAAP,CAAsBH,gBAAtB,EAAwC,SAAxC,EAAmD;AAC/CI,IAAAA,GAAG,EAAE,MAAMd,gBAAgB,CAACe;AADmB,GAAnD;AAGA,SAAOL,gBAAP;AACH,CArEM","sourcesContent":["// @flow\nimport type {Response} from \"superagent\";\nimport type {RequestOptions, AbortablePromise} from \"./types.js\";\nimport type {Logger} from \"../shared/types.js\";\nimport {makeRequest} from \"./make-request.js\";\nimport {getResponseSource} from \"./requests-from-cache.js\";\nimport {extractError, trace} from \"../shared/index.js\";\n\n/**\n * The defaults used for request options.\n */\nexport const DefaultRequestOptions: RequestOptions = {\n    retries: 2,\n    timeout: 60000,\n};\n\n/**\n * Request a URL.\n *\n * NOTE: The AbortablePromise is only shallowly abortable. If any standard\n * promise methods are called on this, the promise they return no longer will\n * have the abort function. Therefore, you'll need to readd it.\n */\nexport const request = (\n    logger: Logger,\n    url: string,\n    options?: RequestOptions,\n): AbortablePromise<Response> => {\n    let retryCount = 0;\n    const retryTracker = (err, res) => {\n        if (err != null) {\n            // Only update the count on errors.\n            // This gets called even for successful requests.\n            retryCount++;\n        }\n        return options?.shouldRetry?.(err, res);\n    };\n    const optionsToUse = {\n        ...DefaultRequestOptions,\n        ...options,\n        shouldRetry: retryTracker,\n    };\n    const requestLogger = logger.child({url});\n\n    /**\n     * We don't already have this request in flight, so let's make a new\n     * request.\n     *\n     * First, we start a trace.\n     * Then we make the request.\n     * Then we capture the abort function so we can reattach it later.\n     */\n    const traceSession = trace(`request`, url, requestLogger);\n    traceSession.addLabel(\"url\", url);\n    const abortableRequest = makeRequest(optionsToUse, requestLogger, url);\n\n    /**\n     * Now, let's do the infrastructure bits for tracing this request with\n     * some useful logging data and removing completed requests from our\n     * in flight list.\n     */\n    const finalizedPromise = abortableRequest\n        .then((res) => {\n            const currentRequestCacheID = options?.getCacheID?.();\n            traceSession.addLabel(\n                \"source\",\n                getResponseSource(res, currentRequestCacheID),\n            );\n            traceSession.addLabel(\"successful\", true);\n            return res;\n        })\n        .catch((e) => {\n            // Let's log why this request failed since JSDOM may not share that\n            // info with us.\n            requestLogger.error(\"Request failed\", extractError(e));\n            throw e;\n        })\n        .finally(() => {\n            traceSession.addLabel(\"retries\", retryCount);\n            traceSession.end();\n        });\n\n    /**\n     * Finally, we need to turn the promise back into an abortable and add it\n     * to our list of in flight requests.\n     */\n    const finalizedRequest: AbortablePromise<Response> = (finalizedPromise: any);\n    finalizedRequest.abort = () => abortableRequest.abort();\n    Object.defineProperty(finalizedRequest, \"aborted\", {\n        get: () => abortableRequest.aborted,\n    });\n    return finalizedRequest;\n};\n"],"file":"request.js"}