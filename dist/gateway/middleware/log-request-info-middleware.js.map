{"version":3,"sources":["../../../src/gateway/middleware/log-request-info-middleware.js"],"names":["logRequestInfoMiddleware","req","res","next","flattenedHeaders","Object","keys","headers","reduce","key","info","url","method"],"mappings":";;;;;;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,wBAAT,CACHC,GADG,EAEHC,GAFG,EAGHC,IAHG,EAIC;AACJ,QAAMC,gBAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYL,GAAG,CAACM,OAAhB,EAAyBC,MAAzB,CACrB,CAACD,OAAD,EAAUE,GAAV,KAAkBF,OAAO,GAAI,GAAEE,GAAI,KAAIR,GAAG,CAACM,OAAJ,CAAYE,GAAZ,CAAiB,IADnC,EAErB,EAFqB,CAAzB;AAIA,wBAAUR,GAAV,EAAeS,IAAf,CAAqB,qBAAoBT,GAAG,CAACU,GAAI,EAAjD,EAAoD;AAChDJ,IAAAA,OAAO,EAAEH,gBADuC;AAEhDQ,IAAAA,MAAM,EAAEX,GAAG,CAACW,MAFoC;AAGhDD,IAAAA,GAAG,EAAEV,GAAG,CAACU;AAHuC,GAApD;AAMAR,EAAAA,IAAI;AACP","sourcesContent":["// @flow\nimport type {$Response, NextFunction} from \"express\";\nimport {getLogger} from \"../../shared/index.js\";\n\nimport type {Request} from \"../types.js\";\n\n/**\n * Simple middleware that logs some info about the incoming request.\n *\n * We flatten the headers since they give us problems with exporting\n * our info logs to bigquery if we don't. The issue is that we end up\n * with a bigquery column per unique header name, and so we run out of\n * columns.\n */\nexport function logRequestInfoMiddleware<Req: Request, Res: $Response>(\n    req: Req,\n    res: Res,\n    next: NextFunction,\n): void {\n    const flattenedHeaders = Object.keys(req.headers).reduce(\n        (headers, key) => headers + `${key}: ${req.headers[key]}\\n`,\n        \"\",\n    );\n    getLogger(req).info(`Request received: ${req.url}`, {\n        headers: flattenedHeaders,\n        method: req.method,\n        url: req.url,\n    });\n\n    next();\n}\n"],"file":"log-request-info-middleware.js"}