{"version":3,"sources":["../../../src/gateway/middleware/make-check-secret-middleware.js"],"names":["redactSecretHeader","req","headerName","headers","toLowerCase","header","KAError","Errors","NotAllowed","makeProductionMiddleware","options","secretKey","deprecatedSecretKey","cryptoKeyPath","secrets","secret","deprecatedSecret","NotFound","res","next","requestSecret","status","send","error","makeDevelopmentMiddleware","Promise","resolve","logger","warn","debug","info","makeCheckSecretMiddleware","authenticationOptions"],"mappings":"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","sourcesContent":["// @flow\nimport type {Middleware, $Response, NextFunction} from \"express\";\nimport {getRuntimeMode, Errors} from \"../../ka-shared/index.js\";\nimport {getLogger, KAError} from \"../../shared/index.js\";\nimport {getSecrets} from \"../get-secrets.js\";\n\nimport type {AuthenticationOptions, Request} from \"../types.js\";\n\nconst redactSecretHeader = <Req: Request>(req: Req, headerName: string) => {\n    /**\n     * We delete the header because we don't want it getting logged.\n     */\n    delete req.headers[headerName.toLowerCase()];\n    /**\n     * Let's make sure that secret is gone.\n     */\n    if (req.header(headerName) != null) {\n        throw new KAError(\n            \"Secret header could not be redacted!\",\n            Errors.NotAllowed,\n        );\n    }\n};\n\nasync function makeProductionMiddleware<Req: Request, Res: $Response>(\n    options: AuthenticationOptions,\n): Promise<Middleware<Req, Res>> {\n    /**\n     * We look up the secret when the middleware is created. That means\n     * that if the secret changes, the server needs to be\n     * restarted/refreshed somehow.\n     *\n     * TODO(somewhatabstract, WEB-1410): Add ability to trigger refresh of\n     * server - likely just a killswitch to kill an instance so that GAE spins\n     * up new ones.\n     */\n    const {secretKey, deprecatedSecretKey, headerName, cryptoKeyPath} = options;\n    const secrets = await getSecrets(cryptoKeyPath);\n    const secret = secrets[secretKey];\n    const deprecatedSecret =\n        deprecatedSecretKey == null ? secret : secrets[deprecatedSecretKey];\n    if (secret == null) {\n        /**\n         * We don't check if the deprecated secret is set or not. If it isn't\n         * that's not a critical error.\n         */\n        throw new KAError(\"Unable to load secret\", Errors.NotFound);\n    }\n\n    return function (req: Req, res: Res, next: NextFunction): void {\n        const requestSecret = req.header(headerName);\n\n        /**\n         * We delete the header because we don't want it getting logged.\n         * However, we need to be aware of the case to make sure we really do\n         * delete it - headers are all lowercase in the express object.\n         */\n        redactSecretHeader(req, headerName);\n\n        if (requestSecret !== secret && requestSecret !== deprecatedSecret) {\n            res.status(401).send({error: \"Missing or invalid secret\"});\n            return;\n        }\n\n        next();\n    };\n}\n\nfunction makeDevelopmentMiddleware<Req: Request, Res: $Response>(\n    options: ?AuthenticationOptions,\n): Promise<Middleware<Req, Res>> {\n    /**\n     * The secrets middleware is a noop when not in production.\n     */\n    return Promise.resolve(function (\n        req: Req,\n        res: Res,\n        next: NextFunction,\n    ): void {\n        const logger = getLogger(req);\n        /**\n         * If authentication options were given, let's log a message if the\n         * expected header is omitted. This is a valid thing to do in dev since\n         * we don't authenticate dev requests, but it is also useful to know\n         * during testing if the header is missing.\n         */\n        if (options != null) {\n            if (req.header(options.headerName) == null) {\n                logger.warn(\n                    \"Authentication header was not included in request.\",\n                    {\n                        header: options.headerName,\n                    },\n                );\n            } else {\n                /**\n                 * We delete the header because we don't want it getting logged.\n                 */\n                redactSecretHeader(req, options.headerName);\n\n                logger.debug(\n                    \"Authentication header present but ignored in current runtime mode\",\n                    {\n                        header: options.headerName,\n                    },\n                );\n            }\n        } else {\n            logger.info(\"Authentication is not configured for this service.\");\n        }\n        next();\n    });\n}\n\n/**\n * Make the middleware to verify a request's authentication secret.\n *\n * This is a noop when not in production, otherwise this loads the appropriate\n * secret as identified by the options and then uses the configured header name\n * to identify the request header that it is to be matched against.\n */\nexport function makeCheckSecretMiddleware<Req: Request, Res: $Response>(\n    authenticationOptions?: AuthenticationOptions,\n): Promise<Middleware<Req, Res>> {\n    if (authenticationOptions != null && getRuntimeMode() === \"production\") {\n        return makeProductionMiddleware(authenticationOptions);\n    }\n\n    return makeDevelopmentMiddleware(authenticationOptions);\n}\n"],"file":"make-check-secret-middleware.js"}