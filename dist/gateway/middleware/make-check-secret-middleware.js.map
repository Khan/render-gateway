{"version":3,"file":"make-check-secret-middleware.js","names":["_index","require","_index2","_getSecrets","redactSecretHeader","req","headerName","headers","toLowerCase","header","KAError","Errors","NotAllowed","makeProductionMiddleware","options","secretKey","deprecatedSecretKey","cryptoKeyPath","secrets","getSecrets","secret","deprecatedSecret","NotFound","res","next","requestSecret","status","send","error","makeDevelopmentMiddleware","Promise","resolve","logger","getLogger","warn","debug","info","makeCheckSecretMiddleware","authenticationOptions","getRuntimeMode"],"sources":["../../../src/gateway/middleware/make-check-secret-middleware.js"],"sourcesContent":["// @flow\nimport type {Middleware, $Response, NextFunction} from \"express\";\nimport {getRuntimeMode, Errors} from \"../../ka-shared/index.js\";\nimport {getLogger, KAError} from \"../../shared/index.js\";\nimport {getSecrets} from \"../get-secrets.js\";\n\nimport type {AuthenticationOptions, Request} from \"../types.js\";\n\nconst redactSecretHeader = <Req: Request>(req: Req, headerName: string) => {\n    /**\n     * We delete the header because we don't want it getting logged.\n     */\n    delete req.headers[headerName.toLowerCase()];\n    /**\n     * Let's make sure that secret is gone.\n     */\n    if (req.header(headerName) != null) {\n        throw new KAError(\n            \"Secret header could not be redacted!\",\n            Errors.NotAllowed,\n        );\n    }\n};\n\nasync function makeProductionMiddleware<Req: Request, Res: $Response>(\n    options: AuthenticationOptions,\n): Promise<Middleware<Req, Res>> {\n    /**\n     * We look up the secret when the middleware is created. That means\n     * that if the secret changes, the server needs to be\n     * restarted/refreshed somehow.\n     *\n     * TODO(somewhatabstract, WEB-1410): Add ability to trigger refresh of\n     * server - likely just a killswitch to kill an instance so that GAE spins\n     * up new ones.\n     */\n    const {secretKey, deprecatedSecretKey, headerName, cryptoKeyPath} = options;\n    const secrets = await getSecrets(cryptoKeyPath);\n    const secret = secrets[secretKey];\n    const deprecatedSecret =\n        deprecatedSecretKey == null ? secret : secrets[deprecatedSecretKey];\n    if (secret == null) {\n        /**\n         * We don't check if the deprecated secret is set or not. If it isn't\n         * that's not a critical error.\n         */\n        throw new KAError(\"Unable to load secret\", Errors.NotFound);\n    }\n\n    return function (req: Req, res: Res, next: NextFunction): void {\n        const requestSecret = req.header(headerName);\n\n        /**\n         * We delete the header because we don't want it getting logged.\n         * However, we need to be aware of the case to make sure we really do\n         * delete it - headers are all lowercase in the express object.\n         */\n        redactSecretHeader(req, headerName);\n\n        if (requestSecret !== secret && requestSecret !== deprecatedSecret) {\n            res.status(401).send({error: \"Missing or invalid secret\"});\n            return;\n        }\n\n        next();\n    };\n}\n\nfunction makeDevelopmentMiddleware<Req: Request, Res: $Response>(\n    options: ?AuthenticationOptions,\n): Promise<Middleware<Req, Res>> {\n    /**\n     * The secrets middleware is a noop when not in production.\n     */\n    return Promise.resolve(function (\n        req: Req,\n        res: Res,\n        next: NextFunction,\n    ): void {\n        const logger = getLogger(req);\n        /**\n         * If authentication options were given, let's log a message if the\n         * expected header is omitted. This is a valid thing to do in dev since\n         * we don't authenticate dev requests, but it is also useful to know\n         * during testing if the header is missing.\n         */\n        if (options != null) {\n            if (req.header(options.headerName) == null) {\n                logger.warn(\n                    \"Authentication header was not included in request.\",\n                    {\n                        header: options.headerName,\n                    },\n                );\n            } else {\n                /**\n                 * We delete the header because we don't want it getting logged.\n                 */\n                redactSecretHeader(req, options.headerName);\n\n                logger.debug(\n                    \"Authentication header present but ignored in current runtime mode\",\n                    {\n                        header: options.headerName,\n                    },\n                );\n            }\n        } else {\n            logger.info(\"Authentication is not configured for this service.\");\n        }\n        next();\n    });\n}\n\n/**\n * Make the middleware to verify a request's authentication secret.\n *\n * This is a noop when not in production, otherwise this loads the appropriate\n * secret as identified by the options and then uses the configured header name\n * to identify the request header that it is to be matched against.\n */\nexport function makeCheckSecretMiddleware<Req: Request, Res: $Response>(\n    authenticationOptions?: AuthenticationOptions,\n): Promise<Middleware<Req, Res>> {\n    if (authenticationOptions != null && getRuntimeMode() === \"production\") {\n        return makeProductionMiddleware(authenticationOptions);\n    }\n\n    return makeDevelopmentMiddleware(authenticationOptions);\n}\n"],"mappings":"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"}