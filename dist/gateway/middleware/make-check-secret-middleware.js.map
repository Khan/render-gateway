{"version":3,"sources":["../../../src/gateway/middleware/make-check-secret-middleware.js"],"names":["makeProductionMiddleware","options","secretKey","headerName","cryptoKeyPath","secrets","secret","Error","req","res","next","requestSecret","header","status","send","error","makeDevelopmentMiddleware","Promise","resolve","logger","warn","debug","info","makeCheckSecretMiddleware","authenticationOptions"],"mappings":";;;;;;;AAEA;;AACA;;AAIA,eAAeA,wBAAf,CACIC,OADJ,EAEiC;AAC7B;;;;;;;;;AASA,QAAM;AAACC,IAAAA,SAAD;AAAYC,IAAAA,UAAZ;AAAwBC,IAAAA;AAAxB,MAAyCH,OAA/C;AACA,QAAMI,OAAO,GAAG,MAAM,4BAAWD,aAAX,CAAtB;AACA,QAAME,MAAM,GAAGD,OAAO,CAACH,SAAD,CAAtB;;AACA,MAAII,MAAM,IAAI,IAAd,EAAoB;AAChB,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACH;;AAED,SAAO,UAAUC,GAAV,EAAoBC,GAApB,EAA8BC,IAA9B,EAAwD;AAC3D,UAAMC,aAAa,GAAGH,GAAG,CAACI,MAAJ,CAAWT,UAAX,CAAtB;;AACA,QAAIQ,aAAa,KAAKL,MAAtB,EAA8B;AAC1BG,MAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,KAAK,EAAE;AAAR,OAArB;AACA;AACH;;AAEDL,IAAAA,IAAI;AACP,GARD;AASH;;AAED,SAASM,yBAAT,CACIf,OADJ,EAEiC;AAC7B;;;AAGA,SAAOgB,OAAO,CAACC,OAAR,CAAgB,UACnBV,GADmB,EAEnBC,GAFmB,EAGnBC,IAHmB,EAIf;AACJ,UAAMS,MAAM,GAAG,sBAAUX,GAAV,CAAf;AACA;;;;;;;AAMA,QAAIP,OAAO,IAAI,IAAf,EAAqB;AACjB,UAAIO,GAAG,CAACI,MAAJ,CAAWX,OAAO,CAACE,UAAnB,KAAkC,IAAtC,EAA4C;AACxCgB,QAAAA,MAAM,CAACC,IAAP,CACI,oDADJ,EAEI;AACIR,UAAAA,MAAM,EAAEX,OAAO,CAACE;AADpB,SAFJ;AAMH,OAPD,MAOO;AACHgB,QAAAA,MAAM,CAACE,KAAP,CACI,mEADJ,EAEI;AACIT,UAAAA,MAAM,EAAEX,OAAO,CAACE;AADpB,SAFJ;AAMH;AACJ,KAhBD,MAgBO;AACHgB,MAAAA,MAAM,CAACG,IAAP,CAAY,oDAAZ;AACH;;AACDZ,IAAAA,IAAI;AACP,GAhCM,CAAP;AAiCH;AAED;;;;;;;;;AAOO,SAASa,yBAAT,CACHC,qBADG,EAE0B;AAC7B,MAAIA,qBAAqB,IAAI,IAAzB,IAAiC,iCAAqB,YAA1D,EAAwE;AACpE,WAAOxB,wBAAwB,CAACwB,qBAAD,CAA/B;AACH;;AAED,SAAOR,yBAAyB,CAACQ,qBAAD,CAAhC;AACH","sourcesContent":["// @flow\nimport type {Middleware, $Response, NextFunction} from \"express\";\nimport {getRuntimeMode, getLogger} from \"../../ka-shared/index.js\";\nimport {getSecrets} from \"../get-secrets.js\";\n\nimport type {AuthenticationOptions, Request} from \"../types.js\";\n\nasync function makeProductionMiddleware<Req: Request, Res: $Response>(\n    options: AuthenticationOptions,\n): Promise<Middleware<Req, Res>> {\n    /**\n     * We look up the secret when the middleware is created. That means\n     * that if the secret changes, the server needs to be\n     * restarted/refreshed somehow.\n     *\n     * TODO(somewhatabstract, WEB-1410): Add ability to trigger refresh of\n     * server - likely just a killswitch to kill an instance so that GAE spins\n     * up new ones.\n     */\n    const {secretKey, headerName, cryptoKeyPath} = options;\n    const secrets = await getSecrets(cryptoKeyPath);\n    const secret = secrets[secretKey];\n    if (secret == null) {\n        throw new Error(\"Unable to load secret\");\n    }\n\n    return function (req: Req, res: Res, next: NextFunction): void {\n        const requestSecret = req.header(headerName);\n        if (requestSecret !== secret) {\n            res.status(401).send({error: \"Missing or invalid secret\"});\n            return;\n        }\n\n        next();\n    };\n}\n\nfunction makeDevelopmentMiddleware<Req: Request, Res: $Response>(\n    options: ?AuthenticationOptions,\n): Promise<Middleware<Req, Res>> {\n    /**\n     * The secrets middleware is a noop when not in production.\n     */\n    return Promise.resolve(function (\n        req: Req,\n        res: Res,\n        next: NextFunction,\n    ): void {\n        const logger = getLogger(req);\n        /**\n         * If authentication options were given, let's log a message if the\n         * expected header is omitted. This is a valid thing to do in dev since\n         * we don't authenticate dev requests, but it is also useful to know\n         * during testing if the header is missing.\n         */\n        if (options != null) {\n            if (req.header(options.headerName) == null) {\n                logger.warn(\n                    \"Authentication header was not included in request.\",\n                    {\n                        header: options.headerName,\n                    },\n                );\n            } else {\n                logger.debug(\n                    \"Authentication header present but ignored in current runtime mode\",\n                    {\n                        header: options.headerName,\n                    },\n                );\n            }\n        } else {\n            logger.info(\"Authentication is not configured for this service.\");\n        }\n        next();\n    });\n}\n\n/**\n * Make the middleware to verify a request's authentication secret.\n *\n * This is a noop when not in production, otherwise this loads the appropriate\n * secret as identified by the options and then uses the configured header name\n * to identify the request header that it is to be matched against.\n */\nexport function makeCheckSecretMiddleware<Req: Request, Res: $Response>(\n    authenticationOptions?: AuthenticationOptions,\n): Promise<Middleware<Req, Res>> {\n    if (authenticationOptions != null && getRuntimeMode() === \"production\") {\n        return makeProductionMiddleware(authenticationOptions);\n    }\n\n    return makeDevelopmentMiddleware(authenticationOptions);\n}\n"],"file":"make-check-secret-middleware.js"}