{"version":3,"sources":["../../src/gateway/format-error.js"],"names":["formatError","errorFormat","errorMetadata","formattedMetadata","JSON","stringify","undefined","replace"],"mappings":";;;;;;;AAEA;;;;;;;;;;;;AAYO,MAAMA,WAAW,GAAG,CACvBC,WADuB,EAEvBC,aAFuB,KAGd;AACT,QAAMC,iBAAiB,GAAGC,IAAI,CAACC,SAAL,CAAeH,aAAf,EAA8BI,SAA9B,EAAyC,GAAzC,CAA1B;;AACA,MAAIL,WAAW,IAAI,IAAnB,EAAyB;AACrB,WAAOE,iBAAP;AACH;;AACD,SAAOF,WAAW,CAACM,OAAZ,CAAoB,SAApB,EAA+BJ,iBAA/B,CAAP;AACH,CATM","sourcesContent":["// @flow\n\n/**\n * Format error metadata into a given error format string.\n *\n * @param {?string} errorFormat The format string.\n *  - If this is null, just the formatted errorMetadata will be returned.\n *  - If `{error}` is in the string, it's first occurrence will be replaced\n *    with the errorMetadata formatted with 4 space indentation.\n *  - If the `{error}` substitution is absent, the metadata will be omitted.\n * @param {any} errorMetadata The metadata that represents the error being\n * formatted.\n * @returns {string} The formatted error.\n */\nexport const formatError = (\n    errorFormat: ?string,\n    errorMetadata: any,\n): string => {\n    const formattedMetadata = JSON.stringify(errorMetadata, undefined, \"4\");\n    if (errorFormat == null) {\n        return formattedMetadata;\n    }\n    return errorFormat.replace(\"{error}\", formattedMetadata);\n};\n"],"file":"format-error.js"}