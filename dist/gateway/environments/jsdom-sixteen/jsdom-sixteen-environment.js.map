{"version":3,"sources":["../../../../src/gateway/environments/jsdom-sixteen/jsdom-sixteen-environment.js"],"names":["JSDOMSixteenEnvironment","constructor","configuration","url","renderAPI","resourceLoader","traceSession","trace","files","_configuration","getFileList","Promise","all","map","f","fetchResult","fetch","Error","then","b","toString","end","getResourceLoader","_retrieveTargetFiles","resolve","body","headers","status"],"mappings":";;;;;;;;;AAKA;;;AAGO,MAAMA,uBAAN,CAA4D;AAG/D;;;;;;AAMAC,EAAAA,WAAW,CAACC,aAAD,EAA4C;AAAA;;AAAA,kDAOhC,OACnBC,GADmB,EAEnBC,SAFmB,EAGnBC,cAHmB,KAIM;AACzB,YAAMC,YAAY,GAAGF,SAAS,CAACG,KAAV,CAAgB,yBAAhB,CAArB;;AACA,UAAI;AACA;;;;;;AAMA,cAAMC,KAAK,GAAG,MAAM,KAAKC,cAAL,CAAoBC,WAApB,CAAgCP,GAAhC,EAAqCC,SAArC,CAApB;AAEA;;;;;;AAKA,eAAO,MAAMO,OAAO,CAACC,GAAR,CACTJ,KAAK,CAACK,GAAN,CAAWC,CAAD,IAAO;AACb,gBAAMC,WAAW,GAAGV,cAAc,CAACW,KAAf,CAAqBF,CAArB,CAApB;AACA;;;;;;AAKA,cAAIC,WAAW,IAAI,IAAnB,EAAyB;AACrB,kBAAM,IAAIE,KAAJ,CACD,sBAAqBH,CAAE,iCADtB,CAAN;AAGH;AACD;;;;;;AAIA,iBAAOC,WAAW,CAACG,IAAZ,CAAkBC,CAAD,IAAOA,CAAC,CAACC,QAAF,EAAxB,CAAP;AACH,SAjBD,CADS,CAAb;AAoBH,OAlCD,SAkCU;AACNd,QAAAA,YAAY,CAACe,GAAb;AACH;AACJ,KAlDsD;;AAAA,oCAgE9C,OACLlB,GADK,EAELC,SAFK,KAGmB;AACxB;;;;AAIA,YAAMC,cAAc,GAAG,KAAKI,cAAL,CAAoBa,iBAApB,CACnBnB,GADmB,EAEnBC,SAFmB,CAAvB,CALwB,CAUxB;;;AACA,YAAMI,KAAK,GAAG,MAAM,KAAKe,oBAAL,CAChBpB,GADgB,EAEhBC,SAFgB,EAGhBC,cAHgB,CAApB;AAMA;;;;;AAIA;;;;;;;;;;;;;;;AAeA,aAAOM,OAAO,CAACa,OAAR,CAAgB;AACnBC,QAAAA,IAAI,EAAE,SADa;AAEnBC,QAAAA,OAAO,EAAE,EAFU;AAGnBC,QAAAA,MAAM,EAAE;AAHW,OAAhB,CAAP;AAKH,KA5GsD;;AACnD,QAAIzB,aAAa,IAAI,IAArB,EAA2B;AACvB,YAAM,IAAIe,KAAJ,CAAU,wCAAV,CAAN;AACH;;AACD,SAAKR,cAAL,GAAsBP,aAAtB;AACH;;AAd8D","sourcesContent":["// @flow\nimport type {ResourceLoader} from \"jsdom\";\nimport type {IJSDOMSixteenConfiguration} from \"./index.js\";\nimport type {IRenderEnvironment, RenderAPI, RenderResult} from \"../../types.js\";\n\n/**\n * A render environment built to support the JSDOM 16.x API.\n */\nexport class JSDOMSixteenEnvironment implements IRenderEnvironment {\n    _configuration: IJSDOMSixteenConfiguration;\n\n    /**\n     * Create a new instance of this environment.\n     *\n     * @param {IJSDOMSixteenConfiguration} configuration\n     * Configuration for the environment.\n     */\n    constructor(configuration: IJSDOMSixteenConfiguration) {\n        if (configuration == null) {\n            throw new Error(\"Must provide environment configuration\");\n        }\n        this._configuration = configuration;\n    }\n\n    _retrieveTargetFiles = async (\n        url: string,\n        renderAPI: RenderAPI,\n        resourceLoader: ResourceLoader,\n    ): Promise<Array<string>> => {\n        const traceSession = renderAPI.trace(\"Retrieving target files\");\n        try {\n            /**\n             * First, we need to know what files to execute so that we can produce\n             * a render result, and we need a resource loader so that we can\n             * retrieve those files as well as support retrieving additional files\n             * within our JSDOM environment.\n             */\n            const files = await this._configuration.getFileList(url, renderAPI);\n\n            /**\n             * Now let's use the resource loader to get the files.\n             * We ignore the `FetchOptions` param of resourceLoader.fetch as we\n             * have nothing to pass there.\n             */\n            return await Promise.all(\n                files.map((f) => {\n                    const fetchResult = resourceLoader.fetch(f);\n                    /**\n                     * Resource loader's fetch can return null. It shouldn't for\n                     * any of these files though, so if it does, let's raise an\n                     * error!\n                     */\n                    if (fetchResult == null) {\n                        throw new Error(\n                            `Unable to retrieve ${f}. ResourceLoader returned null.`,\n                        );\n                    }\n                    /**\n                     * No need to reconnect the abort() in this case since we\n                     * won't be calling it.\n                     */\n                    return fetchResult.then((b) => b.toString());\n                }),\n            );\n        } finally {\n            traceSession.end();\n        }\n    };\n\n    /**\n     * Generate a render result for the given url.\n     *\n     * @param {string} url The URL that is to be rendered. This is always\n     * relative to the host and so does not contain protocol, hostname, nor port\n     * information.\n     * @param {RenderAPI} renderAPI An API of utilities for assisting with the\n     * render operation.\n     * @returns {Promise<RenderResult>} The result of the render that is to be\n     * returned by the gateway service as the response to the render request.\n     * This includes the body of the response and the status code information.\n     */\n    render = async (\n        url: string,\n        renderAPI: RenderAPI,\n    ): Promise<RenderResult> => {\n        /**\n         * We are going to need a resource loader so that we can obtain files\n         * both inside and outside the JSDOM VM.\n         */\n        const resourceLoader = this._configuration.getResourceLoader(\n            url,\n            renderAPI,\n        );\n\n        // eslint-disable-next-line no-unused-vars\n        const files = await this._retrieveTargetFiles(\n            url,\n            renderAPI,\n            resourceLoader,\n        );\n\n        /**\n         * Right, we have the files. Now we need the JSDOM environment and the\n         * rendering hooks so that we can make a render happen.\n         */\n        /**\n         * TODO(somewhatabstract): All the things\n         * 1. Need to setup the JSDOM VM\n         *    - see createRenderContext for RRS\n         *    - call the afterEnvSetup and attach anything it returns to the\n         *      vm context\n         *\n         * 2. Need to setup the environment with render registration callbacks\n         *    - see the render function in render.js of RRS\n         *\n         * 3. Invoke the render and return its result.\n         *\n         * 4. Finally, close the JSDOM environment.\n         */\n\n        return Promise.resolve({\n            body: \"NOTHING\",\n            headers: {},\n            status: 200,\n        });\n    };\n}\n"],"file":"jsdom-sixteen-environment.js"}