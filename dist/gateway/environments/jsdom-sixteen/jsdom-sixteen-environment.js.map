{"version":3,"file":"jsdom-sixteen-environment.js","names":["MinimalPage","JSDOMSixteenEnvironment","constructor","configuration","url","renderAPI","resourceLoader","traceSession","trace","fileURLs","_configuration","getFileList","fetch","addLabel","length","files","Promise","all","map","f","fetchResult","KAError","Errors","TransientService","then","b","content","toString","urls","end","closeables","getResourceLoader","push","_retrieveTargetFiles","JSDOM","require","CloseableVirtualConsole","virtualConsole","logger","jsdomInstance","runScripts","resources","pretendToBeVisual","window","vmContext","getInternalVMContext","tmpFnName","patchAgainstDanglingTimers","timerGateAPI","_runScript","afterRenderTidyUp","afterEnvSetup","registrationCallbackName","registeredCbName","cb","close","filename","Internal","result","safeHasOwnProperty","JSON","stringify","_closeAll","resolve","setTimeout","reportCloseableError","e","simplifiedError","extractError","error","kind","c","catch","script","options","Script","realScript","runInContext"],"sources":["../../../../src/gateway/environments/jsdom-sixteen/jsdom-sixteen-environment.js"],"sourcesContent":["// @flow\nimport {\n    extractError,\n    KAError,\n    safeHasOwnProperty,\n} from \"../../../shared/index.js\";\nimport {Errors} from \"../../../ka-shared/index.js\";\nimport type {Logger, ITraceSession, ICloseable} from \"../../../shared/index.js\";\nimport type {\n    IJSDOMSixteenConfiguration,\n    CloseableResourceLoader,\n    IGate,\n} from \"./types.js\";\nimport type {IRenderEnvironment, RenderAPI, RenderResult} from \"../../types.js\";\n\ninterface RenderCallbackFn {\n    /**\n     * Method invoked to create a render result.\n     */\n    (): Promise<RenderResult>;\n}\n\n/**\n * A JS file.\n */\ntype JavaScriptFile = {\n    /**\n     * The content of the file.\n     */\n    +content: string,\n\n    /**\n     * The URL of the file.\n     */\n    +url: string,\n};\n\ntype JavaScriptFiles = {\n    +files: $ReadOnlyArray<JavaScriptFile>,\n    +urls: $ReadOnlyArray<string>,\n};\n\nconst MinimalPage = \"<!DOCTYPE html><html><head></head><body></body></html>\";\n\n/**\n * A render environment built to support the JSDOM 16.x API.\n */\nexport class JSDOMSixteenEnvironment implements IRenderEnvironment {\n    _configuration: IJSDOMSixteenConfiguration;\n\n    /**\n     * Create a new instance of this environment.\n     *\n     * @param {IJSDOMSixteenConfiguration} configuration\n     * Configuration for the environment.\n     */\n    constructor(configuration: IJSDOMSixteenConfiguration) {\n        if (configuration == null) {\n            throw new KAError(\n                \"Must provide environment configuration\",\n                Errors.Internal,\n            );\n        }\n        this._configuration = configuration;\n    }\n\n    _retrieveTargetFiles: (\n        url: string,\n        renderAPI: RenderAPI,\n        resourceLoader: CloseableResourceLoader,\n    ) => Promise<JavaScriptFiles> = async (\n        url: string,\n        renderAPI: RenderAPI,\n        resourceLoader: CloseableResourceLoader,\n    ): Promise<JavaScriptFiles> => {\n        const traceSession: ITraceSession = renderAPI.trace(\n            \"JSDOM16._retrieveTargetFiles\",\n            `JSDOMSixteenEnvironment retrieving files`,\n        );\n        try {\n            /**\n             * First, we need to know what files to execute so that we can\n             * produce a render result, and we need a resource loader so that\n             * we can retrieve those files as well as support retrieving\n             * additional files within our JSDOM environment.\n             */\n            const fileURLs = await this._configuration.getFileList(\n                url,\n                renderAPI,\n                (url) => resourceLoader.fetch(url),\n            );\n            traceSession.addLabel(\"fileCount\", fileURLs.length);\n\n            /**\n             * Now let's use the resource loader to get the files.\n             * We ignore the `FetchOptions` param of resourceLoader.fetch as we\n             * have nothing to pass there.\n             */\n            return {\n                files: await Promise.all(\n                    fileURLs.map((f) => {\n                        const fetchResult = resourceLoader.fetch(f);\n                        /**\n                         * Resource loader's fetch can return null. It shouldn't for\n                         * any of these files though, so if it does, let's raise an\n                         * error!\n                         */\n                        if (fetchResult == null) {\n                            throw new KAError(\n                                `Unable to retrieve ${f}. ResourceLoader returned null.`,\n                                Errors.TransientService,\n                            );\n                        }\n                        /**\n                         * No need to reconnect the abort() in this case since we\n                         * won't be calling it.\n                         */\n                        return fetchResult.then((b) => ({\n                            content: b.toString(),\n                            url: f,\n                        }));\n                    }),\n                ),\n                urls: fileURLs,\n            };\n        } finally {\n            traceSession.end();\n        }\n    };\n\n    _closeAll(closeables: Array<ICloseable>, logger: Logger): Promise<void> {\n        return new Promise((resolve) => {\n            /**\n             * We wrap this in a timeout to hopefully mitigate any chances\n             * of https://github.com/jsdom/jsdom/issues/1682\n             */\n            setTimeout(async () => {\n                const reportCloseableError = (e) => {\n                    // We do not want to stop closing just because something\n                    // errored.\n                    const simplifiedError = extractError(e);\n                    logger.error(\n                        `Closeable encountered an error: ${\n                            simplifiedError.error || \"\"\n                        }`,\n                        {\n                            ...simplifiedError,\n                            kind: Errors.Internal,\n                        },\n                    );\n                };\n                /**\n                 * We want to close things. We're going to assume that\n                 * things are robust to change and close everything at once.\n                 * That way we shutdown as fast as we can, and any \"closed\"\n                 * states that are set on close to gate things like wasted\n                 * JS requests are properly entered as soon as possible.\n                 */\n                await Promise.all(\n                    closeables.map((c) => {\n                        try {\n                            return c?.close?.()?.catch(reportCloseableError);\n                        } catch (e) {\n                            reportCloseableError(e);\n                        }\n                    }),\n                );\n\n                /**\n                 * Let's clear the array to make sure we're not holding\n                 * on to any references unnecessarily.\n                 */\n                closeables.length = 0;\n                resolve();\n            });\n        });\n    }\n\n    _runScript(\n        vmContext: vm$Context,\n        script: string,\n        options?: vm$ScriptOptions,\n    ): any {\n        const {Script} = require(\"vm\");\n        const realScript = new Script(script, options);\n        return realScript.runInContext(vmContext);\n    }\n\n    /**\n     * Generate a render result for the given url.\n     *\n     * @param {string} url The URL that is to be rendered. This is always\n     * relative to the host and so does not contain protocol, hostname, nor port\n     * information.\n     * @param {RenderAPI} renderAPI An API of utilities for assisting with the\n     * render operation.\n     * @returns {Promise<RenderResult>} The result of the render that is to be\n     * returned by the gateway service as the response to the render request.\n     * This includes the body of the response and the status code information.\n     */\n    render: (url: string, renderAPI: RenderAPI) => Promise<RenderResult> =\n        async (url: string, renderAPI: RenderAPI): Promise<RenderResult> => {\n            /**\n             * We want to tidy up nicely if there's a problem and also if the render\n             * context is closed, so let's handle that by putting closeable things\n             * into a handy list and providing a way to close them all.\n             */\n            const closeables: Array<ICloseable> = [];\n            try {\n                /**\n                 * We are going to need a resource loader so that we can obtain files\n                 * both inside and outside the JSDOM VM.\n                 */\n                const resourceLoader = this._configuration.getResourceLoader(\n                    url,\n                    renderAPI,\n                );\n                closeables.push(resourceLoader);\n\n                // Let's get those files!\n                const files = await this._retrieveTargetFiles(\n                    url,\n                    renderAPI,\n                    resourceLoader,\n                );\n\n                /**\n                 * We want a JSDOM instance for the url we want to render. This is\n                 * where we setup custom resource loading and our virtual console\n                 * too.\n                 */\n                const {JSDOM} = require(\"jsdom\");\n                const {\n                    CloseableVirtualConsole,\n                } = require(\"./closeable-virtual-console.js\");\n                const virtualConsole = new CloseableVirtualConsole(\n                    renderAPI.logger,\n                );\n                const jsdomInstance = new JSDOM(MinimalPage, {\n                    url,\n                    runScripts: \"dangerously\",\n                    resources: (resourceLoader: any),\n                    pretendToBeVisual: true,\n                    virtualConsole,\n                });\n                closeables.push(virtualConsole);\n                closeables.push(jsdomInstance.window);\n\n                /**\n                 * OK, we know this is a JSDOM instance but we want to expose a nice\n                 * wrapper. As part of that wrapper, we want to make it easier to\n                 * run scripts (like our rendering JS code) within the VM context.\n                 * So, let's create a helper for that.\n                 *\n                 * We cast the context to any, because otherwise it is typed as an\n                 * empty object, which makes life annoying.\n                 */\n                const vmContext: any = jsdomInstance.getInternalVMContext();\n\n                /**\n                 * Next, we want to patch timers so we can make sure they don't\n                 * fire after we are done (and so we can catch dangling timers if\n                 * necessary). To do this, we are going to hang the timer API off\n                 * the vmContext and then execute it from inside the context.\n                 * Super magic.\n                 */\n                const tmpFnName = \"__tmp_patchTimers\";\n                const {\n                    patchAgainstDanglingTimers,\n                } = require(\"./patch-against-dangling-timers.js\");\n                vmContext[tmpFnName] = patchAgainstDanglingTimers;\n                const timerGateAPI: IGate = this._runScript(\n                    vmContext,\n                    `${tmpFnName}(window);`,\n                );\n                delete vmContext[tmpFnName];\n                closeables.push(timerGateAPI);\n\n                /**\n                 * At this point, we give our configuration an opportunity to\n                 * modify the render context and capture the return result, which\n                 * can be used to tidy up after we're done.\n                 */\n                const afterRenderTidyUp =\n                    await this._configuration.afterEnvSetup(\n                        url,\n                        files.urls,\n                        renderAPI,\n                        vmContext,\n                    );\n                closeables.push(afterRenderTidyUp);\n\n                /**\n                 * At this point, before loading the files for rendering, we must\n                 * configure the registration point in our render context.\n                 */\n                const {registrationCallbackName} = this._configuration;\n                const registeredCbName = \"__registeredCallback\";\n                vmContext[registrationCallbackName] = (\n                    cb: RenderCallbackFn,\n                ): void => {\n                    vmContext[registrationCallbackName][registeredCbName] = cb;\n                };\n                closeables.push({\n                    close: () => {\n                        delete vmContext[registrationCallbackName];\n                    },\n                });\n\n                /**\n                 * The context is configured. Now we need to load the files into it\n                 * which should cause our registration callback to be invoked.\n                 * We pass the filename here so we can get some nicer stack traces.\n                 */\n                for (const {content, url} of files.files) {\n                    this._runScript(vmContext, content, {filename: url});\n                }\n\n                /**\n                 * With the files all loaded, we should have a registered callback.\n                 * Let's assert that and then invoke the render process.\n                 */\n                if (\n                    typeof vmContext[registrationCallbackName][\n                        registeredCbName\n                    ] !== \"function\"\n                ) {\n                    throw new KAError(\n                        \"No render callback was registered.\",\n                        Errors.Internal,\n                    );\n                }\n\n                /**\n                 * And now we run the registered callback inside the VM.\n                 */\n                const result: RenderResult = await this._runScript(\n                    vmContext,\n                    `\n    const cb = window[\"${registrationCallbackName}\"][\"${registeredCbName}\"];\n    cb();`,\n                );\n\n                /**\n                 * Let's make sure that the rendered function returned something\n                 * resembling a render result.\n                 */\n                if (\n                    result == null ||\n                    !safeHasOwnProperty(result, \"body\") ||\n                    !safeHasOwnProperty(result, \"status\") ||\n                    !safeHasOwnProperty(result, \"headers\")\n                ) {\n                    throw new KAError(\n                        `Malformed render result: ${JSON.stringify(result)}`,\n                        Errors.Internal,\n                    );\n                }\n\n                /**\n                 * After all that, we should have a result, so let's return it and\n                 * let our finally tidy up all the render context we built.\n                 */\n                return result;\n            } finally {\n                /**\n                 * We need to make sure that whatever happens, we tidy everything\n                 * up.\n                 */\n                await this._closeAll(closeables, renderAPI.logger);\n            }\n        };\n}\n"],"mappings":"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"}