{"version":3,"file":"jsdom-sixteen-configuration.js","names":["JSDOMSixteenConfiguration","constructor","getFileList","getResourceLoader","afterEnvSetup","registrationCallbackName","KAError","Errors","Internal","Promise","resolve"],"sources":["../../../../src/gateway/environments/jsdom-sixteen/jsdom-sixteen-configuration.js"],"sourcesContent":["// @flow\nimport {KAError} from \"../../../shared/index.js\";\nimport {Errors} from \"../../../ka-shared/index.js\";\nimport type {\n    IJSDOMSixteenConfiguration,\n    CloseableResourceLoader,\n} from \"./types.js\";\nimport type {RenderAPI} from \"../../types.js\";\nimport type {ICloseable} from \"../../../shared/index.js\";\n\n/**\n * Utility for creating a valid configuration to use with the JSDOM Sixteen\n * environment.\n */\nexport class JSDOMSixteenConfiguration implements IJSDOMSixteenConfiguration {\n    +registrationCallbackName: string;\n    +getFileList: (\n        url: string,\n        renderAPI: RenderAPI,\n        fetchFn: (url: string) => ?Promise<Buffer>,\n    ) => Promise<Array<string>>;\n    +getResourceLoader: (\n        url: string,\n        renderAPI: RenderAPI,\n    ) => CloseableResourceLoader;\n    +afterEnvSetup: (\n        url: string,\n        fileURLs: $ReadOnlyArray<string>,\n        renderAPI: RenderAPI,\n        vmContext: any,\n    ) => Promise<?ICloseable>;\n\n    /**\n     * Create a configuration for use with the JSDOM Sixteen environment.\n     *\n     * @param {(url: string, renderAPI: RenderAPI) => Promise<Array<string>>} getFileList\n     * Callback that should return a promise for the list of JavaScript files\n     * the environment must execute in order to produce a result for the given\n     * render request.\n     * @param {(url: string, renderAPI: RenderAPI) => ResourceLoader} getResourceLoader\n     * Callback that should return a JSDOM resource loader for the given\n     * request. We must call this per render so that logging is appropriately\n     * channeled for the request being made.\n     * @param {(url: string, fileURLs: $ReadOnlyArray<string>, renderAPI: RenderAPI, vmContext: any) => ?Promise<mixed>} [afterEnvSetup]\n     * Callback to perform additional environment setup before the render\n     * occurs. This can optionally return an object that can add extra fields\n     * to the environment context for rendering code to access. This is useful\n     * if your render server wants to add some specific configuration, such\n     * as setting up some versions of Apollo for server-side rendering.\n     * Be careful; any functions you attach can be executed by the rendering\n     * code.\n     * @param {string} [registrationCallbackName] The name of the function\n     * that the environment should expose for client code to register for\n     * rendering. This defaults to `__jsdom_env_register`.\n     */\n    constructor(\n        getFileList: (\n            url: string,\n            renderAPI: RenderAPI,\n            fetchFn: (url: string) => ?Promise<Buffer>,\n        ) => Promise<Array<string>>,\n        getResourceLoader: (\n            url: string,\n            renderAPI: RenderAPI,\n        ) => CloseableResourceLoader,\n        afterEnvSetup?: (\n            url: string,\n            fileURLs: $ReadOnlyArray<string>,\n            renderAPI: RenderAPI,\n            vmContext: any,\n        ) => Promise<?ICloseable>,\n        registrationCallbackName?: string = \"__jsdom_env_register\",\n    ) {\n        if (typeof getFileList !== \"function\") {\n            throw new KAError(\n                \"Must provide valid callback for obtaining file list\",\n                Errors.Internal,\n            );\n        }\n        if (typeof getResourceLoader !== \"function\") {\n            throw new KAError(\n                \"Must provide valid callback for obtaining resource loader\",\n                Errors.Internal,\n            );\n        }\n        if (afterEnvSetup != null && typeof afterEnvSetup !== \"function\") {\n            throw new KAError(\n                \"Must provide valid callback for after env setup or null\",\n                Errors.Internal,\n            );\n        }\n\n        this.registrationCallbackName = registrationCallbackName;\n        this.getFileList = getFileList;\n        this.getResourceLoader = getResourceLoader;\n        this.afterEnvSetup = afterEnvSetup || (() => Promise.resolve(null));\n    }\n}\n"],"mappings":";;;;;;;AACA;;AACA;;;;AAQA;AACA;AACA;AACA;AACO,MAAMA,yBAAN,CAAsE;EAkBzE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CACPC,WADO,EAMPC,iBANO,EAUPC,aAVO,EAgBPC,wBAAiC,GAAG,sBAhB7B,EAiBT;IAAA;;IAAA;;IAAA;;IAAA;;IACE,IAAI,OAAOH,WAAP,KAAuB,UAA3B,EAAuC;MACnC,MAAM,IAAII,cAAJ,CACF,qDADE,EAEFC,cAAA,CAAOC,QAFL,CAAN;IAIH;;IACD,IAAI,OAAOL,iBAAP,KAA6B,UAAjC,EAA6C;MACzC,MAAM,IAAIG,cAAJ,CACF,2DADE,EAEFC,cAAA,CAAOC,QAFL,CAAN;IAIH;;IACD,IAAIJ,aAAa,IAAI,IAAjB,IAAyB,OAAOA,aAAP,KAAyB,UAAtD,EAAkE;MAC9D,MAAM,IAAIE,cAAJ,CACF,yDADE,EAEFC,cAAA,CAAOC,QAFL,CAAN;IAIH;;IAED,KAAKH,wBAAL,GAAgCA,wBAAhC;IACA,KAAKH,WAAL,GAAmBA,WAAnB;IACA,KAAKC,iBAAL,GAAyBA,iBAAzB;;IACA,KAAKC,aAAL,GAAqBA,aAAa,KAAK,MAAMK,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAX,CAAlC;EACH;;AAlFwE"}