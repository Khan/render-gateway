{"version":3,"sources":["../../../../src/gateway/environments/jsdom-sixteen/create-virtual-console.js"],"names":["createVirtualConsole","logger","virtualConsole","VirtualConsole","on","e","message","indexOf","simplifiedError","error","kind","Errors","Internal","args","passthruLog","method","silly"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,oBAAoB,GAAIC,MAAD,IAAoC;AACpE,QAAMC,cAAc,GAAG,IAAIC,qBAAJ,EAAvB;AACAD,EAAAA,cAAc,CAACE,EAAf,CAAkB,YAAlB,EAAiCC,CAAD,IAAc;AAC1C,QAAIA,CAAC,CAACC,OAAF,CAAUC,OAAV,CAAkB,oBAAlB,KAA2C,CAA/C,EAAkD;AAC9C;AACA;AACA;AACH;;AACD,UAAMC,eAAe,GAAG,yBAAaH,CAAb,CAAxB;AACAJ,IAAAA,MAAM,CAACQ,KAAP,CAAc,oBAAmBD,eAAe,CAACC,KAAhB,IAAyB,EAAG,EAA7D,kCACOD,eADP;AAEIE,MAAAA,IAAI,EAAEC,eAAOC;AAFjB;AAIH,GAXD;AAaA;AACJ;AACA;AACA;AACA;AACA;;AACIV,EAAAA,cAAc,CAACE,EAAf,CAAkB,OAAlB,EAA2B,CAACE,OAAD,EAAU,GAAGO,IAAb,KACvBZ,MAAM,CAACQ,KAAP,CAAc,eAAcH,OAAQ,EAApC,EAAuC;AAACO,IAAAA;AAAD,GAAvC,CADJ;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,QAAMC,WAAW,GAAIC,MAAD,IAA+C;AAC/Db,IAAAA,cAAc,CAACE,EAAf,CAAkBW,MAAlB,EAA0B,CAACT,OAAD,EAAU,GAAGO,IAAb,KACtBZ,MAAM,CAACe,KAAP,CAAc,SAAQD,MAAO,IAAGT,OAAQ,EAAxC,EAA2C;AAACO,MAAAA;AAAD,KAA3C,CADJ;AAGH,GAJD;;AAKAC,EAAAA,WAAW,CAAC,MAAD,CAAX;AACAA,EAAAA,WAAW,CAAC,MAAD,CAAX;AACAA,EAAAA,WAAW,CAAC,KAAD,CAAX;AACAA,EAAAA,WAAW,CAAC,OAAD,CAAX;AACA,SAAOZ,cAAP;AACH,CA3CM","sourcesContent":["// @flow\nimport {VirtualConsole} from \"jsdom\";\nimport {extractError} from \"../../../shared/index.js\";\nimport {Errors} from \"../../../ka-shared/index.js\";\nimport type {Logger} from \"../../../shared/index.js\";\n\n/**\n * Create a virtual console for use with JSDOM.\n *\n * @param {Logger} logger The logger to which this virtual console logs.\n * @returns {VirtualConsole} A JSDOM VirtualConsole instance.\n */\nexport const createVirtualConsole = (logger: Logger): VirtualConsole => {\n    const virtualConsole = new VirtualConsole();\n    virtualConsole.on(\"jsdomError\", (e: Error) => {\n        if (e.message.indexOf(\"Could not load img\") >= 0) {\n            // We know that images cannot load. We're deliberately blocking\n            // them.\n            return;\n        }\n        const simplifiedError = extractError(e);\n        logger.error(`JSDOM jsdomError:${simplifiedError.error || \"\"}`, {\n            ...simplifiedError,\n            kind: Errors.Internal,\n        });\n    });\n\n    /**\n     * NOTE(somewhatabstract): We pass args array as the metadata parameter for\n     * winston log. We don't worry about adding the error kind here; we mark\n     * these as Errors.Internal automatically if they don't already include a\n     * kind.\n     */\n    virtualConsole.on(\"error\", (message, ...args) =>\n        logger.error(`JSDOM error:${message}`, {args}),\n    );\n\n    /**\n     * We log all other things as `silly`, since they are generally only useful\n     * to us when we're developing/debugging issues locally, and not in\n     * production. We could add some way to turn this on in production\n     * temporarily (like a temporary \"elevate log level\" query param) if\n     * we find that will be useful, but I haven't encountered an issue that\n     * needed these in production yet; they're just noise.\n     */\n    const passthruLog = (method: \"warn\" | \"info\" | \"log\" | \"debug\") => {\n        virtualConsole.on(method, (message, ...args) =>\n            logger.silly(`JSDOM ${method}:${message}`, {args}),\n        );\n    };\n    passthruLog(\"warn\");\n    passthruLog(\"info\");\n    passthruLog(\"log\");\n    passthruLog(\"debug\");\n    return virtualConsole;\n};\n"],"file":"create-virtual-console.js"}