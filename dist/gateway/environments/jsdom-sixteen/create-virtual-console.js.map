{"version":3,"sources":["../../../../src/gateway/environments/jsdom-sixteen/create-virtual-console.js"],"names":["createVirtualConsole","logger","virtualConsole","VirtualConsole","on","e","message","indexOf","simplifiedError","error","kind","Errors","Internal","args","warn","info","debug"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;;;AAGA;;;;;;AAMO,MAAMA,oBAAoB,GAAIC,MAAD,IAAoC;AACpE,QAAMC,cAAc,GAAG,IAAIC,qBAAJ,EAAvB;AACAD,EAAAA,cAAc,CAACE,EAAf,CAAkB,YAAlB,EAAiCC,CAAD,IAAc;AAC1C,QAAIA,CAAC,CAACC,OAAF,CAAUC,OAAV,CAAkB,oBAAlB,KAA2C,CAA/C,EAAkD;AAC9C;AACA;AACA;AACH;;AACD,UAAMC,eAAe,GAAG,yBAAaH,CAAb,CAAxB;AACAJ,IAAAA,MAAM,CAACQ,KAAP,CAAc,SAAQD,eAAe,CAACC,KAAhB,IAAyB,EAAG,EAAlD,kCACOD,eADP;AAEIE,MAAAA,IAAI,EAAEC,eAAOC;AAFjB;AAIH,GAXD,EAFoE,CAepE;AACA;AACA;AACA;;AACAV,EAAAA,cAAc,CAACE,EAAf,CAAkB,OAAlB,EAA2B,CAACE,OAAD,EAAU,GAAGO,IAAb,KACvBZ,MAAM,CAACQ,KAAP,CAAc,SAAQH,OAAQ,EAA9B,EAAiC;AAACO,IAAAA;AAAD,GAAjC,CADJ;AAGAX,EAAAA,cAAc,CAACE,EAAf,CAAkB,MAAlB,EAA0B,CAACE,OAAD,EAAU,GAAGO,IAAb,KACtBZ,MAAM,CAACa,IAAP,CAAa,SAAQR,OAAQ,EAA7B,EAAgC;AAACO,IAAAA;AAAD,GAAhC,CADJ;AAGAX,EAAAA,cAAc,CAACE,EAAf,CAAkB,MAAlB,EAA0B,CAACE,OAAD,EAAU,GAAGO,IAAb,KACtBZ,MAAM,CAACc,IAAP,CAAa,SAAQT,OAAQ,EAA7B,EAAgC;AAACO,IAAAA;AAAD,GAAhC,CADJ;AAGAX,EAAAA,cAAc,CAACE,EAAf,CAAkB,KAAlB,EAAyB,CAACE,OAAD,EAAU,GAAGO,IAAb;AACrB;;;;AAIAZ,EAAAA,MAAM,CAACc,IAAP,CAAa,SAAQT,OAAQ,EAA7B,EAAgC;AAACO,IAAAA;AAAD,GAAhC,CALJ;AAOAX,EAAAA,cAAc,CAACE,EAAf,CAAkB,OAAlB,EAA2B,CAACE,OAAD,EAAU,GAAGO,IAAb,KACvBZ,MAAM,CAACe,KAAP,CAAc,SAAQV,OAAQ,EAA9B,EAAiC;AAACO,IAAAA;AAAD,GAAjC,CADJ;AAGA,SAAOX,cAAP;AACH,CAvCM","sourcesContent":["// @flow\nimport {VirtualConsole} from \"jsdom\";\nimport {extractError} from \"../../../shared/index.js\";\nimport {Errors} from \"../../../ka-shared/index.js\";\nimport type {Logger} from \"../../../shared/index.js\";\n\n/**\n * Create a virtual console for use with JSDOM.\n *\n * @param {Logger} logger The logger to which this virtual console logs.\n * @returns {VirtualConsole} A JSDOM VirtualConsole instance.\n */\nexport const createVirtualConsole = (logger: Logger): VirtualConsole => {\n    const virtualConsole = new VirtualConsole();\n    virtualConsole.on(\"jsdomError\", (e: Error) => {\n        if (e.message.indexOf(\"Could not load img\") >= 0) {\n            // We know that images cannot load. We're deliberately blocking\n            // them.\n            return;\n        }\n        const simplifiedError = extractError(e);\n        logger.error(`JSDOM:${simplifiedError.error || \"\"}`, {\n            ...simplifiedError,\n            kind: Errors.Internal,\n        });\n    });\n\n    // NOTE: We pass args array as the metadata parameter for winston log.\n    //       We don't worry about adding the error kind here; we mark these\n    //       as Errors.Internal automatically if they don't already include a\n    //       kind.\n    virtualConsole.on(\"error\", (message, ...args) =>\n        logger.error(`JSDOM:${message}`, {args}),\n    );\n    virtualConsole.on(\"warn\", (message, ...args) =>\n        logger.warn(`JSDOM:${message}`, {args}),\n    );\n    virtualConsole.on(\"info\", (message, ...args) =>\n        logger.info(`JSDOM:${message}`, {args}),\n    );\n    virtualConsole.on(\"log\", (message, ...args) =>\n        /**\n         * Winston uses log for a different, core thing, so let's map log to\n         * info.\n         */\n        logger.info(`JSDOM:${message}`, {args}),\n    );\n    virtualConsole.on(\"debug\", (message, ...args) =>\n        logger.debug(`JSDOM:${message}`, {args}),\n    );\n    return virtualConsole;\n};\n"],"file":"create-virtual-console.js"}