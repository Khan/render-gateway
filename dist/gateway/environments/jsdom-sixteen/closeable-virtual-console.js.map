{"version":3,"file":"closeable-virtual-console.js","names":["CloseableVirtualConsole","VirtualConsole","constructor","logger","_closed","on","e","message","indexOf","simplifiedError","extractError","error","kind","Errors","Internal","args","passthruLog","method","silly"],"sources":["../../../../src/gateway/environments/jsdom-sixteen/closeable-virtual-console.js"],"sourcesContent":["// @flow\nimport {VirtualConsole} from \"jsdom\";\nimport {extractError} from \"../../../shared/index.js\";\nimport {Errors} from \"../../../ka-shared/index.js\";\nimport type {Logger, ICloseable} from \"../../../shared/index.js\";\n\nexport class CloseableVirtualConsole\n    extends VirtualConsole\n    implements ICloseable\n{\n    _closed: boolean;\n\n    constructor(logger: Logger) {\n        super();\n        this._closed = false;\n\n        this.on(\"jsdomError\", (e: Error) => {\n            if (this._closed) {\n                // We are closed. No logging.\n                return;\n            }\n            if (e.message.indexOf(\"Could not load img\") >= 0) {\n                // We know that images cannot load. We're deliberately blocking\n                // them.\n                return;\n            }\n            const simplifiedError = extractError(e);\n            logger.error(`JSDOM jsdomError:${simplifiedError.error || \"\"}`, {\n                ...simplifiedError,\n                kind: Errors.Internal,\n            });\n        });\n\n        /**\n         * NOTE(somewhatabstract): We pass args array as the metadata parameter for\n         * winston log. We don't worry about adding the error kind here; we mark\n         * these as Errors.Internal automatically if they don't already include a\n         * kind.\n         */\n        this.on(\n            \"error\",\n            (message, ...args) =>\n                !this._closed && logger.error(`JSDOM error:${message}`, {args}),\n        );\n\n        /**\n         * We log all other things as `silly`, since they are generally only useful\n         * to us when we're developing/debugging issues locally, and not in\n         * production. We could add some way to turn this on in production\n         * temporarily (like a temporary \"elevate log level\" query param) if\n         * we find that will be useful, but I haven't encountered an issue that\n         * needed these in production yet; they're just noise.\n         */\n        const passthruLog = (method: \"warn\" | \"info\" | \"log\" | \"debug\") => {\n            this.on(\n                method,\n                (message, ...args) =>\n                    !this._closed &&\n                    logger.silly(`JSDOM ${method}:${message}`, {args}),\n            );\n        };\n        passthruLog(\"warn\");\n        passthruLog(\"info\");\n        passthruLog(\"log\");\n        passthruLog(\"debug\");\n    }\n\n    close: () => void | Promise<void> = () => {\n        this._closed = true;\n    };\n}\n"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAGO,MAAMA,uBAAN,SACKC,qBADL,CAGP;EAGIC,WAAW,CAACC,MAAD,EAAiB;IACxB;;IADwB;;IAAA,+BAuDQ,MAAM;MACtC,KAAKC,OAAL,GAAe,IAAf;IACH,CAzD2B;;IAExB,KAAKA,OAAL,GAAe,KAAf;IAEA,KAAKC,EAAL,CAAQ,YAAR,EAAuBC,CAAD,IAAc;MAChC,IAAI,KAAKF,OAAT,EAAkB;QACd;QACA;MACH;;MACD,IAAIE,CAAC,CAACC,OAAF,CAAUC,OAAV,CAAkB,oBAAlB,KAA2C,CAA/C,EAAkD;QAC9C;QACA;QACA;MACH;;MACD,MAAMC,eAAe,GAAG,IAAAC,mBAAA,EAAaJ,CAAb,CAAxB;MACAH,MAAM,CAACQ,KAAP,CAAc,oBAAmBF,eAAe,CAACE,KAAhB,IAAyB,EAAG,EAA7D,EAAgE,EAC5D,GAAGF,eADyD;QAE5DG,IAAI,EAAEC,cAAA,CAAOC;MAF+C,CAAhE;IAIH,CAfD;IAiBA;AACR;AACA;AACA;AACA;AACA;;IACQ,KAAKT,EAAL,CACI,OADJ,EAEI,CAACE,OAAD,EAAU,GAAGQ,IAAb,KACI,CAAC,KAAKX,OAAN,IAAiBD,MAAM,CAACQ,KAAP,CAAc,eAAcJ,OAAQ,EAApC,EAAuC;MAACQ;IAAD,CAAvC,CAHzB;IAMA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,MAAMC,WAAW,GAAIC,MAAD,IAA+C;MAC/D,KAAKZ,EAAL,CACIY,MADJ,EAEI,CAACV,OAAD,EAAU,GAAGQ,IAAb,KACI,CAAC,KAAKX,OAAN,IACAD,MAAM,CAACe,KAAP,CAAc,SAAQD,MAAO,IAAGV,OAAQ,EAAxC,EAA2C;QAACQ;MAAD,CAA3C,CAJR;IAMH,CAPD;;IAQAC,WAAW,CAAC,MAAD,CAAX;IACAA,WAAW,CAAC,MAAD,CAAX;IACAA,WAAW,CAAC,KAAD,CAAX;IACAA,WAAW,CAAC,OAAD,CAAX;EACH;;AAxDL"}