{"version":3,"file":"closeable-virtual-console.js","names":["_jsdom","require","_index","_index2","_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","CloseableVirtualConsole","VirtualConsole","constructor","logger","_closed","on","e","message","indexOf","simplifiedError","extractError","error","kind","Errors","Internal","args","passthruLog","method","silly","exports"],"sources":["../../../../src/gateway/environments/jsdom-sixteen/closeable-virtual-console.js"],"sourcesContent":["// @flow\nimport {VirtualConsole} from \"jsdom\";\nimport {extractError} from \"../../../shared/index.js\";\nimport {Errors} from \"../../../ka-shared/index.js\";\nimport type {Logger, ICloseable} from \"../../../shared/index.js\";\n\nexport class CloseableVirtualConsole\n    extends VirtualConsole\n    implements ICloseable\n{\n    _closed: boolean;\n\n    constructor(logger: Logger) {\n        super();\n        this._closed = false;\n\n        this.on(\"jsdomError\", (e: Error) => {\n            if (this._closed) {\n                // We are closed. No logging.\n                return;\n            }\n            if (e.message.indexOf(\"Could not load img\") >= 0) {\n                // We know that images cannot load. We're deliberately blocking\n                // them.\n                return;\n            }\n            const simplifiedError = extractError(e);\n            logger.error(`JSDOM jsdomError:${simplifiedError.error || \"\"}`, {\n                ...simplifiedError,\n                kind: Errors.Internal,\n            });\n        });\n\n        /**\n         * NOTE(somewhatabstract): We pass args array as the metadata parameter for\n         * winston log. We don't worry about adding the error kind here; we mark\n         * these as Errors.Internal automatically if they don't already include a\n         * kind.\n         */\n        this.on(\n            \"error\",\n            (message, ...args) =>\n                !this._closed && logger.error(`JSDOM error:${message}`, {args}),\n        );\n\n        /**\n         * We log all other things as `silly`, since they are generally only useful\n         * to us when we're developing/debugging issues locally, and not in\n         * production. We could add some way to turn this on in production\n         * temporarily (like a temporary \"elevate log level\" query param) if\n         * we find that will be useful, but I haven't encountered an issue that\n         * needed these in production yet; they're just noise.\n         */\n        const passthruLog = (method: \"warn\" | \"info\" | \"log\" | \"debug\") => {\n            this.on(\n                method,\n                (message, ...args) =>\n                    !this._closed &&\n                    logger.silly(`JSDOM ${method}:${message}`, {args}),\n            );\n        };\n        passthruLog(\"warn\");\n        passthruLog(\"info\");\n        passthruLog(\"log\");\n        passthruLog(\"debug\");\n    }\n\n    close: () => void | Promise<void> = () => {\n        this._closed = true;\n    };\n}\n"],"mappings":";;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AAAmD,SAAAG,gBAAAC,GAAA,EAAAC,GAAA,EAAAC,KAAA,IAAAD,GAAA,GAAAE,cAAA,CAAAF,GAAA,OAAAA,GAAA,IAAAD,GAAA,IAAAI,MAAA,CAAAC,cAAA,CAAAL,GAAA,EAAAC,GAAA,IAAAC,KAAA,EAAAA,KAAA,EAAAI,UAAA,QAAAC,YAAA,QAAAC,QAAA,oBAAAR,GAAA,CAAAC,GAAA,IAAAC,KAAA,WAAAF,GAAA;AAAA,SAAAG,eAAAM,GAAA,QAAAR,GAAA,GAAAS,YAAA,CAAAD,GAAA,2BAAAR,GAAA,gBAAAA,GAAA,GAAAU,MAAA,CAAAV,GAAA;AAAA,SAAAS,aAAAE,KAAA,EAAAC,IAAA,eAAAD,KAAA,iBAAAA,KAAA,kBAAAA,KAAA,MAAAE,IAAA,GAAAF,KAAA,CAAAG,MAAA,CAAAC,WAAA,OAAAF,IAAA,KAAAG,SAAA,QAAAC,GAAA,GAAAJ,IAAA,CAAAK,IAAA,CAAAP,KAAA,EAAAC,IAAA,2BAAAK,GAAA,sBAAAA,GAAA,YAAAE,SAAA,4DAAAP,IAAA,gBAAAF,MAAA,GAAAU,MAAA,EAAAT,KAAA;AAG5C,MAAMU,uBAAuB,SACxBC,qBAAc,CAE1B;EAGIC,WAAWA,CAACC,MAAc,EAAE;IACxB,KAAK,EAAE;IAAC1B,eAAA;IAAAA,eAAA,gBAsDwB,MAAM;MACtC,IAAI,CAAC2B,OAAO,GAAG,IAAI;IACvB,CAAC;IAvDG,IAAI,CAACA,OAAO,GAAG,KAAK;IAEpB,IAAI,CAACC,EAAE,CAAC,YAAY,EAAGC,CAAQ,IAAK;MAChC,IAAI,IAAI,CAACF,OAAO,EAAE;QACd;QACA;MACJ;MACA,IAAIE,CAAC,CAACC,OAAO,CAACC,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE;QAC9C;QACA;QACA;MACJ;MACA,MAAMC,eAAe,GAAG,IAAAC,mBAAY,EAACJ,CAAC,CAAC;MACvCH,MAAM,CAACQ,KAAK,CAAE,oBAAmBF,eAAe,CAACE,KAAK,IAAI,EAAG,EAAC,EAAE;QAC5D,GAAGF,eAAe;QAClBG,IAAI,EAAEC,cAAM,CAACC;MACjB,CAAC,CAAC;IACN,CAAC,CAAC;;IAEF;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACT,EAAE,CACH,OAAO,EACP,CAACE,OAAO,EAAE,GAAGQ,IAAI,KACb,CAAC,IAAI,CAACX,OAAO,IAAID,MAAM,CAACQ,KAAK,CAAE,eAAcJ,OAAQ,EAAC,EAAE;MAACQ;IAAI,CAAC,CAAC,CACtE;;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,MAAMC,WAAW,GAAIC,MAAyC,IAAK;MAC/D,IAAI,CAACZ,EAAE,CACHY,MAAM,EACN,CAACV,OAAO,EAAE,GAAGQ,IAAI,KACb,CAAC,IAAI,CAACX,OAAO,IACbD,MAAM,CAACe,KAAK,CAAE,SAAQD,MAAO,IAAGV,OAAQ,EAAC,EAAE;QAACQ;MAAI,CAAC,CAAC,CACzD;IACL,CAAC;IACDC,WAAW,CAAC,MAAM,CAAC;IACnBA,WAAW,CAAC,MAAM,CAAC;IACnBA,WAAW,CAAC,KAAK,CAAC;IAClBA,WAAW,CAAC,OAAO,CAAC;EACxB;AAKJ;AAACG,OAAA,CAAAnB,uBAAA,GAAAA,uBAAA"}