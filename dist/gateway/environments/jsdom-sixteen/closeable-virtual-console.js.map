{"version":3,"sources":["../../../../src/gateway/environments/jsdom-sixteen/closeable-virtual-console.js"],"names":["CloseableVirtualConsole","VirtualConsole","constructor","logger","_closed","on","e","message","indexOf","simplifiedError","error","kind","Errors","Internal","args","passthruLog","method","silly"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;;;;;AAGO,MAAMA,uBAAN,SACKC,qBADL,CAGP;AAGIC,EAAAA,WAAW,CAACC,MAAD,EAAiB;AACxB;;AADwB,mCAuDQ,MAAM;AACtC,WAAKC,OAAL,GAAe,IAAf;AACH,KAzD2B;;AAExB,SAAKA,OAAL,GAAe,KAAf;AAEA,SAAKC,EAAL,CAAQ,YAAR,EAAuBC,CAAD,IAAc;AAChC,UAAI,KAAKF,OAAT,EAAkB;AACd;AACA;AACH;;AACD,UAAIE,CAAC,CAACC,OAAF,CAAUC,OAAV,CAAkB,oBAAlB,KAA2C,CAA/C,EAAkD;AAC9C;AACA;AACA;AACH;;AACD,YAAMC,eAAe,GAAG,yBAAaH,CAAb,CAAxB;AACAH,MAAAA,MAAM,CAACO,KAAP,CAAc,oBAAmBD,eAAe,CAACC,KAAhB,IAAyB,EAAG,EAA7D,kCACOD,eADP;AAEIE,QAAAA,IAAI,EAAEC,eAAOC;AAFjB;AAIH,KAfD;AAiBA;AACR;AACA;AACA;AACA;AACA;;AACQ,SAAKR,EAAL,CACI,OADJ,EAEI,CAACE,OAAD,EAAU,GAAGO,IAAb,KACI,CAAC,KAAKV,OAAN,IAAiBD,MAAM,CAACO,KAAP,CAAc,eAAcH,OAAQ,EAApC,EAAuC;AAACO,MAAAA;AAAD,KAAvC,CAHzB;AAMA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,UAAMC,WAAW,GAAIC,MAAD,IAA+C;AAC/D,WAAKX,EAAL,CACIW,MADJ,EAEI,CAACT,OAAD,EAAU,GAAGO,IAAb,KACI,CAAC,KAAKV,OAAN,IACAD,MAAM,CAACc,KAAP,CAAc,SAAQD,MAAO,IAAGT,OAAQ,EAAxC,EAA2C;AAACO,QAAAA;AAAD,OAA3C,CAJR;AAMH,KAPD;;AAQAC,IAAAA,WAAW,CAAC,MAAD,CAAX;AACAA,IAAAA,WAAW,CAAC,MAAD,CAAX;AACAA,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAA,IAAAA,WAAW,CAAC,OAAD,CAAX;AACH;;AAxDL","sourcesContent":["// @flow\nimport {VirtualConsole} from \"jsdom\";\nimport {extractError} from \"../../../shared/index.js\";\nimport {Errors} from \"../../../ka-shared/index.js\";\nimport type {Logger, ICloseable} from \"../../../shared/index.js\";\n\nexport class CloseableVirtualConsole\n    extends VirtualConsole\n    implements ICloseable\n{\n    _closed: boolean;\n\n    constructor(logger: Logger) {\n        super();\n        this._closed = false;\n\n        this.on(\"jsdomError\", (e: Error) => {\n            if (this._closed) {\n                // We are closed. No logging.\n                return;\n            }\n            if (e.message.indexOf(\"Could not load img\") >= 0) {\n                // We know that images cannot load. We're deliberately blocking\n                // them.\n                return;\n            }\n            const simplifiedError = extractError(e);\n            logger.error(`JSDOM jsdomError:${simplifiedError.error || \"\"}`, {\n                ...simplifiedError,\n                kind: Errors.Internal,\n            });\n        });\n\n        /**\n         * NOTE(somewhatabstract): We pass args array as the metadata parameter for\n         * winston log. We don't worry about adding the error kind here; we mark\n         * these as Errors.Internal automatically if they don't already include a\n         * kind.\n         */\n        this.on(\n            \"error\",\n            (message, ...args) =>\n                !this._closed && logger.error(`JSDOM error:${message}`, {args}),\n        );\n\n        /**\n         * We log all other things as `silly`, since they are generally only useful\n         * to us when we're developing/debugging issues locally, and not in\n         * production. We could add some way to turn this on in production\n         * temporarily (like a temporary \"elevate log level\" query param) if\n         * we find that will be useful, but I haven't encountered an issue that\n         * needed these in production yet; they're just noise.\n         */\n        const passthruLog = (method: \"warn\" | \"info\" | \"log\" | \"debug\") => {\n            this.on(\n                method,\n                (message, ...args) =>\n                    !this._closed &&\n                    logger.silly(`JSDOM ${method}:${message}`, {args}),\n            );\n        };\n        passthruLog(\"warn\");\n        passthruLog(\"info\");\n        passthruLog(\"log\");\n        passthruLog(\"debug\");\n    }\n\n    close: () => void | Promise<void> = () => {\n        this._closed = true;\n    };\n}\n"],"file":"closeable-virtual-console.js"}