{"version":3,"sources":["../../../../src/gateway/environments/jsdom-sixteen/jsdom-sixteen-file-resource-loader.js"],"names":["readFileAsync","fs","readFile","JSDOMSixteenFileResourceLoader","ResourceLoader","constructor","rootFolder","url","path","isAbsolute","parsedURL","URL","normalize","join","_rootFolder","pathname","e","existsSync","Error","fetch","options","filePath","_makeFilePath"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AAEA;;;;;;AAEA,MAAMA,aAAa,GAAG,qBAAUC,YAAGC,QAAb,CAAtB;AAEA;;;;;AAIO,MAAMC,8BAAN,SAA6CC,qBAA7C,CAA4D;AAG/D;;;;;;AAMAC,EAAAA,WAAW,CAACC,UAAD,EAAqB;AAC5B;AACA;AAEA;;AAJ4B;;AAAA,2CAaKC,GAAD,IAAS;AACzC;;;;;;AAMA,UAAIC,cAAKC,UAAL,CAAgBF,GAAhB,CAAJ,EAA0B;AACtB,eAAOA,GAAP;AACH;;AAED,UAAI;AACA,cAAMG,SAAS,GAAG,IAAIC,GAAJ,CAAQJ,GAAR,CAAlB;AACA,eAAOC,cAAKI,SAAL,CACHJ,cAAKK,IAAL,CAAU,KAAKC,WAAf,EAA4BJ,SAAS,CAACK,QAAtC,CADG,CAAP;AAGH,OALD,CAKE,OAAOC,CAAP,EAAU,CAEX;AADG;AAGJ;;;AACA,aAAOR,cAAKI,SAAL,CAAeJ,cAAKK,IAAL,CAAU,KAAKC,WAAf,EAA4BP,GAA5B,CAAf,CAAP;AACH,KAnC+B;;AAM5B,QAAI,CAACN,YAAGgB,UAAH,CAAcX,UAAd,CAAL,EAAgC;AAC5B,YAAM,IAAIY,KAAJ,CAAU,6BAAV,CAAN;AACH;;AAED,SAAKJ,WAAL,GAAmBR,UAAnB;AACH;;AA0BDa,EAAAA,KAAK,CAACZ,GAAD,EAAca,OAAd,EAAwD;AACzD,UAAMC,QAAQ,GAAG,KAAKC,aAAL,CAAmBf,GAAnB,CAAjB;;AACA,WAAOP,aAAa,CAACqB,QAAD,CAApB;AACH;;AAjD8D","sourcesContent":["// @flow\nimport fs from \"fs\";\nimport path from \"path\";\nimport {promisify} from \"util\";\nimport {ResourceLoader} from \"jsdom\";\nimport type {FetchOptions} from \"jsdom\";\nimport {applyAbortablePromisesPatch} from \"./apply-abortable-promises-patch.js\";\n\nconst readFileAsync = promisify(fs.readFile);\n\n/**\n * A ResourceLoader implementation for JSDOM sixteen-compatible versions of\n * JSDOM that loads files from disk.\n */\nexport class JSDOMSixteenFileResourceLoader extends ResourceLoader {\n    _rootFolder: string;\n\n    /**\n     * Create instance of the resource loader.\n     *\n     * @param {string} rootFolder\n     * The root of where we will load files.\n     */\n    constructor(rootFolder: string) {\n        // Patch before super to make sure promises get an abort.\n        applyAbortablePromisesPatch();\n\n        super();\n\n        if (!fs.existsSync(rootFolder)) {\n            throw new Error(\"Root folder cannot be found\");\n        }\n\n        this._rootFolder = rootFolder;\n    }\n\n    _makeFilePath: (string) => string = (url) => {\n        /**\n         * If the url is a url, we are going to use it as a file path from root.\n         *\n         * If it is an absolute path, we just use it, otherwise we treat it\n         * as a relative path from root.\n         */\n        if (path.isAbsolute(url)) {\n            return url;\n        }\n\n        try {\n            const parsedURL = new URL(url);\n            return path.normalize(\n                path.join(this._rootFolder, parsedURL.pathname),\n            );\n        } catch (e) {\n            /* nothing */\n        }\n\n        // Assume relative path\n        return path.normalize(path.join(this._rootFolder, url));\n    };\n\n    fetch(url: string, options?: FetchOptions): ?Promise<Buffer> {\n        const filePath = this._makeFilePath(url);\n        return readFileAsync(filePath);\n    }\n}\n"],"file":"jsdom-sixteen-file-resource-loader.js"}