{"version":3,"sources":["../../../../src/gateway/environments/jsdom-sixteen/patch-against-dangling-timers.js"],"names":["makeGate","gateOpen","open","close","isOpen","makeSingleWarningPatchFn","warned","obj","fnName","gate","old","callback","args","gatedCallback","console","warn","patchAgainstDanglingTimers","objToPatch","patchCallbackFnWithGate"],"mappings":";;;;;;;AAGA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAG,MAAa;AAC1B,MAAIC,QAAQ,GAAG,IAAf;AACA,SAAO;AACHC,IAAAA,IAAI,EAAE,MAAM;AACRD,MAAAA,QAAQ,GAAG,IAAX;AACH,KAHE;AAIHE,IAAAA,KAAK,EAAE,MAAM;AACTF,MAAAA,QAAQ,GAAG,KAAX;AACH,KANE;;AAOH,QAAIG,MAAJ,GAAsB;AAClB,aAAOH,QAAP;AACH;;AATE,GAAP;AAWH,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,wBAAwB,GAAG,MAAM;AACnC,MAAIC,MAAM,GAAG,KAAb;AACA,SAAO,CAACC,GAAD,EAAWC,MAAX,EAA2BC,IAA3B,KAAiD;AACpD,UAAMC,GAAG,GAAGH,GAAG,CAACC,MAAD,CAAf;AACA,WAAOD,GAAG,CAACC,MAAD,CAAV;;AACAD,IAAAA,GAAG,CAACC,MAAD,CAAH,GAAc,CAACG,QAAD,EAAW,GAAGC,IAAd,KAAuB;AACjC,YAAMC,aAAa,GAAG,MAAM;AACxB,YAAIJ,IAAI,CAACL,MAAT,EAAiB;AACbO,UAAAA,QAAQ;AACR;AACH;;AACD,YAAI,CAACL,MAAL,EAAa;AACTA,UAAAA,MAAM,GAAG,IAAT;AACA;AACpB;AACA;AACA;AACA;AACoB;;AACAQ,UAAAA,OAAO,CAACC,IAAR,CAAa,4BAAb;AACH;AACJ,OAfD;;AAgBA,aAAOL,GAAG,CAACG,aAAD,EAAgB,GAAGD,IAAnB,CAAV;AACH,KAlBD;AAmBH,GAtBD;AAuBH,CAzBD;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMI,0BAA0B,GAAIC,UAAD,IAAkC;AACxE;AACJ;AACA;AACA;AACI,QAAMR,IAAI,GAAGT,QAAQ,EAArB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,QAAMkB,uBAAuB,GAAGb,wBAAwB,EAAxD;AAEA;AACJ;AACA;AACA;;AACIa,EAAAA,uBAAuB,CAACD,UAAD,EAAa,YAAb,EAA2BR,IAA3B,CAAvB;AACAS,EAAAA,uBAAuB,CAACD,UAAD,EAAa,aAAb,EAA4BR,IAA5B,CAAvB;AACAS,EAAAA,uBAAuB,CAACD,UAAD,EAAa,uBAAb,EAAsCR,IAAtC,CAAvB;AAEA,SAAOA,IAAP;AACH,CAxBM","sourcesContent":["// @flow\nimport type {IGate, ITimerAPI} from \"./types.js\";\n\n/**\n * Make a gate that can be open and closed.\n * Default open.\n */\nconst makeGate = (): IGate => {\n    let gateOpen = true;\n    return {\n        open: () => {\n            gateOpen = true;\n        },\n        close: () => {\n            gateOpen = false;\n        },\n        get isOpen(): boolean {\n            return gateOpen;\n        },\n    };\n};\n\n/**\n * Return a function that patches timeout functions with shared warning.\n *\n * This returns a call that, when used to patch setTimeout, setInterval, etc.\n * will only warn once if any of the patched functions invokes a callback\n * after the given gate is closed.\n */\nconst makeSingleWarningPatchFn = () => {\n    let warned = false;\n    return (obj: any, fnName: string, gate: IGate): void => {\n        const old = obj[fnName];\n        delete obj[fnName];\n        obj[fnName] = (callback, ...args) => {\n            const gatedCallback = () => {\n                if (gate.isOpen) {\n                    callback();\n                    return;\n                }\n                if (!warned) {\n                    warned = true;\n                    /**\n                     * This uses console because it runs in the VM, so it\n                     * doesn't have direct access to our winston logging.\n                     * Our virtual JSDOM console manages that.\n                     */\n                    // eslint-disable-next-line no-console\n                    console.warn(\"Dangling timer(s) detected\");\n                }\n            };\n            return old(gatedCallback, ...args);\n        };\n    };\n};\n\n/**\n * Patch the timer API to protect against dangling timers.\n *\n * @returns {IGate} A gate API to control when timers should be allowed to run\n * (gate is open), or when we should prevent them running and report dangling\n * timers (gate is closed).\n */\nexport const patchAgainstDanglingTimers = (objToPatch: ITimerAPI): IGate => {\n    /**\n     * Make a gate so we can control how the timers are handled.\n     * The gate is default open.\n     */\n    const gate = makeGate();\n\n    /**\n     * Get a patch function with single warning.\n     * This ensures that each of the patched functions will only warn of\n     * dangling timers if none of the others have warned already.\n     * This keeps the log a little tidier and manageable.\n     */\n    const patchCallbackFnWithGate = makeSingleWarningPatchFn();\n\n    /**\n     * Patch the timer functions on window so that dangling timers don't kill\n     * us when we close the window.\n     */\n    patchCallbackFnWithGate(objToPatch, \"setTimeout\", gate);\n    patchCallbackFnWithGate(objToPatch, \"setInterval\", gate);\n    patchCallbackFnWithGate(objToPatch, \"requestAnimationFrame\", gate);\n\n    return gate;\n};\n"],"file":"patch-against-dangling-timers.js"}